
TEST-CLIFF-NF401.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004f34  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000e0  080050d4  080050d4  000150d4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  080051b4  080051b4  000151b4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  080051bc  080051bc  000151bc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  080051c0  080051c0  000151c0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000070  20000000  080051c4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00000148  20000070  08005234  00020070  2**2
                  ALLOC
  8 ._user_heap_stack 00000600  200001b8  08005234  000201b8  2**0
                  ALLOC
  9 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 10 .debug_line   00006689  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_info   00013c07  00000000  00000000  00026729  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_abbrev 00002323  00000000  00000000  0003a330  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_aranges 00000e68  00000000  00000000  0003c658  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_ranges 00000d80  00000000  00000000  0003d4c0  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    000044d3  00000000  00000000  0003e240  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .comment      0000007c  00000000  00000000  00042713  2**0
                  CONTENTS, READONLY
 17 .debug_frame  00004518  00000000  00000000  00042790  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000070 	.word	0x20000070
 80001bc:	00000000 	.word	0x00000000
 80001c0:	080050bc 	.word	0x080050bc

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000074 	.word	0x20000074
 80001dc:	080050bc 	.word	0x080050bc

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295
 8000290:	f04f 30ff 	movne.w	r0, #4294967295
 8000294:	f000 b97a 	b.w	800058c <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	468c      	mov	ip, r1
 80002b6:	460d      	mov	r5, r1
 80002b8:	4604      	mov	r4, r0
 80002ba:	9e08      	ldr	r6, [sp, #32]
 80002bc:	2b00      	cmp	r3, #0
 80002be:	d151      	bne.n	8000364 <__udivmoddi4+0xb4>
 80002c0:	428a      	cmp	r2, r1
 80002c2:	4617      	mov	r7, r2
 80002c4:	d96d      	bls.n	80003a2 <__udivmoddi4+0xf2>
 80002c6:	fab2 fe82 	clz	lr, r2
 80002ca:	f1be 0f00 	cmp.w	lr, #0
 80002ce:	d00b      	beq.n	80002e8 <__udivmoddi4+0x38>
 80002d0:	f1ce 0c20 	rsb	ip, lr, #32
 80002d4:	fa01 f50e 	lsl.w	r5, r1, lr
 80002d8:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002dc:	fa02 f70e 	lsl.w	r7, r2, lr
 80002e0:	ea4c 0c05 	orr.w	ip, ip, r5
 80002e4:	fa00 f40e 	lsl.w	r4, r0, lr
 80002e8:	ea4f 4a17 	mov.w	sl, r7, lsr #16
 80002ec:	0c25      	lsrs	r5, r4, #16
 80002ee:	fbbc f8fa 	udiv	r8, ip, sl
 80002f2:	fa1f f987 	uxth.w	r9, r7
 80002f6:	fb0a cc18 	mls	ip, sl, r8, ip
 80002fa:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
 80002fe:	fb08 f309 	mul.w	r3, r8, r9
 8000302:	42ab      	cmp	r3, r5
 8000304:	d90a      	bls.n	800031c <__udivmoddi4+0x6c>
 8000306:	19ed      	adds	r5, r5, r7
 8000308:	f108 32ff 	add.w	r2, r8, #4294967295
 800030c:	f080 8123 	bcs.w	8000556 <__udivmoddi4+0x2a6>
 8000310:	42ab      	cmp	r3, r5
 8000312:	f240 8120 	bls.w	8000556 <__udivmoddi4+0x2a6>
 8000316:	f1a8 0802 	sub.w	r8, r8, #2
 800031a:	443d      	add	r5, r7
 800031c:	1aed      	subs	r5, r5, r3
 800031e:	b2a4      	uxth	r4, r4
 8000320:	fbb5 f0fa 	udiv	r0, r5, sl
 8000324:	fb0a 5510 	mls	r5, sl, r0, r5
 8000328:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 800032c:	fb00 f909 	mul.w	r9, r0, r9
 8000330:	45a1      	cmp	r9, r4
 8000332:	d909      	bls.n	8000348 <__udivmoddi4+0x98>
 8000334:	19e4      	adds	r4, r4, r7
 8000336:	f100 33ff 	add.w	r3, r0, #4294967295
 800033a:	f080 810a 	bcs.w	8000552 <__udivmoddi4+0x2a2>
 800033e:	45a1      	cmp	r9, r4
 8000340:	f240 8107 	bls.w	8000552 <__udivmoddi4+0x2a2>
 8000344:	3802      	subs	r0, #2
 8000346:	443c      	add	r4, r7
 8000348:	eba4 0409 	sub.w	r4, r4, r9
 800034c:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000350:	2100      	movs	r1, #0
 8000352:	2e00      	cmp	r6, #0
 8000354:	d061      	beq.n	800041a <__udivmoddi4+0x16a>
 8000356:	fa24 f40e 	lsr.w	r4, r4, lr
 800035a:	2300      	movs	r3, #0
 800035c:	6034      	str	r4, [r6, #0]
 800035e:	6073      	str	r3, [r6, #4]
 8000360:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000364:	428b      	cmp	r3, r1
 8000366:	d907      	bls.n	8000378 <__udivmoddi4+0xc8>
 8000368:	2e00      	cmp	r6, #0
 800036a:	d054      	beq.n	8000416 <__udivmoddi4+0x166>
 800036c:	2100      	movs	r1, #0
 800036e:	e886 0021 	stmia.w	r6, {r0, r5}
 8000372:	4608      	mov	r0, r1
 8000374:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000378:	fab3 f183 	clz	r1, r3
 800037c:	2900      	cmp	r1, #0
 800037e:	f040 808e 	bne.w	800049e <__udivmoddi4+0x1ee>
 8000382:	42ab      	cmp	r3, r5
 8000384:	d302      	bcc.n	800038c <__udivmoddi4+0xdc>
 8000386:	4282      	cmp	r2, r0
 8000388:	f200 80fa 	bhi.w	8000580 <__udivmoddi4+0x2d0>
 800038c:	1a84      	subs	r4, r0, r2
 800038e:	eb65 0503 	sbc.w	r5, r5, r3
 8000392:	2001      	movs	r0, #1
 8000394:	46ac      	mov	ip, r5
 8000396:	2e00      	cmp	r6, #0
 8000398:	d03f      	beq.n	800041a <__udivmoddi4+0x16a>
 800039a:	e886 1010 	stmia.w	r6, {r4, ip}
 800039e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003a2:	b912      	cbnz	r2, 80003aa <__udivmoddi4+0xfa>
 80003a4:	2701      	movs	r7, #1
 80003a6:	fbb7 f7f2 	udiv	r7, r7, r2
 80003aa:	fab7 fe87 	clz	lr, r7
 80003ae:	f1be 0f00 	cmp.w	lr, #0
 80003b2:	d134      	bne.n	800041e <__udivmoddi4+0x16e>
 80003b4:	1beb      	subs	r3, r5, r7
 80003b6:	0c3a      	lsrs	r2, r7, #16
 80003b8:	fa1f fc87 	uxth.w	ip, r7
 80003bc:	2101      	movs	r1, #1
 80003be:	fbb3 f8f2 	udiv	r8, r3, r2
 80003c2:	0c25      	lsrs	r5, r4, #16
 80003c4:	fb02 3318 	mls	r3, r2, r8, r3
 80003c8:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 80003cc:	fb0c f308 	mul.w	r3, ip, r8
 80003d0:	42ab      	cmp	r3, r5
 80003d2:	d907      	bls.n	80003e4 <__udivmoddi4+0x134>
 80003d4:	19ed      	adds	r5, r5, r7
 80003d6:	f108 30ff 	add.w	r0, r8, #4294967295
 80003da:	d202      	bcs.n	80003e2 <__udivmoddi4+0x132>
 80003dc:	42ab      	cmp	r3, r5
 80003de:	f200 80d1 	bhi.w	8000584 <__udivmoddi4+0x2d4>
 80003e2:	4680      	mov	r8, r0
 80003e4:	1aed      	subs	r5, r5, r3
 80003e6:	b2a3      	uxth	r3, r4
 80003e8:	fbb5 f0f2 	udiv	r0, r5, r2
 80003ec:	fb02 5510 	mls	r5, r2, r0, r5
 80003f0:	ea43 4405 	orr.w	r4, r3, r5, lsl #16
 80003f4:	fb0c fc00 	mul.w	ip, ip, r0
 80003f8:	45a4      	cmp	ip, r4
 80003fa:	d907      	bls.n	800040c <__udivmoddi4+0x15c>
 80003fc:	19e4      	adds	r4, r4, r7
 80003fe:	f100 33ff 	add.w	r3, r0, #4294967295
 8000402:	d202      	bcs.n	800040a <__udivmoddi4+0x15a>
 8000404:	45a4      	cmp	ip, r4
 8000406:	f200 80b8 	bhi.w	800057a <__udivmoddi4+0x2ca>
 800040a:	4618      	mov	r0, r3
 800040c:	eba4 040c 	sub.w	r4, r4, ip
 8000410:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000414:	e79d      	b.n	8000352 <__udivmoddi4+0xa2>
 8000416:	4631      	mov	r1, r6
 8000418:	4630      	mov	r0, r6
 800041a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800041e:	f1ce 0420 	rsb	r4, lr, #32
 8000422:	fa05 f30e 	lsl.w	r3, r5, lr
 8000426:	fa07 f70e 	lsl.w	r7, r7, lr
 800042a:	fa20 f804 	lsr.w	r8, r0, r4
 800042e:	0c3a      	lsrs	r2, r7, #16
 8000430:	fa25 f404 	lsr.w	r4, r5, r4
 8000434:	ea48 0803 	orr.w	r8, r8, r3
 8000438:	fbb4 f1f2 	udiv	r1, r4, r2
 800043c:	ea4f 4518 	mov.w	r5, r8, lsr #16
 8000440:	fb02 4411 	mls	r4, r2, r1, r4
 8000444:	fa1f fc87 	uxth.w	ip, r7
 8000448:	ea45 4504 	orr.w	r5, r5, r4, lsl #16
 800044c:	fb01 f30c 	mul.w	r3, r1, ip
 8000450:	42ab      	cmp	r3, r5
 8000452:	fa00 f40e 	lsl.w	r4, r0, lr
 8000456:	d909      	bls.n	800046c <__udivmoddi4+0x1bc>
 8000458:	19ed      	adds	r5, r5, r7
 800045a:	f101 30ff 	add.w	r0, r1, #4294967295
 800045e:	f080 808a 	bcs.w	8000576 <__udivmoddi4+0x2c6>
 8000462:	42ab      	cmp	r3, r5
 8000464:	f240 8087 	bls.w	8000576 <__udivmoddi4+0x2c6>
 8000468:	3902      	subs	r1, #2
 800046a:	443d      	add	r5, r7
 800046c:	1aeb      	subs	r3, r5, r3
 800046e:	fa1f f588 	uxth.w	r5, r8
 8000472:	fbb3 f0f2 	udiv	r0, r3, r2
 8000476:	fb02 3310 	mls	r3, r2, r0, r3
 800047a:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 800047e:	fb00 f30c 	mul.w	r3, r0, ip
 8000482:	42ab      	cmp	r3, r5
 8000484:	d907      	bls.n	8000496 <__udivmoddi4+0x1e6>
 8000486:	19ed      	adds	r5, r5, r7
 8000488:	f100 38ff 	add.w	r8, r0, #4294967295
 800048c:	d26f      	bcs.n	800056e <__udivmoddi4+0x2be>
 800048e:	42ab      	cmp	r3, r5
 8000490:	d96d      	bls.n	800056e <__udivmoddi4+0x2be>
 8000492:	3802      	subs	r0, #2
 8000494:	443d      	add	r5, r7
 8000496:	1aeb      	subs	r3, r5, r3
 8000498:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800049c:	e78f      	b.n	80003be <__udivmoddi4+0x10e>
 800049e:	f1c1 0720 	rsb	r7, r1, #32
 80004a2:	fa22 f807 	lsr.w	r8, r2, r7
 80004a6:	408b      	lsls	r3, r1
 80004a8:	fa05 f401 	lsl.w	r4, r5, r1
 80004ac:	ea48 0303 	orr.w	r3, r8, r3
 80004b0:	fa20 fe07 	lsr.w	lr, r0, r7
 80004b4:	ea4f 4c13 	mov.w	ip, r3, lsr #16
 80004b8:	40fd      	lsrs	r5, r7
 80004ba:	ea4e 0e04 	orr.w	lr, lr, r4
 80004be:	fbb5 f9fc 	udiv	r9, r5, ip
 80004c2:	ea4f 441e 	mov.w	r4, lr, lsr #16
 80004c6:	fb0c 5519 	mls	r5, ip, r9, r5
 80004ca:	fa1f f883 	uxth.w	r8, r3
 80004ce:	ea44 4505 	orr.w	r5, r4, r5, lsl #16
 80004d2:	fb09 f408 	mul.w	r4, r9, r8
 80004d6:	42ac      	cmp	r4, r5
 80004d8:	fa02 f201 	lsl.w	r2, r2, r1
 80004dc:	fa00 fa01 	lsl.w	sl, r0, r1
 80004e0:	d908      	bls.n	80004f4 <__udivmoddi4+0x244>
 80004e2:	18ed      	adds	r5, r5, r3
 80004e4:	f109 30ff 	add.w	r0, r9, #4294967295
 80004e8:	d243      	bcs.n	8000572 <__udivmoddi4+0x2c2>
 80004ea:	42ac      	cmp	r4, r5
 80004ec:	d941      	bls.n	8000572 <__udivmoddi4+0x2c2>
 80004ee:	f1a9 0902 	sub.w	r9, r9, #2
 80004f2:	441d      	add	r5, r3
 80004f4:	1b2d      	subs	r5, r5, r4
 80004f6:	fa1f fe8e 	uxth.w	lr, lr
 80004fa:	fbb5 f0fc 	udiv	r0, r5, ip
 80004fe:	fb0c 5510 	mls	r5, ip, r0, r5
 8000502:	ea4e 4405 	orr.w	r4, lr, r5, lsl #16
 8000506:	fb00 f808 	mul.w	r8, r0, r8
 800050a:	45a0      	cmp	r8, r4
 800050c:	d907      	bls.n	800051e <__udivmoddi4+0x26e>
 800050e:	18e4      	adds	r4, r4, r3
 8000510:	f100 35ff 	add.w	r5, r0, #4294967295
 8000514:	d229      	bcs.n	800056a <__udivmoddi4+0x2ba>
 8000516:	45a0      	cmp	r8, r4
 8000518:	d927      	bls.n	800056a <__udivmoddi4+0x2ba>
 800051a:	3802      	subs	r0, #2
 800051c:	441c      	add	r4, r3
 800051e:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000522:	eba4 0408 	sub.w	r4, r4, r8
 8000526:	fba0 8902 	umull	r8, r9, r0, r2
 800052a:	454c      	cmp	r4, r9
 800052c:	46c6      	mov	lr, r8
 800052e:	464d      	mov	r5, r9
 8000530:	d315      	bcc.n	800055e <__udivmoddi4+0x2ae>
 8000532:	d012      	beq.n	800055a <__udivmoddi4+0x2aa>
 8000534:	b156      	cbz	r6, 800054c <__udivmoddi4+0x29c>
 8000536:	ebba 030e 	subs.w	r3, sl, lr
 800053a:	eb64 0405 	sbc.w	r4, r4, r5
 800053e:	fa04 f707 	lsl.w	r7, r4, r7
 8000542:	40cb      	lsrs	r3, r1
 8000544:	431f      	orrs	r7, r3
 8000546:	40cc      	lsrs	r4, r1
 8000548:	6037      	str	r7, [r6, #0]
 800054a:	6074      	str	r4, [r6, #4]
 800054c:	2100      	movs	r1, #0
 800054e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000552:	4618      	mov	r0, r3
 8000554:	e6f8      	b.n	8000348 <__udivmoddi4+0x98>
 8000556:	4690      	mov	r8, r2
 8000558:	e6e0      	b.n	800031c <__udivmoddi4+0x6c>
 800055a:	45c2      	cmp	sl, r8
 800055c:	d2ea      	bcs.n	8000534 <__udivmoddi4+0x284>
 800055e:	ebb8 0e02 	subs.w	lr, r8, r2
 8000562:	eb69 0503 	sbc.w	r5, r9, r3
 8000566:	3801      	subs	r0, #1
 8000568:	e7e4      	b.n	8000534 <__udivmoddi4+0x284>
 800056a:	4628      	mov	r0, r5
 800056c:	e7d7      	b.n	800051e <__udivmoddi4+0x26e>
 800056e:	4640      	mov	r0, r8
 8000570:	e791      	b.n	8000496 <__udivmoddi4+0x1e6>
 8000572:	4681      	mov	r9, r0
 8000574:	e7be      	b.n	80004f4 <__udivmoddi4+0x244>
 8000576:	4601      	mov	r1, r0
 8000578:	e778      	b.n	800046c <__udivmoddi4+0x1bc>
 800057a:	3802      	subs	r0, #2
 800057c:	443c      	add	r4, r7
 800057e:	e745      	b.n	800040c <__udivmoddi4+0x15c>
 8000580:	4608      	mov	r0, r1
 8000582:	e708      	b.n	8000396 <__udivmoddi4+0xe6>
 8000584:	f1a8 0802 	sub.w	r8, r8, #2
 8000588:	443d      	add	r5, r7
 800058a:	e72b      	b.n	80003e4 <__udivmoddi4+0x134>

0800058c <__aeabi_idiv0>:
 800058c:	4770      	bx	lr
 800058e:	bf00      	nop

08000590 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8000590:	f8df d034 	ldr.w	sp, [pc, #52]	; 80005c8 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8000594:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8000596:	e003      	b.n	80005a0 <LoopCopyDataInit>

08000598 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8000598:	4b0c      	ldr	r3, [pc, #48]	; (80005cc <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 800059a:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 800059c:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 800059e:	3104      	adds	r1, #4

080005a0 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 80005a0:	480b      	ldr	r0, [pc, #44]	; (80005d0 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 80005a2:	4b0c      	ldr	r3, [pc, #48]	; (80005d4 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 80005a4:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 80005a6:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 80005a8:	d3f6      	bcc.n	8000598 <CopyDataInit>
  ldr  r2, =_sbss
 80005aa:	4a0b      	ldr	r2, [pc, #44]	; (80005d8 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 80005ac:	e002      	b.n	80005b4 <LoopFillZerobss>

080005ae <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 80005ae:	2300      	movs	r3, #0
  str  r3, [r2], #4
 80005b0:	f842 3b04 	str.w	r3, [r2], #4

080005b4 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 80005b4:	4b09      	ldr	r3, [pc, #36]	; (80005dc <LoopFillZerobss+0x28>)
  cmp  r2, r3
 80005b6:	429a      	cmp	r2, r3
  bcc  FillZerobss
 80005b8:	d3f9      	bcc.n	80005ae <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80005ba:	f000 fcbb 	bl	8000f34 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80005be:	f003 fdab 	bl	8004118 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80005c2:	f000 f88b 	bl	80006dc <main>
  bx  lr    
 80005c6:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 80005c8:	20018000 	.word	0x20018000
  ldr  r3, =_sidata
 80005cc:	080051c4 	.word	0x080051c4
  ldr  r0, =_sdata
 80005d0:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 80005d4:	20000070 	.word	0x20000070
  ldr  r2, =_sbss
 80005d8:	20000070 	.word	0x20000070
  ldr  r3, = _ebss
 80005dc:	200001b8 	.word	0x200001b8

080005e0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80005e0:	e7fe      	b.n	80005e0 <ADC_IRQHandler>

080005e2 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

int _read (int file, char *ptr, int len)
{
 80005e2:	b590      	push	{r4, r7, lr}
 80005e4:	b087      	sub	sp, #28
 80005e6:	af00      	add	r7, sp, #0
 80005e8:	60f8      	str	r0, [r7, #12]
 80005ea:	60b9      	str	r1, [r7, #8]
 80005ec:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80005ee:	2300      	movs	r3, #0
 80005f0:	617b      	str	r3, [r7, #20]
 80005f2:	e00a      	b.n	800060a <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80005f4:	68bc      	ldr	r4, [r7, #8]
 80005f6:	1c63      	adds	r3, r4, #1
 80005f8:	60bb      	str	r3, [r7, #8]
 80005fa:	f3af 8000 	nop.w
 80005fe:	4603      	mov	r3, r0
 8000600:	b2db      	uxtb	r3, r3
 8000602:	7023      	strb	r3, [r4, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000604:	697b      	ldr	r3, [r7, #20]
 8000606:	3301      	adds	r3, #1
 8000608:	617b      	str	r3, [r7, #20]
 800060a:	697a      	ldr	r2, [r7, #20]
 800060c:	687b      	ldr	r3, [r7, #4]
 800060e:	429a      	cmp	r2, r3
 8000610:	dbf0      	blt.n	80005f4 <_read+0x12>
	}

return len;
 8000612:	687b      	ldr	r3, [r7, #4]
}
 8000614:	4618      	mov	r0, r3
 8000616:	371c      	adds	r7, #28
 8000618:	46bd      	mov	sp, r7
 800061a:	bd90      	pop	{r4, r7, pc}

0800061c <_sbrk>:
//	}
//	return len;
//}

caddr_t _sbrk(int incr)
{
 800061c:	b580      	push	{r7, lr}
 800061e:	b084      	sub	sp, #16
 8000620:	af00      	add	r7, sp, #0
 8000622:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8000624:	4b11      	ldr	r3, [pc, #68]	; (800066c <_sbrk+0x50>)
 8000626:	681b      	ldr	r3, [r3, #0]
 8000628:	2b00      	cmp	r3, #0
 800062a:	d102      	bne.n	8000632 <_sbrk+0x16>
		heap_end = &end;
 800062c:	4b0f      	ldr	r3, [pc, #60]	; (800066c <_sbrk+0x50>)
 800062e:	4a10      	ldr	r2, [pc, #64]	; (8000670 <_sbrk+0x54>)
 8000630:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 8000632:	4b0e      	ldr	r3, [pc, #56]	; (800066c <_sbrk+0x50>)
 8000634:	681b      	ldr	r3, [r3, #0]
 8000636:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8000638:	4b0c      	ldr	r3, [pc, #48]	; (800066c <_sbrk+0x50>)
 800063a:	681a      	ldr	r2, [r3, #0]
 800063c:	687b      	ldr	r3, [r7, #4]
 800063e:	4413      	add	r3, r2
 8000640:	466a      	mov	r2, sp
 8000642:	4293      	cmp	r3, r2
 8000644:	d907      	bls.n	8000656 <_sbrk+0x3a>
	{
//		write(1, "Heap and stack collision\n", 25);
//		abort();
		errno = ENOMEM;
 8000646:	f003 fd61 	bl	800410c <__errno>
 800064a:	4602      	mov	r2, r0
 800064c:	230c      	movs	r3, #12
 800064e:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 8000650:	f04f 33ff 	mov.w	r3, #4294967295
 8000654:	e006      	b.n	8000664 <_sbrk+0x48>
	}

	heap_end += incr;
 8000656:	4b05      	ldr	r3, [pc, #20]	; (800066c <_sbrk+0x50>)
 8000658:	681a      	ldr	r2, [r3, #0]
 800065a:	687b      	ldr	r3, [r7, #4]
 800065c:	4413      	add	r3, r2
 800065e:	4a03      	ldr	r2, [pc, #12]	; (800066c <_sbrk+0x50>)
 8000660:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 8000662:	68fb      	ldr	r3, [r7, #12]
}
 8000664:	4618      	mov	r0, r3
 8000666:	3710      	adds	r7, #16
 8000668:	46bd      	mov	sp, r7
 800066a:	bd80      	pop	{r7, pc}
 800066c:	2000008c 	.word	0x2000008c
 8000670:	200001b8 	.word	0x200001b8

08000674 <_close>:

int _close(int file)
{
 8000674:	b480      	push	{r7}
 8000676:	b083      	sub	sp, #12
 8000678:	af00      	add	r7, sp, #0
 800067a:	6078      	str	r0, [r7, #4]
	return -1;
 800067c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000680:	4618      	mov	r0, r3
 8000682:	370c      	adds	r7, #12
 8000684:	46bd      	mov	sp, r7
 8000686:	f85d 7b04 	ldr.w	r7, [sp], #4
 800068a:	4770      	bx	lr

0800068c <_fstat>:


int _fstat(int file, struct stat *st)
{
 800068c:	b480      	push	{r7}
 800068e:	b083      	sub	sp, #12
 8000690:	af00      	add	r7, sp, #0
 8000692:	6078      	str	r0, [r7, #4]
 8000694:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8000696:	683b      	ldr	r3, [r7, #0]
 8000698:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800069c:	605a      	str	r2, [r3, #4]
	return 0;
 800069e:	2300      	movs	r3, #0
}
 80006a0:	4618      	mov	r0, r3
 80006a2:	370c      	adds	r7, #12
 80006a4:	46bd      	mov	sp, r7
 80006a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006aa:	4770      	bx	lr

080006ac <_isatty>:

int _isatty(int file)
{
 80006ac:	b480      	push	{r7}
 80006ae:	b083      	sub	sp, #12
 80006b0:	af00      	add	r7, sp, #0
 80006b2:	6078      	str	r0, [r7, #4]
	return 1;
 80006b4:	2301      	movs	r3, #1
}
 80006b6:	4618      	mov	r0, r3
 80006b8:	370c      	adds	r7, #12
 80006ba:	46bd      	mov	sp, r7
 80006bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006c0:	4770      	bx	lr

080006c2 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80006c2:	b480      	push	{r7}
 80006c4:	b085      	sub	sp, #20
 80006c6:	af00      	add	r7, sp, #0
 80006c8:	60f8      	str	r0, [r7, #12]
 80006ca:	60b9      	str	r1, [r7, #8]
 80006cc:	607a      	str	r2, [r7, #4]
	return 0;
 80006ce:	2300      	movs	r3, #0
}
 80006d0:	4618      	mov	r0, r3
 80006d2:	3714      	adds	r7, #20
 80006d4:	46bd      	mov	sp, r7
 80006d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006da:	4770      	bx	lr

080006dc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80006dc:	b580      	push	{r7, lr}
 80006de:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80006e0:	f000 fc5e 	bl	8000fa0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80006e4:	f000 f89c 	bl	8000820 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80006e8:	f000 fa08 	bl	8000afc <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80006ec:	f000 f9dc 	bl	8000aa8 <MX_USART2_UART_Init>
  MX_TIM1_Init();
 80006f0:	f000 f930 	bl	8000954 <MX_TIM1_Init>
  MX_I2C1_Init();
 80006f4:	f000 f900 	bl	80008f8 <MX_I2C1_Init>
  MX_USART1_UART_Init();
 80006f8:	f000 f9ac 	bl	8000a54 <MX_USART1_UART_Init>
  HAL_Delay(1000);
 80006fc:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000700:	f000 fcc0 	bl	8001084 <HAL_Delay>
	//read
//	HAL_I2C_Master_Transmit(&hi2c1, 0xA7, &address, 1, 1000);
//	HAL_Delay(50);
//	HAL_I2C_Master_Receive(&hi2c1, 0xA7, data, 2, 1000);
//	HAL_Delay(50);
	readCliffDistance(CLIFF_I2C_REG_CH0);
 8000704:	2020      	movs	r0, #32
 8000706:	f000 fa89 	bl	8000c1c <readCliffDistance>
//	result = (uint16_t)(data[0]<<8) | data[1];
	result = (uint16_t)(data[1]<<8) | data[0];
 800070a:	4b3e      	ldr	r3, [pc, #248]	; (8000804 <main+0x128>)
 800070c:	785b      	ldrb	r3, [r3, #1]
 800070e:	b29b      	uxth	r3, r3
 8000710:	021b      	lsls	r3, r3, #8
 8000712:	b29a      	uxth	r2, r3
 8000714:	4b3b      	ldr	r3, [pc, #236]	; (8000804 <main+0x128>)
 8000716:	781b      	ldrb	r3, [r3, #0]
 8000718:	b29b      	uxth	r3, r3
 800071a:	4313      	orrs	r3, r2
 800071c:	b29a      	uxth	r2, r3
 800071e:	4b3a      	ldr	r3, [pc, #232]	; (8000808 <main+0x12c>)
 8000720:	801a      	strh	r2, [r3, #0]
	printf("CH0:%d ",result);
 8000722:	4b39      	ldr	r3, [pc, #228]	; (8000808 <main+0x12c>)
 8000724:	881b      	ldrh	r3, [r3, #0]
 8000726:	4619      	mov	r1, r3
 8000728:	4838      	ldr	r0, [pc, #224]	; (800080c <main+0x130>)
 800072a:	f003 fd21 	bl	8004170 <iprintf>
	HAL_Delay(100);
 800072e:	2064      	movs	r0, #100	; 0x64
 8000730:	f000 fca8 	bl	8001084 <HAL_Delay>

	readCliffDistance(CLIFF_I2C_REG_CH1);
 8000734:	2022      	movs	r0, #34	; 0x22
 8000736:	f000 fa71 	bl	8000c1c <readCliffDistance>
	result = (uint16_t)(data[0]<<8) | data[1];
 800073a:	4b32      	ldr	r3, [pc, #200]	; (8000804 <main+0x128>)
 800073c:	781b      	ldrb	r3, [r3, #0]
 800073e:	b29b      	uxth	r3, r3
 8000740:	021b      	lsls	r3, r3, #8
 8000742:	b29a      	uxth	r2, r3
 8000744:	4b2f      	ldr	r3, [pc, #188]	; (8000804 <main+0x128>)
 8000746:	785b      	ldrb	r3, [r3, #1]
 8000748:	b29b      	uxth	r3, r3
 800074a:	4313      	orrs	r3, r2
 800074c:	b29a      	uxth	r2, r3
 800074e:	4b2e      	ldr	r3, [pc, #184]	; (8000808 <main+0x12c>)
 8000750:	801a      	strh	r2, [r3, #0]
	printf("CH1:%d ",result);
 8000752:	4b2d      	ldr	r3, [pc, #180]	; (8000808 <main+0x12c>)
 8000754:	881b      	ldrh	r3, [r3, #0]
 8000756:	4619      	mov	r1, r3
 8000758:	482d      	ldr	r0, [pc, #180]	; (8000810 <main+0x134>)
 800075a:	f003 fd09 	bl	8004170 <iprintf>
	HAL_Delay(100);
 800075e:	2064      	movs	r0, #100	; 0x64
 8000760:	f000 fc90 	bl	8001084 <HAL_Delay>

	readCliffDistance(CLIFF_I2C_REG_CH2);
 8000764:	2024      	movs	r0, #36	; 0x24
 8000766:	f000 fa59 	bl	8000c1c <readCliffDistance>
	result = (uint16_t)(data[0]<<8) | data[1];
 800076a:	4b26      	ldr	r3, [pc, #152]	; (8000804 <main+0x128>)
 800076c:	781b      	ldrb	r3, [r3, #0]
 800076e:	b29b      	uxth	r3, r3
 8000770:	021b      	lsls	r3, r3, #8
 8000772:	b29a      	uxth	r2, r3
 8000774:	4b23      	ldr	r3, [pc, #140]	; (8000804 <main+0x128>)
 8000776:	785b      	ldrb	r3, [r3, #1]
 8000778:	b29b      	uxth	r3, r3
 800077a:	4313      	orrs	r3, r2
 800077c:	b29a      	uxth	r2, r3
 800077e:	4b22      	ldr	r3, [pc, #136]	; (8000808 <main+0x12c>)
 8000780:	801a      	strh	r2, [r3, #0]
	printf("CH2:%d ",result);
 8000782:	4b21      	ldr	r3, [pc, #132]	; (8000808 <main+0x12c>)
 8000784:	881b      	ldrh	r3, [r3, #0]
 8000786:	4619      	mov	r1, r3
 8000788:	4822      	ldr	r0, [pc, #136]	; (8000814 <main+0x138>)
 800078a:	f003 fcf1 	bl	8004170 <iprintf>
	HAL_Delay(100);
 800078e:	2064      	movs	r0, #100	; 0x64
 8000790:	f000 fc78 	bl	8001084 <HAL_Delay>

	readCliffDistance(CLIFF_I2C_REG_CH3);
 8000794:	2026      	movs	r0, #38	; 0x26
 8000796:	f000 fa41 	bl	8000c1c <readCliffDistance>
	result = (uint16_t)(data[0]<<8) | data[1];
 800079a:	4b1a      	ldr	r3, [pc, #104]	; (8000804 <main+0x128>)
 800079c:	781b      	ldrb	r3, [r3, #0]
 800079e:	b29b      	uxth	r3, r3
 80007a0:	021b      	lsls	r3, r3, #8
 80007a2:	b29a      	uxth	r2, r3
 80007a4:	4b17      	ldr	r3, [pc, #92]	; (8000804 <main+0x128>)
 80007a6:	785b      	ldrb	r3, [r3, #1]
 80007a8:	b29b      	uxth	r3, r3
 80007aa:	4313      	orrs	r3, r2
 80007ac:	b29a      	uxth	r2, r3
 80007ae:	4b16      	ldr	r3, [pc, #88]	; (8000808 <main+0x12c>)
 80007b0:	801a      	strh	r2, [r3, #0]
	printf("CH3:%d ",result);
 80007b2:	4b15      	ldr	r3, [pc, #84]	; (8000808 <main+0x12c>)
 80007b4:	881b      	ldrh	r3, [r3, #0]
 80007b6:	4619      	mov	r1, r3
 80007b8:	4817      	ldr	r0, [pc, #92]	; (8000818 <main+0x13c>)
 80007ba:	f003 fcd9 	bl	8004170 <iprintf>
	HAL_Delay(100);
 80007be:	2064      	movs	r0, #100	; 0x64
 80007c0:	f000 fc60 	bl	8001084 <HAL_Delay>

	readCliffDistance(CLIFF_I2C_REG_CH4);
 80007c4:	2028      	movs	r0, #40	; 0x28
 80007c6:	f000 fa29 	bl	8000c1c <readCliffDistance>
	HAL_Delay(100);
 80007ca:	2064      	movs	r0, #100	; 0x64
 80007cc:	f000 fc5a 	bl	8001084 <HAL_Delay>
	readCliffDistance(CLIFF_I2C_REG_CH5);
 80007d0:	202a      	movs	r0, #42	; 0x2a
 80007d2:	f000 fa23 	bl	8000c1c <readCliffDistance>
	HAL_Delay(100);
 80007d6:	2064      	movs	r0, #100	; 0x64
 80007d8:	f000 fc54 	bl	8001084 <HAL_Delay>
	readCliffDistance(CLIFF_I2C_REG_CH6);
 80007dc:	202c      	movs	r0, #44	; 0x2c
 80007de:	f000 fa1d 	bl	8000c1c <readCliffDistance>
	HAL_Delay(100);
 80007e2:	2064      	movs	r0, #100	; 0x64
 80007e4:	f000 fc4e 	bl	8001084 <HAL_Delay>
	readCliffDistance(CLIFF_I2C_REG_CH7);
 80007e8:	202e      	movs	r0, #46	; 0x2e
 80007ea:	f000 fa17 	bl	8000c1c <readCliffDistance>
	HAL_Delay(100);
 80007ee:	2064      	movs	r0, #100	; 0x64
 80007f0:	f000 fc48 	bl	8001084 <HAL_Delay>
	printf("\n");
 80007f4:	200a      	movs	r0, #10
 80007f6:	f003 fcd3 	bl	80041a0 <putchar>
	printf("end of while(1)\n");
 80007fa:	4808      	ldr	r0, [pc, #32]	; (800081c <main+0x140>)
 80007fc:	f003 fd40 	bl	8004280 <puts>
	readCliffDistance(CLIFF_I2C_REG_CH0);
 8000800:	e780      	b.n	8000704 <main+0x28>
 8000802:	bf00      	nop
 8000804:	2000012c 	.word	0x2000012c
 8000808:	2000016c 	.word	0x2000016c
 800080c:	080050d4 	.word	0x080050d4
 8000810:	080050dc 	.word	0x080050dc
 8000814:	080050e4 	.word	0x080050e4
 8000818:	080050ec 	.word	0x080050ec
 800081c:	080050f4 	.word	0x080050f4

08000820 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000820:	b580      	push	{r7, lr}
 8000822:	b094      	sub	sp, #80	; 0x50
 8000824:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000826:	f107 0320 	add.w	r3, r7, #32
 800082a:	2230      	movs	r2, #48	; 0x30
 800082c:	2100      	movs	r1, #0
 800082e:	4618      	mov	r0, r3
 8000830:	f003 fc96 	bl	8004160 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000834:	f107 030c 	add.w	r3, r7, #12
 8000838:	2200      	movs	r2, #0
 800083a:	601a      	str	r2, [r3, #0]
 800083c:	605a      	str	r2, [r3, #4]
 800083e:	609a      	str	r2, [r3, #8]
 8000840:	60da      	str	r2, [r3, #12]
 8000842:	611a      	str	r2, [r3, #16]

  /**Configure the main internal regulator output voltage 
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000844:	2300      	movs	r3, #0
 8000846:	60bb      	str	r3, [r7, #8]
 8000848:	4a29      	ldr	r2, [pc, #164]	; (80008f0 <SystemClock_Config+0xd0>)
 800084a:	4b29      	ldr	r3, [pc, #164]	; (80008f0 <SystemClock_Config+0xd0>)
 800084c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800084e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000852:	6413      	str	r3, [r2, #64]	; 0x40
 8000854:	4b26      	ldr	r3, [pc, #152]	; (80008f0 <SystemClock_Config+0xd0>)
 8000856:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000858:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800085c:	60bb      	str	r3, [r7, #8]
 800085e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8000860:	2300      	movs	r3, #0
 8000862:	607b      	str	r3, [r7, #4]
 8000864:	4a23      	ldr	r2, [pc, #140]	; (80008f4 <SystemClock_Config+0xd4>)
 8000866:	4b23      	ldr	r3, [pc, #140]	; (80008f4 <SystemClock_Config+0xd4>)
 8000868:	681b      	ldr	r3, [r3, #0]
 800086a:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 800086e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000872:	6013      	str	r3, [r2, #0]
 8000874:	4b1f      	ldr	r3, [pc, #124]	; (80008f4 <SystemClock_Config+0xd4>)
 8000876:	681b      	ldr	r3, [r3, #0]
 8000878:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800087c:	607b      	str	r3, [r7, #4]
 800087e:	687b      	ldr	r3, [r7, #4]
  /**Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000880:	2302      	movs	r3, #2
 8000882:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000884:	2301      	movs	r3, #1
 8000886:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000888:	2310      	movs	r3, #16
 800088a:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800088c:	2302      	movs	r3, #2
 800088e:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000890:	2300      	movs	r3, #0
 8000892:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 16;
 8000894:	2310      	movs	r3, #16
 8000896:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8000898:	f44f 73a8 	mov.w	r3, #336	; 0x150
 800089c:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 800089e:	2304      	movs	r3, #4
 80008a0:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 80008a2:	2307      	movs	r3, #7
 80008a4:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80008a6:	f107 0320 	add.w	r3, r7, #32
 80008aa:	4618      	mov	r0, r3
 80008ac:	f001 fdec 	bl	8002488 <HAL_RCC_OscConfig>
 80008b0:	4603      	mov	r3, r0
 80008b2:	2b00      	cmp	r3, #0
 80008b4:	d001      	beq.n	80008ba <SystemClock_Config+0x9a>
  {
    Error_Handler();
 80008b6:	f000 f9d7 	bl	8000c68 <Error_Handler>
  }
  /**Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80008ba:	230f      	movs	r3, #15
 80008bc:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80008be:	2302      	movs	r3, #2
 80008c0:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80008c2:	2300      	movs	r3, #0
 80008c4:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80008c6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80008ca:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80008cc:	2300      	movs	r3, #0
 80008ce:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80008d0:	f107 030c 	add.w	r3, r7, #12
 80008d4:	2102      	movs	r1, #2
 80008d6:	4618      	mov	r0, r3
 80008d8:	f002 f818 	bl	800290c <HAL_RCC_ClockConfig>
 80008dc:	4603      	mov	r3, r0
 80008de:	2b00      	cmp	r3, #0
 80008e0:	d001      	beq.n	80008e6 <SystemClock_Config+0xc6>
  {
    Error_Handler();
 80008e2:	f000 f9c1 	bl	8000c68 <Error_Handler>
  }
}
 80008e6:	bf00      	nop
 80008e8:	3750      	adds	r7, #80	; 0x50
 80008ea:	46bd      	mov	sp, r7
 80008ec:	bd80      	pop	{r7, pc}
 80008ee:	bf00      	nop
 80008f0:	40023800 	.word	0x40023800
 80008f4:	40007000 	.word	0x40007000

080008f8 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80008f8:	b580      	push	{r7, lr}
 80008fa:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80008fc:	4b12      	ldr	r3, [pc, #72]	; (8000948 <MX_I2C1_Init+0x50>)
 80008fe:	4a13      	ldr	r2, [pc, #76]	; (800094c <MX_I2C1_Init+0x54>)
 8000900:	601a      	str	r2, [r3, #0]
  //hi2c1.Init.ClockSpeed = 400000;
  hi2c1.Init.ClockSpeed = 100000;
 8000902:	4b11      	ldr	r3, [pc, #68]	; (8000948 <MX_I2C1_Init+0x50>)
 8000904:	4a12      	ldr	r2, [pc, #72]	; (8000950 <MX_I2C1_Init+0x58>)
 8000906:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000908:	4b0f      	ldr	r3, [pc, #60]	; (8000948 <MX_I2C1_Init+0x50>)
 800090a:	2200      	movs	r2, #0
 800090c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800090e:	4b0e      	ldr	r3, [pc, #56]	; (8000948 <MX_I2C1_Init+0x50>)
 8000910:	2200      	movs	r2, #0
 8000912:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000914:	4b0c      	ldr	r3, [pc, #48]	; (8000948 <MX_I2C1_Init+0x50>)
 8000916:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800091a:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800091c:	4b0a      	ldr	r3, [pc, #40]	; (8000948 <MX_I2C1_Init+0x50>)
 800091e:	2200      	movs	r2, #0
 8000920:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000922:	4b09      	ldr	r3, [pc, #36]	; (8000948 <MX_I2C1_Init+0x50>)
 8000924:	2200      	movs	r2, #0
 8000926:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000928:	4b07      	ldr	r3, [pc, #28]	; (8000948 <MX_I2C1_Init+0x50>)
 800092a:	2200      	movs	r2, #0
 800092c:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800092e:	4b06      	ldr	r3, [pc, #24]	; (8000948 <MX_I2C1_Init+0x50>)
 8000930:	2200      	movs	r2, #0
 8000932:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000934:	4804      	ldr	r0, [pc, #16]	; (8000948 <MX_I2C1_Init+0x50>)
 8000936:	f000 fe91 	bl	800165c <HAL_I2C_Init>
 800093a:	4603      	mov	r3, r0
 800093c:	2b00      	cmp	r3, #0
 800093e:	d001      	beq.n	8000944 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000940:	f000 f992 	bl	8000c68 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000944:	bf00      	nop
 8000946:	bd80      	pop	{r7, pc}
 8000948:	20000098 	.word	0x20000098
 800094c:	40005400 	.word	0x40005400
 8000950:	000186a0 	.word	0x000186a0

08000954 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000954:	b580      	push	{r7, lr}
 8000956:	b090      	sub	sp, #64	; 0x40
 8000958:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800095a:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800095e:	2200      	movs	r2, #0
 8000960:	601a      	str	r2, [r3, #0]
 8000962:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000964:	f107 031c 	add.w	r3, r7, #28
 8000968:	2200      	movs	r2, #0
 800096a:	601a      	str	r2, [r3, #0]
 800096c:	605a      	str	r2, [r3, #4]
 800096e:	609a      	str	r2, [r3, #8]
 8000970:	60da      	str	r2, [r3, #12]
 8000972:	611a      	str	r2, [r3, #16]
 8000974:	615a      	str	r2, [r3, #20]
 8000976:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000978:	463b      	mov	r3, r7
 800097a:	2200      	movs	r2, #0
 800097c:	601a      	str	r2, [r3, #0]
 800097e:	605a      	str	r2, [r3, #4]
 8000980:	609a      	str	r2, [r3, #8]
 8000982:	60da      	str	r2, [r3, #12]
 8000984:	611a      	str	r2, [r3, #16]
 8000986:	615a      	str	r2, [r3, #20]
 8000988:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 800098a:	4b30      	ldr	r3, [pc, #192]	; (8000a4c <MX_TIM1_Init+0xf8>)
 800098c:	4a30      	ldr	r2, [pc, #192]	; (8000a50 <MX_TIM1_Init+0xfc>)
 800098e:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8000990:	4b2e      	ldr	r3, [pc, #184]	; (8000a4c <MX_TIM1_Init+0xf8>)
 8000992:	2200      	movs	r2, #0
 8000994:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000996:	4b2d      	ldr	r3, [pc, #180]	; (8000a4c <MX_TIM1_Init+0xf8>)
 8000998:	2200      	movs	r2, #0
 800099a:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 0;
 800099c:	4b2b      	ldr	r3, [pc, #172]	; (8000a4c <MX_TIM1_Init+0xf8>)
 800099e:	2200      	movs	r2, #0
 80009a0:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80009a2:	4b2a      	ldr	r3, [pc, #168]	; (8000a4c <MX_TIM1_Init+0xf8>)
 80009a4:	2200      	movs	r2, #0
 80009a6:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80009a8:	4b28      	ldr	r3, [pc, #160]	; (8000a4c <MX_TIM1_Init+0xf8>)
 80009aa:	2200      	movs	r2, #0
 80009ac:	615a      	str	r2, [r3, #20]
  if (HAL_TIM_OC_Init(&htim1) != HAL_OK)
 80009ae:	4827      	ldr	r0, [pc, #156]	; (8000a4c <MX_TIM1_Init+0xf8>)
 80009b0:	f002 f99a 	bl	8002ce8 <HAL_TIM_OC_Init>
 80009b4:	4603      	mov	r3, r0
 80009b6:	2b00      	cmp	r3, #0
 80009b8:	d001      	beq.n	80009be <MX_TIM1_Init+0x6a>
  {
    Error_Handler();
 80009ba:	f000 f955 	bl	8000c68 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80009be:	2300      	movs	r3, #0
 80009c0:	63bb      	str	r3, [r7, #56]	; 0x38
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80009c2:	2300      	movs	r3, #0
 80009c4:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80009c6:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80009ca:	4619      	mov	r1, r3
 80009cc:	481f      	ldr	r0, [pc, #124]	; (8000a4c <MX_TIM1_Init+0xf8>)
 80009ce:	f002 fd6d 	bl	80034ac <HAL_TIMEx_MasterConfigSynchronization>
 80009d2:	4603      	mov	r3, r0
 80009d4:	2b00      	cmp	r3, #0
 80009d6:	d001      	beq.n	80009dc <MX_TIM1_Init+0x88>
  {
    Error_Handler();
 80009d8:	f000 f946 	bl	8000c68 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TIMING;
 80009dc:	2300      	movs	r3, #0
 80009de:	61fb      	str	r3, [r7, #28]
  sConfigOC.Pulse = 0;
 80009e0:	2300      	movs	r3, #0
 80009e2:	623b      	str	r3, [r7, #32]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80009e4:	2300      	movs	r3, #0
 80009e6:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80009e8:	2300      	movs	r3, #0
 80009ea:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80009ec:	2300      	movs	r3, #0
 80009ee:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80009f0:	2300      	movs	r3, #0
 80009f2:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80009f4:	2300      	movs	r3, #0
 80009f6:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_TIM_OC_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80009f8:	f107 031c 	add.w	r3, r7, #28
 80009fc:	2200      	movs	r2, #0
 80009fe:	4619      	mov	r1, r3
 8000a00:	4812      	ldr	r0, [pc, #72]	; (8000a4c <MX_TIM1_Init+0xf8>)
 8000a02:	f002 faa5 	bl	8002f50 <HAL_TIM_OC_ConfigChannel>
 8000a06:	4603      	mov	r3, r0
 8000a08:	2b00      	cmp	r3, #0
 8000a0a:	d001      	beq.n	8000a10 <MX_TIM1_Init+0xbc>
  {
    Error_Handler();
 8000a0c:	f000 f92c 	bl	8000c68 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000a10:	2300      	movs	r3, #0
 8000a12:	603b      	str	r3, [r7, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000a14:	2300      	movs	r3, #0
 8000a16:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000a18:	2300      	movs	r3, #0
 8000a1a:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000a1c:	2300      	movs	r3, #0
 8000a1e:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000a20:	2300      	movs	r3, #0
 8000a22:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000a24:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000a28:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000a2a:	2300      	movs	r3, #0
 8000a2c:	61bb      	str	r3, [r7, #24]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8000a2e:	463b      	mov	r3, r7
 8000a30:	4619      	mov	r1, r3
 8000a32:	4806      	ldr	r0, [pc, #24]	; (8000a4c <MX_TIM1_Init+0xf8>)
 8000a34:	f002 fd7f 	bl	8003536 <HAL_TIMEx_ConfigBreakDeadTime>
 8000a38:	4603      	mov	r3, r0
 8000a3a:	2b00      	cmp	r3, #0
 8000a3c:	d001      	beq.n	8000a42 <MX_TIM1_Init+0xee>
  {
    Error_Handler();
 8000a3e:	f000 f913 	bl	8000c68 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8000a42:	bf00      	nop
 8000a44:	3740      	adds	r7, #64	; 0x40
 8000a46:	46bd      	mov	sp, r7
 8000a48:	bd80      	pop	{r7, pc}
 8000a4a:	bf00      	nop
 8000a4c:	20000130 	.word	0x20000130
 8000a50:	40010000 	.word	0x40010000

08000a54 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000a54:	b580      	push	{r7, lr}
 8000a56:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000a58:	4b11      	ldr	r3, [pc, #68]	; (8000aa0 <MX_USART1_UART_Init+0x4c>)
 8000a5a:	4a12      	ldr	r2, [pc, #72]	; (8000aa4 <MX_USART1_UART_Init+0x50>)
 8000a5c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000a5e:	4b10      	ldr	r3, [pc, #64]	; (8000aa0 <MX_USART1_UART_Init+0x4c>)
 8000a60:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000a64:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000a66:	4b0e      	ldr	r3, [pc, #56]	; (8000aa0 <MX_USART1_UART_Init+0x4c>)
 8000a68:	2200      	movs	r2, #0
 8000a6a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000a6c:	4b0c      	ldr	r3, [pc, #48]	; (8000aa0 <MX_USART1_UART_Init+0x4c>)
 8000a6e:	2200      	movs	r2, #0
 8000a70:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000a72:	4b0b      	ldr	r3, [pc, #44]	; (8000aa0 <MX_USART1_UART_Init+0x4c>)
 8000a74:	2200      	movs	r2, #0
 8000a76:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000a78:	4b09      	ldr	r3, [pc, #36]	; (8000aa0 <MX_USART1_UART_Init+0x4c>)
 8000a7a:	220c      	movs	r2, #12
 8000a7c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000a7e:	4b08      	ldr	r3, [pc, #32]	; (8000aa0 <MX_USART1_UART_Init+0x4c>)
 8000a80:	2200      	movs	r2, #0
 8000a82:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000a84:	4b06      	ldr	r3, [pc, #24]	; (8000aa0 <MX_USART1_UART_Init+0x4c>)
 8000a86:	2200      	movs	r2, #0
 8000a88:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000a8a:	4805      	ldr	r0, [pc, #20]	; (8000aa0 <MX_USART1_UART_Init+0x4c>)
 8000a8c:	f002 fdc0 	bl	8003610 <HAL_UART_Init>
 8000a90:	4603      	mov	r3, r0
 8000a92:	2b00      	cmp	r3, #0
 8000a94:	d001      	beq.n	8000a9a <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8000a96:	f000 f8e7 	bl	8000c68 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000a9a:	bf00      	nop
 8000a9c:	bd80      	pop	{r7, pc}
 8000a9e:	bf00      	nop
 8000aa0:	200000ec 	.word	0x200000ec
 8000aa4:	40011000 	.word	0x40011000

08000aa8 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000aa8:	b580      	push	{r7, lr}
 8000aaa:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000aac:	4b11      	ldr	r3, [pc, #68]	; (8000af4 <MX_USART2_UART_Init+0x4c>)
 8000aae:	4a12      	ldr	r2, [pc, #72]	; (8000af8 <MX_USART2_UART_Init+0x50>)
 8000ab0:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000ab2:	4b10      	ldr	r3, [pc, #64]	; (8000af4 <MX_USART2_UART_Init+0x4c>)
 8000ab4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000ab8:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000aba:	4b0e      	ldr	r3, [pc, #56]	; (8000af4 <MX_USART2_UART_Init+0x4c>)
 8000abc:	2200      	movs	r2, #0
 8000abe:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000ac0:	4b0c      	ldr	r3, [pc, #48]	; (8000af4 <MX_USART2_UART_Init+0x4c>)
 8000ac2:	2200      	movs	r2, #0
 8000ac4:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000ac6:	4b0b      	ldr	r3, [pc, #44]	; (8000af4 <MX_USART2_UART_Init+0x4c>)
 8000ac8:	2200      	movs	r2, #0
 8000aca:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000acc:	4b09      	ldr	r3, [pc, #36]	; (8000af4 <MX_USART2_UART_Init+0x4c>)
 8000ace:	220c      	movs	r2, #12
 8000ad0:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000ad2:	4b08      	ldr	r3, [pc, #32]	; (8000af4 <MX_USART2_UART_Init+0x4c>)
 8000ad4:	2200      	movs	r2, #0
 8000ad6:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000ad8:	4b06      	ldr	r3, [pc, #24]	; (8000af4 <MX_USART2_UART_Init+0x4c>)
 8000ada:	2200      	movs	r2, #0
 8000adc:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000ade:	4805      	ldr	r0, [pc, #20]	; (8000af4 <MX_USART2_UART_Init+0x4c>)
 8000ae0:	f002 fd96 	bl	8003610 <HAL_UART_Init>
 8000ae4:	4603      	mov	r3, r0
 8000ae6:	2b00      	cmp	r3, #0
 8000ae8:	d001      	beq.n	8000aee <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000aea:	f000 f8bd 	bl	8000c68 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000aee:	bf00      	nop
 8000af0:	bd80      	pop	{r7, pc}
 8000af2:	bf00      	nop
 8000af4:	20000170 	.word	0x20000170
 8000af8:	40004400 	.word	0x40004400

08000afc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000afc:	b580      	push	{r7, lr}
 8000afe:	b08a      	sub	sp, #40	; 0x28
 8000b00:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b02:	f107 0314 	add.w	r3, r7, #20
 8000b06:	2200      	movs	r2, #0
 8000b08:	601a      	str	r2, [r3, #0]
 8000b0a:	605a      	str	r2, [r3, #4]
 8000b0c:	609a      	str	r2, [r3, #8]
 8000b0e:	60da      	str	r2, [r3, #12]
 8000b10:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000b12:	2300      	movs	r3, #0
 8000b14:	613b      	str	r3, [r7, #16]
 8000b16:	4a2d      	ldr	r2, [pc, #180]	; (8000bcc <MX_GPIO_Init+0xd0>)
 8000b18:	4b2c      	ldr	r3, [pc, #176]	; (8000bcc <MX_GPIO_Init+0xd0>)
 8000b1a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b1c:	f043 0304 	orr.w	r3, r3, #4
 8000b20:	6313      	str	r3, [r2, #48]	; 0x30
 8000b22:	4b2a      	ldr	r3, [pc, #168]	; (8000bcc <MX_GPIO_Init+0xd0>)
 8000b24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b26:	f003 0304 	and.w	r3, r3, #4
 8000b2a:	613b      	str	r3, [r7, #16]
 8000b2c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000b2e:	2300      	movs	r3, #0
 8000b30:	60fb      	str	r3, [r7, #12]
 8000b32:	4a26      	ldr	r2, [pc, #152]	; (8000bcc <MX_GPIO_Init+0xd0>)
 8000b34:	4b25      	ldr	r3, [pc, #148]	; (8000bcc <MX_GPIO_Init+0xd0>)
 8000b36:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b38:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000b3c:	6313      	str	r3, [r2, #48]	; 0x30
 8000b3e:	4b23      	ldr	r3, [pc, #140]	; (8000bcc <MX_GPIO_Init+0xd0>)
 8000b40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b42:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000b46:	60fb      	str	r3, [r7, #12]
 8000b48:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b4a:	2300      	movs	r3, #0
 8000b4c:	60bb      	str	r3, [r7, #8]
 8000b4e:	4a1f      	ldr	r2, [pc, #124]	; (8000bcc <MX_GPIO_Init+0xd0>)
 8000b50:	4b1e      	ldr	r3, [pc, #120]	; (8000bcc <MX_GPIO_Init+0xd0>)
 8000b52:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b54:	f043 0301 	orr.w	r3, r3, #1
 8000b58:	6313      	str	r3, [r2, #48]	; 0x30
 8000b5a:	4b1c      	ldr	r3, [pc, #112]	; (8000bcc <MX_GPIO_Init+0xd0>)
 8000b5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b5e:	f003 0301 	and.w	r3, r3, #1
 8000b62:	60bb      	str	r3, [r7, #8]
 8000b64:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b66:	2300      	movs	r3, #0
 8000b68:	607b      	str	r3, [r7, #4]
 8000b6a:	4a18      	ldr	r2, [pc, #96]	; (8000bcc <MX_GPIO_Init+0xd0>)
 8000b6c:	4b17      	ldr	r3, [pc, #92]	; (8000bcc <MX_GPIO_Init+0xd0>)
 8000b6e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b70:	f043 0302 	orr.w	r3, r3, #2
 8000b74:	6313      	str	r3, [r2, #48]	; 0x30
 8000b76:	4b15      	ldr	r3, [pc, #84]	; (8000bcc <MX_GPIO_Init+0xd0>)
 8000b78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b7a:	f003 0302 	and.w	r3, r3, #2
 8000b7e:	607b      	str	r3, [r7, #4]
 8000b80:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000b82:	2200      	movs	r2, #0
 8000b84:	2120      	movs	r1, #32
 8000b86:	4812      	ldr	r0, [pc, #72]	; (8000bd0 <MX_GPIO_Init+0xd4>)
 8000b88:	f000 fd4e 	bl	8001628 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000b8c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000b90:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000b92:	4b10      	ldr	r3, [pc, #64]	; (8000bd4 <MX_GPIO_Init+0xd8>)
 8000b94:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b96:	2300      	movs	r3, #0
 8000b98:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000b9a:	f107 0314 	add.w	r3, r7, #20
 8000b9e:	4619      	mov	r1, r3
 8000ba0:	480d      	ldr	r0, [pc, #52]	; (8000bd8 <MX_GPIO_Init+0xdc>)
 8000ba2:	f000 fbbf 	bl	8001324 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000ba6:	2320      	movs	r3, #32
 8000ba8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000baa:	2301      	movs	r3, #1
 8000bac:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bae:	2300      	movs	r3, #0
 8000bb0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bb2:	2300      	movs	r3, #0
 8000bb4:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000bb6:	f107 0314 	add.w	r3, r7, #20
 8000bba:	4619      	mov	r1, r3
 8000bbc:	4804      	ldr	r0, [pc, #16]	; (8000bd0 <MX_GPIO_Init+0xd4>)
 8000bbe:	f000 fbb1 	bl	8001324 <HAL_GPIO_Init>

}
 8000bc2:	bf00      	nop
 8000bc4:	3728      	adds	r7, #40	; 0x28
 8000bc6:	46bd      	mov	sp, r7
 8000bc8:	bd80      	pop	{r7, pc}
 8000bca:	bf00      	nop
 8000bcc:	40023800 	.word	0x40023800
 8000bd0:	40020000 	.word	0x40020000
 8000bd4:	10210000 	.word	0x10210000
 8000bd8:	40020800 	.word	0x40020800

08000bdc <_write>:

/* USER CODE BEGIN 4 */
int _write(int fd, char *str, int len)
{
 8000bdc:	b580      	push	{r7, lr}
 8000bde:	b086      	sub	sp, #24
 8000be0:	af00      	add	r7, sp, #0
 8000be2:	60f8      	str	r0, [r7, #12]
 8000be4:	60b9      	str	r1, [r7, #8]
 8000be6:	607a      	str	r2, [r7, #4]
	for(int i=0;i<len;i++)
 8000be8:	2300      	movs	r3, #0
 8000bea:	617b      	str	r3, [r7, #20]
 8000bec:	e00b      	b.n	8000c06 <_write+0x2a>
	{ //UART 1번에 데이터 전송
		HAL_UART_Transmit(&huart2, (uint8_t *)&str[i], 1, 0xFFFF);
 8000bee:	697b      	ldr	r3, [r7, #20]
 8000bf0:	68ba      	ldr	r2, [r7, #8]
 8000bf2:	18d1      	adds	r1, r2, r3
 8000bf4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000bf8:	2201      	movs	r2, #1
 8000bfa:	4807      	ldr	r0, [pc, #28]	; (8000c18 <_write+0x3c>)
 8000bfc:	f002 fd55 	bl	80036aa <HAL_UART_Transmit>
	for(int i=0;i<len;i++)
 8000c00:	697b      	ldr	r3, [r7, #20]
 8000c02:	3301      	adds	r3, #1
 8000c04:	617b      	str	r3, [r7, #20]
 8000c06:	697a      	ldr	r2, [r7, #20]
 8000c08:	687b      	ldr	r3, [r7, #4]
 8000c0a:	429a      	cmp	r2, r3
 8000c0c:	dbef      	blt.n	8000bee <_write+0x12>
	}
	return len;
 8000c0e:	687b      	ldr	r3, [r7, #4]
}
 8000c10:	4618      	mov	r0, r3
 8000c12:	3718      	adds	r7, #24
 8000c14:	46bd      	mov	sp, r7
 8000c16:	bd80      	pop	{r7, pc}
 8000c18:	20000170 	.word	0x20000170

08000c1c <readCliffDistance>:

void readCliffDistance(uint8_t reg_address)
{
 8000c1c:	b580      	push	{r7, lr}
 8000c1e:	b084      	sub	sp, #16
 8000c20:	af02      	add	r7, sp, #8
 8000c22:	4603      	mov	r3, r0
 8000c24:	71fb      	strb	r3, [r7, #7]
//	HAL_I2C_Master_Transmit(&hi2c1, 0xA6, &reg_address, 1, 1000);
//	HAL_Delay(50);
//	HAL_I2C_Master_Receive(&hi2c1, 0xA6, data, 2, 1000);
//	HAL_Delay(50);

	HAL_I2C_Master_Transmit(&hi2c1, 0xA6, &reg_address, 1, 1000);
 8000c26:	1dfa      	adds	r2, r7, #7
 8000c28:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000c2c:	9300      	str	r3, [sp, #0]
 8000c2e:	2301      	movs	r3, #1
 8000c30:	21a6      	movs	r1, #166	; 0xa6
 8000c32:	480b      	ldr	r0, [pc, #44]	; (8000c60 <readCliffDistance+0x44>)
 8000c34:	f000 fdf2 	bl	800181c <HAL_I2C_Master_Transmit>
	HAL_Delay(5);
 8000c38:	2005      	movs	r0, #5
 8000c3a:	f000 fa23 	bl	8001084 <HAL_Delay>
	HAL_I2C_Master_Receive(&hi2c1, 0xA6, data, 2, 1000);
 8000c3e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000c42:	9300      	str	r3, [sp, #0]
 8000c44:	2302      	movs	r3, #2
 8000c46:	4a07      	ldr	r2, [pc, #28]	; (8000c64 <readCliffDistance+0x48>)
 8000c48:	21a6      	movs	r1, #166	; 0xa6
 8000c4a:	4805      	ldr	r0, [pc, #20]	; (8000c60 <readCliffDistance+0x44>)
 8000c4c:	f000 fef4 	bl	8001a38 <HAL_I2C_Master_Receive>
	HAL_Delay(5);
 8000c50:	2005      	movs	r0, #5
 8000c52:	f000 fa17 	bl	8001084 <HAL_Delay>

}
 8000c56:	bf00      	nop
 8000c58:	3708      	adds	r7, #8
 8000c5a:	46bd      	mov	sp, r7
 8000c5c:	bd80      	pop	{r7, pc}
 8000c5e:	bf00      	nop
 8000c60:	20000098 	.word	0x20000098
 8000c64:	2000012c 	.word	0x2000012c

08000c68 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000c68:	b480      	push	{r7}
 8000c6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8000c6c:	bf00      	nop
 8000c6e:	46bd      	mov	sp, r7
 8000c70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c74:	4770      	bx	lr
	...

08000c78 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000c78:	b580      	push	{r7, lr}
 8000c7a:	b082      	sub	sp, #8
 8000c7c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000c7e:	2300      	movs	r3, #0
 8000c80:	607b      	str	r3, [r7, #4]
 8000c82:	4a10      	ldr	r2, [pc, #64]	; (8000cc4 <HAL_MspInit+0x4c>)
 8000c84:	4b0f      	ldr	r3, [pc, #60]	; (8000cc4 <HAL_MspInit+0x4c>)
 8000c86:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c88:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000c8c:	6453      	str	r3, [r2, #68]	; 0x44
 8000c8e:	4b0d      	ldr	r3, [pc, #52]	; (8000cc4 <HAL_MspInit+0x4c>)
 8000c90:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c92:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000c96:	607b      	str	r3, [r7, #4]
 8000c98:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000c9a:	2300      	movs	r3, #0
 8000c9c:	603b      	str	r3, [r7, #0]
 8000c9e:	4a09      	ldr	r2, [pc, #36]	; (8000cc4 <HAL_MspInit+0x4c>)
 8000ca0:	4b08      	ldr	r3, [pc, #32]	; (8000cc4 <HAL_MspInit+0x4c>)
 8000ca2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ca4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000ca8:	6413      	str	r3, [r2, #64]	; 0x40
 8000caa:	4b06      	ldr	r3, [pc, #24]	; (8000cc4 <HAL_MspInit+0x4c>)
 8000cac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000cae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000cb2:	603b      	str	r3, [r7, #0]
 8000cb4:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000cb6:	2007      	movs	r0, #7
 8000cb8:	f000 fad0 	bl	800125c <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000cbc:	bf00      	nop
 8000cbe:	3708      	adds	r7, #8
 8000cc0:	46bd      	mov	sp, r7
 8000cc2:	bd80      	pop	{r7, pc}
 8000cc4:	40023800 	.word	0x40023800

08000cc8 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000cc8:	b580      	push	{r7, lr}
 8000cca:	b08a      	sub	sp, #40	; 0x28
 8000ccc:	af00      	add	r7, sp, #0
 8000cce:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000cd0:	f107 0314 	add.w	r3, r7, #20
 8000cd4:	2200      	movs	r2, #0
 8000cd6:	601a      	str	r2, [r3, #0]
 8000cd8:	605a      	str	r2, [r3, #4]
 8000cda:	609a      	str	r2, [r3, #8]
 8000cdc:	60da      	str	r2, [r3, #12]
 8000cde:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8000ce0:	687b      	ldr	r3, [r7, #4]
 8000ce2:	681b      	ldr	r3, [r3, #0]
 8000ce4:	4a19      	ldr	r2, [pc, #100]	; (8000d4c <HAL_I2C_MspInit+0x84>)
 8000ce6:	4293      	cmp	r3, r2
 8000ce8:	d12c      	bne.n	8000d44 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000cea:	2300      	movs	r3, #0
 8000cec:	613b      	str	r3, [r7, #16]
 8000cee:	4a18      	ldr	r2, [pc, #96]	; (8000d50 <HAL_I2C_MspInit+0x88>)
 8000cf0:	4b17      	ldr	r3, [pc, #92]	; (8000d50 <HAL_I2C_MspInit+0x88>)
 8000cf2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cf4:	f043 0302 	orr.w	r3, r3, #2
 8000cf8:	6313      	str	r3, [r2, #48]	; 0x30
 8000cfa:	4b15      	ldr	r3, [pc, #84]	; (8000d50 <HAL_I2C_MspInit+0x88>)
 8000cfc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cfe:	f003 0302 	and.w	r3, r3, #2
 8000d02:	613b      	str	r3, [r7, #16]
 8000d04:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration    
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8000d06:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000d0a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000d0c:	2312      	movs	r3, #18
 8000d0e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000d10:	2301      	movs	r3, #1
 8000d12:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d14:	2303      	movs	r3, #3
 8000d16:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000d18:	2304      	movs	r3, #4
 8000d1a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000d1c:	f107 0314 	add.w	r3, r7, #20
 8000d20:	4619      	mov	r1, r3
 8000d22:	480c      	ldr	r0, [pc, #48]	; (8000d54 <HAL_I2C_MspInit+0x8c>)
 8000d24:	f000 fafe 	bl	8001324 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000d28:	2300      	movs	r3, #0
 8000d2a:	60fb      	str	r3, [r7, #12]
 8000d2c:	4a08      	ldr	r2, [pc, #32]	; (8000d50 <HAL_I2C_MspInit+0x88>)
 8000d2e:	4b08      	ldr	r3, [pc, #32]	; (8000d50 <HAL_I2C_MspInit+0x88>)
 8000d30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d32:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000d36:	6413      	str	r3, [r2, #64]	; 0x40
 8000d38:	4b05      	ldr	r3, [pc, #20]	; (8000d50 <HAL_I2C_MspInit+0x88>)
 8000d3a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d3c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000d40:	60fb      	str	r3, [r7, #12]
 8000d42:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8000d44:	bf00      	nop
 8000d46:	3728      	adds	r7, #40	; 0x28
 8000d48:	46bd      	mov	sp, r7
 8000d4a:	bd80      	pop	{r7, pc}
 8000d4c:	40005400 	.word	0x40005400
 8000d50:	40023800 	.word	0x40023800
 8000d54:	40020400 	.word	0x40020400

08000d58 <HAL_TIM_OC_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_oc: TIM_OC handle pointer
* @retval None
*/
void HAL_TIM_OC_MspInit(TIM_HandleTypeDef* htim_oc)
{
 8000d58:	b580      	push	{r7, lr}
 8000d5a:	b084      	sub	sp, #16
 8000d5c:	af00      	add	r7, sp, #0
 8000d5e:	6078      	str	r0, [r7, #4]

  if(htim_oc->Instance==TIM1)
 8000d60:	687b      	ldr	r3, [r7, #4]
 8000d62:	681b      	ldr	r3, [r3, #0]
 8000d64:	4a0e      	ldr	r2, [pc, #56]	; (8000da0 <HAL_TIM_OC_MspInit+0x48>)
 8000d66:	4293      	cmp	r3, r2
 8000d68:	d115      	bne.n	8000d96 <HAL_TIM_OC_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000d6a:	2300      	movs	r3, #0
 8000d6c:	60fb      	str	r3, [r7, #12]
 8000d6e:	4a0d      	ldr	r2, [pc, #52]	; (8000da4 <HAL_TIM_OC_MspInit+0x4c>)
 8000d70:	4b0c      	ldr	r3, [pc, #48]	; (8000da4 <HAL_TIM_OC_MspInit+0x4c>)
 8000d72:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d74:	f043 0301 	orr.w	r3, r3, #1
 8000d78:	6453      	str	r3, [r2, #68]	; 0x44
 8000d7a:	4b0a      	ldr	r3, [pc, #40]	; (8000da4 <HAL_TIM_OC_MspInit+0x4c>)
 8000d7c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d7e:	f003 0301 	and.w	r3, r3, #1
 8000d82:	60fb      	str	r3, [r7, #12]
 8000d84:	68fb      	ldr	r3, [r7, #12]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_CC_IRQn, 0, 0);
 8000d86:	2200      	movs	r2, #0
 8000d88:	2100      	movs	r1, #0
 8000d8a:	201b      	movs	r0, #27
 8000d8c:	f000 fa71 	bl	8001272 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_CC_IRQn);
 8000d90:	201b      	movs	r0, #27
 8000d92:	f000 fa8a 	bl	80012aa <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8000d96:	bf00      	nop
 8000d98:	3710      	adds	r7, #16
 8000d9a:	46bd      	mov	sp, r7
 8000d9c:	bd80      	pop	{r7, pc}
 8000d9e:	bf00      	nop
 8000da0:	40010000 	.word	0x40010000
 8000da4:	40023800 	.word	0x40023800

08000da8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000da8:	b580      	push	{r7, lr}
 8000daa:	b08c      	sub	sp, #48	; 0x30
 8000dac:	af00      	add	r7, sp, #0
 8000dae:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000db0:	f107 031c 	add.w	r3, r7, #28
 8000db4:	2200      	movs	r2, #0
 8000db6:	601a      	str	r2, [r3, #0]
 8000db8:	605a      	str	r2, [r3, #4]
 8000dba:	609a      	str	r2, [r3, #8]
 8000dbc:	60da      	str	r2, [r3, #12]
 8000dbe:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8000dc0:	687b      	ldr	r3, [r7, #4]
 8000dc2:	681b      	ldr	r3, [r3, #0]
 8000dc4:	4a36      	ldr	r2, [pc, #216]	; (8000ea0 <HAL_UART_MspInit+0xf8>)
 8000dc6:	4293      	cmp	r3, r2
 8000dc8:	d135      	bne.n	8000e36 <HAL_UART_MspInit+0x8e>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000dca:	2300      	movs	r3, #0
 8000dcc:	61bb      	str	r3, [r7, #24]
 8000dce:	4a35      	ldr	r2, [pc, #212]	; (8000ea4 <HAL_UART_MspInit+0xfc>)
 8000dd0:	4b34      	ldr	r3, [pc, #208]	; (8000ea4 <HAL_UART_MspInit+0xfc>)
 8000dd2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000dd4:	f043 0310 	orr.w	r3, r3, #16
 8000dd8:	6453      	str	r3, [r2, #68]	; 0x44
 8000dda:	4b32      	ldr	r3, [pc, #200]	; (8000ea4 <HAL_UART_MspInit+0xfc>)
 8000ddc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000dde:	f003 0310 	and.w	r3, r3, #16
 8000de2:	61bb      	str	r3, [r7, #24]
 8000de4:	69bb      	ldr	r3, [r7, #24]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000de6:	2300      	movs	r3, #0
 8000de8:	617b      	str	r3, [r7, #20]
 8000dea:	4a2e      	ldr	r2, [pc, #184]	; (8000ea4 <HAL_UART_MspInit+0xfc>)
 8000dec:	4b2d      	ldr	r3, [pc, #180]	; (8000ea4 <HAL_UART_MspInit+0xfc>)
 8000dee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000df0:	f043 0301 	orr.w	r3, r3, #1
 8000df4:	6313      	str	r3, [r2, #48]	; 0x30
 8000df6:	4b2b      	ldr	r3, [pc, #172]	; (8000ea4 <HAL_UART_MspInit+0xfc>)
 8000df8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dfa:	f003 0301 	and.w	r3, r3, #1
 8000dfe:	617b      	str	r3, [r7, #20]
 8000e00:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration    
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8000e02:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8000e06:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e08:	2302      	movs	r3, #2
 8000e0a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000e0c:	2301      	movs	r3, #1
 8000e0e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e10:	2303      	movs	r3, #3
 8000e12:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000e14:	2307      	movs	r3, #7
 8000e16:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e18:	f107 031c 	add.w	r3, r7, #28
 8000e1c:	4619      	mov	r1, r3
 8000e1e:	4822      	ldr	r0, [pc, #136]	; (8000ea8 <HAL_UART_MspInit+0x100>)
 8000e20:	f000 fa80 	bl	8001324 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8000e24:	2200      	movs	r2, #0
 8000e26:	2100      	movs	r1, #0
 8000e28:	2025      	movs	r0, #37	; 0x25
 8000e2a:	f000 fa22 	bl	8001272 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8000e2e:	2025      	movs	r0, #37	; 0x25
 8000e30:	f000 fa3b 	bl	80012aa <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000e34:	e030      	b.n	8000e98 <HAL_UART_MspInit+0xf0>
  else if(huart->Instance==USART2)
 8000e36:	687b      	ldr	r3, [r7, #4]
 8000e38:	681b      	ldr	r3, [r3, #0]
 8000e3a:	4a1c      	ldr	r2, [pc, #112]	; (8000eac <HAL_UART_MspInit+0x104>)
 8000e3c:	4293      	cmp	r3, r2
 8000e3e:	d12b      	bne.n	8000e98 <HAL_UART_MspInit+0xf0>
    __HAL_RCC_USART2_CLK_ENABLE();
 8000e40:	2300      	movs	r3, #0
 8000e42:	613b      	str	r3, [r7, #16]
 8000e44:	4a17      	ldr	r2, [pc, #92]	; (8000ea4 <HAL_UART_MspInit+0xfc>)
 8000e46:	4b17      	ldr	r3, [pc, #92]	; (8000ea4 <HAL_UART_MspInit+0xfc>)
 8000e48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e4a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000e4e:	6413      	str	r3, [r2, #64]	; 0x40
 8000e50:	4b14      	ldr	r3, [pc, #80]	; (8000ea4 <HAL_UART_MspInit+0xfc>)
 8000e52:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e54:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000e58:	613b      	str	r3, [r7, #16]
 8000e5a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e5c:	2300      	movs	r3, #0
 8000e5e:	60fb      	str	r3, [r7, #12]
 8000e60:	4a10      	ldr	r2, [pc, #64]	; (8000ea4 <HAL_UART_MspInit+0xfc>)
 8000e62:	4b10      	ldr	r3, [pc, #64]	; (8000ea4 <HAL_UART_MspInit+0xfc>)
 8000e64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e66:	f043 0301 	orr.w	r3, r3, #1
 8000e6a:	6313      	str	r3, [r2, #48]	; 0x30
 8000e6c:	4b0d      	ldr	r3, [pc, #52]	; (8000ea4 <HAL_UART_MspInit+0xfc>)
 8000e6e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e70:	f003 0301 	and.w	r3, r3, #1
 8000e74:	60fb      	str	r3, [r7, #12]
 8000e76:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000e78:	230c      	movs	r3, #12
 8000e7a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e7c:	2302      	movs	r3, #2
 8000e7e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e80:	2300      	movs	r3, #0
 8000e82:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e84:	2300      	movs	r3, #0
 8000e86:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000e88:	2307      	movs	r3, #7
 8000e8a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e8c:	f107 031c 	add.w	r3, r7, #28
 8000e90:	4619      	mov	r1, r3
 8000e92:	4805      	ldr	r0, [pc, #20]	; (8000ea8 <HAL_UART_MspInit+0x100>)
 8000e94:	f000 fa46 	bl	8001324 <HAL_GPIO_Init>
}
 8000e98:	bf00      	nop
 8000e9a:	3730      	adds	r7, #48	; 0x30
 8000e9c:	46bd      	mov	sp, r7
 8000e9e:	bd80      	pop	{r7, pc}
 8000ea0:	40011000 	.word	0x40011000
 8000ea4:	40023800 	.word	0x40023800
 8000ea8:	40020000 	.word	0x40020000
 8000eac:	40004400 	.word	0x40004400

08000eb0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000eb0:	b480      	push	{r7}
 8000eb2:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8000eb4:	bf00      	nop
 8000eb6:	46bd      	mov	sp, r7
 8000eb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ebc:	4770      	bx	lr

08000ebe <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000ebe:	b480      	push	{r7}
 8000ec0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000ec2:	e7fe      	b.n	8000ec2 <HardFault_Handler+0x4>

08000ec4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000ec4:	b480      	push	{r7}
 8000ec6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000ec8:	e7fe      	b.n	8000ec8 <MemManage_Handler+0x4>

08000eca <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000eca:	b480      	push	{r7}
 8000ecc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000ece:	e7fe      	b.n	8000ece <BusFault_Handler+0x4>

08000ed0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000ed0:	b480      	push	{r7}
 8000ed2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000ed4:	e7fe      	b.n	8000ed4 <UsageFault_Handler+0x4>

08000ed6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000ed6:	b480      	push	{r7}
 8000ed8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000eda:	bf00      	nop
 8000edc:	46bd      	mov	sp, r7
 8000ede:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ee2:	4770      	bx	lr

08000ee4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000ee4:	b480      	push	{r7}
 8000ee6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000ee8:	bf00      	nop
 8000eea:	46bd      	mov	sp, r7
 8000eec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ef0:	4770      	bx	lr

08000ef2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000ef2:	b480      	push	{r7}
 8000ef4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000ef6:	bf00      	nop
 8000ef8:	46bd      	mov	sp, r7
 8000efa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000efe:	4770      	bx	lr

08000f00 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000f00:	b580      	push	{r7, lr}
 8000f02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000f04:	f000 f89e 	bl	8001044 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000f08:	bf00      	nop
 8000f0a:	bd80      	pop	{r7, pc}

08000f0c <TIM1_CC_IRQHandler>:

/**
  * @brief This function handles TIM1 capture compare interrupt.
  */
void TIM1_CC_IRQHandler(void)
{
 8000f0c:	b580      	push	{r7, lr}
 8000f0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_CC_IRQn 0 */

  /* USER CODE END TIM1_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8000f10:	4802      	ldr	r0, [pc, #8]	; (8000f1c <TIM1_CC_IRQHandler+0x10>)
 8000f12:	f001 ff14 	bl	8002d3e <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_CC_IRQn 1 */

  /* USER CODE END TIM1_CC_IRQn 1 */
}
 8000f16:	bf00      	nop
 8000f18:	bd80      	pop	{r7, pc}
 8000f1a:	bf00      	nop
 8000f1c:	20000130 	.word	0x20000130

08000f20 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8000f20:	b580      	push	{r7, lr}
 8000f22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8000f24:	4802      	ldr	r0, [pc, #8]	; (8000f30 <USART1_IRQHandler+0x10>)
 8000f26:	f002 fc59 	bl	80037dc <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8000f2a:	bf00      	nop
 8000f2c:	bd80      	pop	{r7, pc}
 8000f2e:	bf00      	nop
 8000f30:	200000ec 	.word	0x200000ec

08000f34 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000f34:	b480      	push	{r7}
 8000f36:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000f38:	4a16      	ldr	r2, [pc, #88]	; (8000f94 <SystemInit+0x60>)
 8000f3a:	4b16      	ldr	r3, [pc, #88]	; (8000f94 <SystemInit+0x60>)
 8000f3c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000f40:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000f44:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8000f48:	4a13      	ldr	r2, [pc, #76]	; (8000f98 <SystemInit+0x64>)
 8000f4a:	4b13      	ldr	r3, [pc, #76]	; (8000f98 <SystemInit+0x64>)
 8000f4c:	681b      	ldr	r3, [r3, #0]
 8000f4e:	f043 0301 	orr.w	r3, r3, #1
 8000f52:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8000f54:	4b10      	ldr	r3, [pc, #64]	; (8000f98 <SystemInit+0x64>)
 8000f56:	2200      	movs	r2, #0
 8000f58:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 8000f5a:	4a0f      	ldr	r2, [pc, #60]	; (8000f98 <SystemInit+0x64>)
 8000f5c:	4b0e      	ldr	r3, [pc, #56]	; (8000f98 <SystemInit+0x64>)
 8000f5e:	681b      	ldr	r3, [r3, #0]
 8000f60:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 8000f64:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000f68:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 8000f6a:	4b0b      	ldr	r3, [pc, #44]	; (8000f98 <SystemInit+0x64>)
 8000f6c:	4a0b      	ldr	r2, [pc, #44]	; (8000f9c <SystemInit+0x68>)
 8000f6e:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8000f70:	4a09      	ldr	r2, [pc, #36]	; (8000f98 <SystemInit+0x64>)
 8000f72:	4b09      	ldr	r3, [pc, #36]	; (8000f98 <SystemInit+0x64>)
 8000f74:	681b      	ldr	r3, [r3, #0]
 8000f76:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000f7a:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 8000f7c:	4b06      	ldr	r3, [pc, #24]	; (8000f98 <SystemInit+0x64>)
 8000f7e:	2200      	movs	r2, #0
 8000f80:	60da      	str	r2, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000f82:	4b04      	ldr	r3, [pc, #16]	; (8000f94 <SystemInit+0x60>)
 8000f84:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000f88:	609a      	str	r2, [r3, #8]
#endif
}
 8000f8a:	bf00      	nop
 8000f8c:	46bd      	mov	sp, r7
 8000f8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f92:	4770      	bx	lr
 8000f94:	e000ed00 	.word	0xe000ed00
 8000f98:	40023800 	.word	0x40023800
 8000f9c:	24003010 	.word	0x24003010

08000fa0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000fa0:	b580      	push	{r7, lr}
 8000fa2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000fa4:	4a0e      	ldr	r2, [pc, #56]	; (8000fe0 <HAL_Init+0x40>)
 8000fa6:	4b0e      	ldr	r3, [pc, #56]	; (8000fe0 <HAL_Init+0x40>)
 8000fa8:	681b      	ldr	r3, [r3, #0]
 8000faa:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000fae:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000fb0:	4a0b      	ldr	r2, [pc, #44]	; (8000fe0 <HAL_Init+0x40>)
 8000fb2:	4b0b      	ldr	r3, [pc, #44]	; (8000fe0 <HAL_Init+0x40>)
 8000fb4:	681b      	ldr	r3, [r3, #0]
 8000fb6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000fba:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000fbc:	4a08      	ldr	r2, [pc, #32]	; (8000fe0 <HAL_Init+0x40>)
 8000fbe:	4b08      	ldr	r3, [pc, #32]	; (8000fe0 <HAL_Init+0x40>)
 8000fc0:	681b      	ldr	r3, [r3, #0]
 8000fc2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000fc6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000fc8:	2003      	movs	r0, #3
 8000fca:	f000 f947 	bl	800125c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000fce:	2000      	movs	r0, #0
 8000fd0:	f000 f808 	bl	8000fe4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000fd4:	f7ff fe50 	bl	8000c78 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000fd8:	2300      	movs	r3, #0
}
 8000fda:	4618      	mov	r0, r3
 8000fdc:	bd80      	pop	{r7, pc}
 8000fde:	bf00      	nop
 8000fe0:	40023c00 	.word	0x40023c00

08000fe4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000fe4:	b580      	push	{r7, lr}
 8000fe6:	b082      	sub	sp, #8
 8000fe8:	af00      	add	r7, sp, #0
 8000fea:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000fec:	4b12      	ldr	r3, [pc, #72]	; (8001038 <HAL_InitTick+0x54>)
 8000fee:	681a      	ldr	r2, [r3, #0]
 8000ff0:	4b12      	ldr	r3, [pc, #72]	; (800103c <HAL_InitTick+0x58>)
 8000ff2:	781b      	ldrb	r3, [r3, #0]
 8000ff4:	4619      	mov	r1, r3
 8000ff6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000ffa:	fbb3 f3f1 	udiv	r3, r3, r1
 8000ffe:	fbb2 f3f3 	udiv	r3, r2, r3
 8001002:	4618      	mov	r0, r3
 8001004:	f000 f95f 	bl	80012c6 <HAL_SYSTICK_Config>
 8001008:	4603      	mov	r3, r0
 800100a:	2b00      	cmp	r3, #0
 800100c:	d001      	beq.n	8001012 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800100e:	2301      	movs	r3, #1
 8001010:	e00e      	b.n	8001030 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001012:	687b      	ldr	r3, [r7, #4]
 8001014:	2b0f      	cmp	r3, #15
 8001016:	d80a      	bhi.n	800102e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001018:	2200      	movs	r2, #0
 800101a:	6879      	ldr	r1, [r7, #4]
 800101c:	f04f 30ff 	mov.w	r0, #4294967295
 8001020:	f000 f927 	bl	8001272 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001024:	4a06      	ldr	r2, [pc, #24]	; (8001040 <HAL_InitTick+0x5c>)
 8001026:	687b      	ldr	r3, [r7, #4]
 8001028:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800102a:	2300      	movs	r3, #0
 800102c:	e000      	b.n	8001030 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800102e:	2301      	movs	r3, #1
}
 8001030:	4618      	mov	r0, r3
 8001032:	3708      	adds	r7, #8
 8001034:	46bd      	mov	sp, r7
 8001036:	bd80      	pop	{r7, pc}
 8001038:	20000000 	.word	0x20000000
 800103c:	20000008 	.word	0x20000008
 8001040:	20000004 	.word	0x20000004

08001044 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001044:	b480      	push	{r7}
 8001046:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001048:	4b06      	ldr	r3, [pc, #24]	; (8001064 <HAL_IncTick+0x20>)
 800104a:	781b      	ldrb	r3, [r3, #0]
 800104c:	461a      	mov	r2, r3
 800104e:	4b06      	ldr	r3, [pc, #24]	; (8001068 <HAL_IncTick+0x24>)
 8001050:	681b      	ldr	r3, [r3, #0]
 8001052:	4413      	add	r3, r2
 8001054:	4a04      	ldr	r2, [pc, #16]	; (8001068 <HAL_IncTick+0x24>)
 8001056:	6013      	str	r3, [r2, #0]
}
 8001058:	bf00      	nop
 800105a:	46bd      	mov	sp, r7
 800105c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001060:	4770      	bx	lr
 8001062:	bf00      	nop
 8001064:	20000008 	.word	0x20000008
 8001068:	200001b0 	.word	0x200001b0

0800106c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800106c:	b480      	push	{r7}
 800106e:	af00      	add	r7, sp, #0
  return uwTick;
 8001070:	4b03      	ldr	r3, [pc, #12]	; (8001080 <HAL_GetTick+0x14>)
 8001072:	681b      	ldr	r3, [r3, #0]
}
 8001074:	4618      	mov	r0, r3
 8001076:	46bd      	mov	sp, r7
 8001078:	f85d 7b04 	ldr.w	r7, [sp], #4
 800107c:	4770      	bx	lr
 800107e:	bf00      	nop
 8001080:	200001b0 	.word	0x200001b0

08001084 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001084:	b580      	push	{r7, lr}
 8001086:	b084      	sub	sp, #16
 8001088:	af00      	add	r7, sp, #0
 800108a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800108c:	f7ff ffee 	bl	800106c <HAL_GetTick>
 8001090:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001092:	687b      	ldr	r3, [r7, #4]
 8001094:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001096:	68fb      	ldr	r3, [r7, #12]
 8001098:	f1b3 3fff 	cmp.w	r3, #4294967295
 800109c:	d005      	beq.n	80010aa <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800109e:	4b09      	ldr	r3, [pc, #36]	; (80010c4 <HAL_Delay+0x40>)
 80010a0:	781b      	ldrb	r3, [r3, #0]
 80010a2:	461a      	mov	r2, r3
 80010a4:	68fb      	ldr	r3, [r7, #12]
 80010a6:	4413      	add	r3, r2
 80010a8:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80010aa:	bf00      	nop
 80010ac:	f7ff ffde 	bl	800106c <HAL_GetTick>
 80010b0:	4602      	mov	r2, r0
 80010b2:	68bb      	ldr	r3, [r7, #8]
 80010b4:	1ad2      	subs	r2, r2, r3
 80010b6:	68fb      	ldr	r3, [r7, #12]
 80010b8:	429a      	cmp	r2, r3
 80010ba:	d3f7      	bcc.n	80010ac <HAL_Delay+0x28>
  {
  }
}
 80010bc:	bf00      	nop
 80010be:	3710      	adds	r7, #16
 80010c0:	46bd      	mov	sp, r7
 80010c2:	bd80      	pop	{r7, pc}
 80010c4:	20000008 	.word	0x20000008

080010c8 <NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80010c8:	b480      	push	{r7}
 80010ca:	b085      	sub	sp, #20
 80010cc:	af00      	add	r7, sp, #0
 80010ce:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80010d0:	687b      	ldr	r3, [r7, #4]
 80010d2:	f003 0307 	and.w	r3, r3, #7
 80010d6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80010d8:	4b0c      	ldr	r3, [pc, #48]	; (800110c <NVIC_SetPriorityGrouping+0x44>)
 80010da:	68db      	ldr	r3, [r3, #12]
 80010dc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80010de:	68ba      	ldr	r2, [r7, #8]
 80010e0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80010e4:	4013      	ands	r3, r2
 80010e6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
 80010e8:	68fb      	ldr	r3, [r7, #12]
 80010ea:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80010ec:	68bb      	ldr	r3, [r7, #8]
 80010ee:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80010f0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80010f4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80010f8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80010fa:	4a04      	ldr	r2, [pc, #16]	; (800110c <NVIC_SetPriorityGrouping+0x44>)
 80010fc:	68bb      	ldr	r3, [r7, #8]
 80010fe:	60d3      	str	r3, [r2, #12]
}
 8001100:	bf00      	nop
 8001102:	3714      	adds	r7, #20
 8001104:	46bd      	mov	sp, r7
 8001106:	f85d 7b04 	ldr.w	r7, [sp], #4
 800110a:	4770      	bx	lr
 800110c:	e000ed00 	.word	0xe000ed00

08001110 <NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t NVIC_GetPriorityGrouping(void)
{
 8001110:	b480      	push	{r7}
 8001112:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001114:	4b04      	ldr	r3, [pc, #16]	; (8001128 <NVIC_GetPriorityGrouping+0x18>)
 8001116:	68db      	ldr	r3, [r3, #12]
 8001118:	0a1b      	lsrs	r3, r3, #8
 800111a:	f003 0307 	and.w	r3, r3, #7
}
 800111e:	4618      	mov	r0, r3
 8001120:	46bd      	mov	sp, r7
 8001122:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001126:	4770      	bx	lr
 8001128:	e000ed00 	.word	0xe000ed00

0800112c <NVIC_EnableIRQ>:
  \brief   Enable External Interrupt
  \details Enables a device-specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800112c:	b480      	push	{r7}
 800112e:	b083      	sub	sp, #12
 8001130:	af00      	add	r7, sp, #0
 8001132:	4603      	mov	r3, r0
 8001134:	71fb      	strb	r3, [r7, #7]
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 8001136:	4909      	ldr	r1, [pc, #36]	; (800115c <NVIC_EnableIRQ+0x30>)
 8001138:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800113c:	095b      	lsrs	r3, r3, #5
 800113e:	79fa      	ldrb	r2, [r7, #7]
 8001140:	f002 021f 	and.w	r2, r2, #31
 8001144:	2001      	movs	r0, #1
 8001146:	fa00 f202 	lsl.w	r2, r0, r2
 800114a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 800114e:	bf00      	nop
 8001150:	370c      	adds	r7, #12
 8001152:	46bd      	mov	sp, r7
 8001154:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001158:	4770      	bx	lr
 800115a:	bf00      	nop
 800115c:	e000e100 	.word	0xe000e100

08001160 <NVIC_SetPriority>:
  \note    The priority cannot be set for every core interrupt.
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001160:	b480      	push	{r7}
 8001162:	b083      	sub	sp, #12
 8001164:	af00      	add	r7, sp, #0
 8001166:	4603      	mov	r3, r0
 8001168:	6039      	str	r1, [r7, #0]
 800116a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) < 0)
 800116c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001170:	2b00      	cmp	r3, #0
 8001172:	da0b      	bge.n	800118c <NVIC_SetPriority+0x2c>
  {
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001174:	490d      	ldr	r1, [pc, #52]	; (80011ac <NVIC_SetPriority+0x4c>)
 8001176:	79fb      	ldrb	r3, [r7, #7]
 8001178:	f003 030f 	and.w	r3, r3, #15
 800117c:	3b04      	subs	r3, #4
 800117e:	683a      	ldr	r2, [r7, #0]
 8001180:	b2d2      	uxtb	r2, r2
 8001182:	0112      	lsls	r2, r2, #4
 8001184:	b2d2      	uxtb	r2, r2
 8001186:	440b      	add	r3, r1
 8001188:	761a      	strb	r2, [r3, #24]
  }
  else
  {
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800118a:	e009      	b.n	80011a0 <NVIC_SetPriority+0x40>
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800118c:	4908      	ldr	r1, [pc, #32]	; (80011b0 <NVIC_SetPriority+0x50>)
 800118e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001192:	683a      	ldr	r2, [r7, #0]
 8001194:	b2d2      	uxtb	r2, r2
 8001196:	0112      	lsls	r2, r2, #4
 8001198:	b2d2      	uxtb	r2, r2
 800119a:	440b      	add	r3, r1
 800119c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 80011a0:	bf00      	nop
 80011a2:	370c      	adds	r7, #12
 80011a4:	46bd      	mov	sp, r7
 80011a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011aa:	4770      	bx	lr
 80011ac:	e000ed00 	.word	0xe000ed00
 80011b0:	e000e100 	.word	0xe000e100

080011b4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80011b4:	b480      	push	{r7}
 80011b6:	b089      	sub	sp, #36	; 0x24
 80011b8:	af00      	add	r7, sp, #0
 80011ba:	60f8      	str	r0, [r7, #12]
 80011bc:	60b9      	str	r1, [r7, #8]
 80011be:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80011c0:	68fb      	ldr	r3, [r7, #12]
 80011c2:	f003 0307 	and.w	r3, r3, #7
 80011c6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80011c8:	69fb      	ldr	r3, [r7, #28]
 80011ca:	f1c3 0307 	rsb	r3, r3, #7
 80011ce:	2b04      	cmp	r3, #4
 80011d0:	bf28      	it	cs
 80011d2:	2304      	movcs	r3, #4
 80011d4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80011d6:	69fb      	ldr	r3, [r7, #28]
 80011d8:	3304      	adds	r3, #4
 80011da:	2b06      	cmp	r3, #6
 80011dc:	d902      	bls.n	80011e4 <NVIC_EncodePriority+0x30>
 80011de:	69fb      	ldr	r3, [r7, #28]
 80011e0:	3b03      	subs	r3, #3
 80011e2:	e000      	b.n	80011e6 <NVIC_EncodePriority+0x32>
 80011e4:	2300      	movs	r3, #0
 80011e6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80011e8:	2201      	movs	r2, #1
 80011ea:	69bb      	ldr	r3, [r7, #24]
 80011ec:	fa02 f303 	lsl.w	r3, r2, r3
 80011f0:	1e5a      	subs	r2, r3, #1
 80011f2:	68bb      	ldr	r3, [r7, #8]
 80011f4:	401a      	ands	r2, r3
 80011f6:	697b      	ldr	r3, [r7, #20]
 80011f8:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80011fa:	2101      	movs	r1, #1
 80011fc:	697b      	ldr	r3, [r7, #20]
 80011fe:	fa01 f303 	lsl.w	r3, r1, r3
 8001202:	1e59      	subs	r1, r3, #1
 8001204:	687b      	ldr	r3, [r7, #4]
 8001206:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001208:	4313      	orrs	r3, r2
         );
}
 800120a:	4618      	mov	r0, r3
 800120c:	3724      	adds	r7, #36	; 0x24
 800120e:	46bd      	mov	sp, r7
 8001210:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001214:	4770      	bx	lr
	...

08001218 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001218:	b580      	push	{r7, lr}
 800121a:	b082      	sub	sp, #8
 800121c:	af00      	add	r7, sp, #0
 800121e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001220:	687b      	ldr	r3, [r7, #4]
 8001222:	3b01      	subs	r3, #1
 8001224:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001228:	d301      	bcc.n	800122e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800122a:	2301      	movs	r3, #1
 800122c:	e00f      	b.n	800124e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800122e:	4a0a      	ldr	r2, [pc, #40]	; (8001258 <SysTick_Config+0x40>)
 8001230:	687b      	ldr	r3, [r7, #4]
 8001232:	3b01      	subs	r3, #1
 8001234:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001236:	210f      	movs	r1, #15
 8001238:	f04f 30ff 	mov.w	r0, #4294967295
 800123c:	f7ff ff90 	bl	8001160 <NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001240:	4b05      	ldr	r3, [pc, #20]	; (8001258 <SysTick_Config+0x40>)
 8001242:	2200      	movs	r2, #0
 8001244:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001246:	4b04      	ldr	r3, [pc, #16]	; (8001258 <SysTick_Config+0x40>)
 8001248:	2207      	movs	r2, #7
 800124a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800124c:	2300      	movs	r3, #0
}
 800124e:	4618      	mov	r0, r3
 8001250:	3708      	adds	r7, #8
 8001252:	46bd      	mov	sp, r7
 8001254:	bd80      	pop	{r7, pc}
 8001256:	bf00      	nop
 8001258:	e000e010 	.word	0xe000e010

0800125c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800125c:	b580      	push	{r7, lr}
 800125e:	b082      	sub	sp, #8
 8001260:	af00      	add	r7, sp, #0
 8001262:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001264:	6878      	ldr	r0, [r7, #4]
 8001266:	f7ff ff2f 	bl	80010c8 <NVIC_SetPriorityGrouping>
}
 800126a:	bf00      	nop
 800126c:	3708      	adds	r7, #8
 800126e:	46bd      	mov	sp, r7
 8001270:	bd80      	pop	{r7, pc}

08001272 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001272:	b580      	push	{r7, lr}
 8001274:	b086      	sub	sp, #24
 8001276:	af00      	add	r7, sp, #0
 8001278:	4603      	mov	r3, r0
 800127a:	60b9      	str	r1, [r7, #8]
 800127c:	607a      	str	r2, [r7, #4]
 800127e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001280:	2300      	movs	r3, #0
 8001282:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001284:	f7ff ff44 	bl	8001110 <NVIC_GetPriorityGrouping>
 8001288:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800128a:	687a      	ldr	r2, [r7, #4]
 800128c:	68b9      	ldr	r1, [r7, #8]
 800128e:	6978      	ldr	r0, [r7, #20]
 8001290:	f7ff ff90 	bl	80011b4 <NVIC_EncodePriority>
 8001294:	4602      	mov	r2, r0
 8001296:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800129a:	4611      	mov	r1, r2
 800129c:	4618      	mov	r0, r3
 800129e:	f7ff ff5f 	bl	8001160 <NVIC_SetPriority>
}
 80012a2:	bf00      	nop
 80012a4:	3718      	adds	r7, #24
 80012a6:	46bd      	mov	sp, r7
 80012a8:	bd80      	pop	{r7, pc}

080012aa <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80012aa:	b580      	push	{r7, lr}
 80012ac:	b082      	sub	sp, #8
 80012ae:	af00      	add	r7, sp, #0
 80012b0:	4603      	mov	r3, r0
 80012b2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80012b4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012b8:	4618      	mov	r0, r3
 80012ba:	f7ff ff37 	bl	800112c <NVIC_EnableIRQ>
}
 80012be:	bf00      	nop
 80012c0:	3708      	adds	r7, #8
 80012c2:	46bd      	mov	sp, r7
 80012c4:	bd80      	pop	{r7, pc}

080012c6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80012c6:	b580      	push	{r7, lr}
 80012c8:	b082      	sub	sp, #8
 80012ca:	af00      	add	r7, sp, #0
 80012cc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80012ce:	6878      	ldr	r0, [r7, #4]
 80012d0:	f7ff ffa2 	bl	8001218 <SysTick_Config>
 80012d4:	4603      	mov	r3, r0
}
 80012d6:	4618      	mov	r0, r3
 80012d8:	3708      	adds	r7, #8
 80012da:	46bd      	mov	sp, r7
 80012dc:	bd80      	pop	{r7, pc}

080012de <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80012de:	b480      	push	{r7}
 80012e0:	b083      	sub	sp, #12
 80012e2:	af00      	add	r7, sp, #0
 80012e4:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80012e6:	687b      	ldr	r3, [r7, #4]
 80012e8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80012ec:	b2db      	uxtb	r3, r3
 80012ee:	2b02      	cmp	r3, #2
 80012f0:	d004      	beq.n	80012fc <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80012f2:	687b      	ldr	r3, [r7, #4]
 80012f4:	2280      	movs	r2, #128	; 0x80
 80012f6:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80012f8:	2301      	movs	r3, #1
 80012fa:	e00c      	b.n	8001316 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80012fc:	687b      	ldr	r3, [r7, #4]
 80012fe:	2205      	movs	r2, #5
 8001300:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001304:	687b      	ldr	r3, [r7, #4]
 8001306:	681b      	ldr	r3, [r3, #0]
 8001308:	687a      	ldr	r2, [r7, #4]
 800130a:	6812      	ldr	r2, [r2, #0]
 800130c:	6812      	ldr	r2, [r2, #0]
 800130e:	f022 0201 	bic.w	r2, r2, #1
 8001312:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8001314:	2300      	movs	r3, #0
}
 8001316:	4618      	mov	r0, r3
 8001318:	370c      	adds	r7, #12
 800131a:	46bd      	mov	sp, r7
 800131c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001320:	4770      	bx	lr
	...

08001324 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001324:	b480      	push	{r7}
 8001326:	b089      	sub	sp, #36	; 0x24
 8001328:	af00      	add	r7, sp, #0
 800132a:	6078      	str	r0, [r7, #4]
 800132c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800132e:	2300      	movs	r3, #0
 8001330:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001332:	2300      	movs	r3, #0
 8001334:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001336:	2300      	movs	r3, #0
 8001338:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800133a:	2300      	movs	r3, #0
 800133c:	61fb      	str	r3, [r7, #28]
 800133e:	e159      	b.n	80015f4 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001340:	2201      	movs	r2, #1
 8001342:	69fb      	ldr	r3, [r7, #28]
 8001344:	fa02 f303 	lsl.w	r3, r2, r3
 8001348:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800134a:	683b      	ldr	r3, [r7, #0]
 800134c:	681a      	ldr	r2, [r3, #0]
 800134e:	697b      	ldr	r3, [r7, #20]
 8001350:	4013      	ands	r3, r2
 8001352:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001354:	693a      	ldr	r2, [r7, #16]
 8001356:	697b      	ldr	r3, [r7, #20]
 8001358:	429a      	cmp	r2, r3
 800135a:	f040 8148 	bne.w	80015ee <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800135e:	683b      	ldr	r3, [r7, #0]
 8001360:	685b      	ldr	r3, [r3, #4]
 8001362:	2b02      	cmp	r3, #2
 8001364:	d003      	beq.n	800136e <HAL_GPIO_Init+0x4a>
 8001366:	683b      	ldr	r3, [r7, #0]
 8001368:	685b      	ldr	r3, [r3, #4]
 800136a:	2b12      	cmp	r3, #18
 800136c:	d123      	bne.n	80013b6 <HAL_GPIO_Init+0x92>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800136e:	69fb      	ldr	r3, [r7, #28]
 8001370:	08da      	lsrs	r2, r3, #3
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	3208      	adds	r2, #8
 8001376:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800137a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800137c:	69fb      	ldr	r3, [r7, #28]
 800137e:	f003 0307 	and.w	r3, r3, #7
 8001382:	009b      	lsls	r3, r3, #2
 8001384:	220f      	movs	r2, #15
 8001386:	fa02 f303 	lsl.w	r3, r2, r3
 800138a:	43db      	mvns	r3, r3
 800138c:	69ba      	ldr	r2, [r7, #24]
 800138e:	4013      	ands	r3, r2
 8001390:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001392:	683b      	ldr	r3, [r7, #0]
 8001394:	691a      	ldr	r2, [r3, #16]
 8001396:	69fb      	ldr	r3, [r7, #28]
 8001398:	f003 0307 	and.w	r3, r3, #7
 800139c:	009b      	lsls	r3, r3, #2
 800139e:	fa02 f303 	lsl.w	r3, r2, r3
 80013a2:	69ba      	ldr	r2, [r7, #24]
 80013a4:	4313      	orrs	r3, r2
 80013a6:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80013a8:	69fb      	ldr	r3, [r7, #28]
 80013aa:	08da      	lsrs	r2, r3, #3
 80013ac:	687b      	ldr	r3, [r7, #4]
 80013ae:	3208      	adds	r2, #8
 80013b0:	69b9      	ldr	r1, [r7, #24]
 80013b2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80013b6:	687b      	ldr	r3, [r7, #4]
 80013b8:	681b      	ldr	r3, [r3, #0]
 80013ba:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80013bc:	69fb      	ldr	r3, [r7, #28]
 80013be:	005b      	lsls	r3, r3, #1
 80013c0:	2203      	movs	r2, #3
 80013c2:	fa02 f303 	lsl.w	r3, r2, r3
 80013c6:	43db      	mvns	r3, r3
 80013c8:	69ba      	ldr	r2, [r7, #24]
 80013ca:	4013      	ands	r3, r2
 80013cc:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80013ce:	683b      	ldr	r3, [r7, #0]
 80013d0:	685b      	ldr	r3, [r3, #4]
 80013d2:	f003 0203 	and.w	r2, r3, #3
 80013d6:	69fb      	ldr	r3, [r7, #28]
 80013d8:	005b      	lsls	r3, r3, #1
 80013da:	fa02 f303 	lsl.w	r3, r2, r3
 80013de:	69ba      	ldr	r2, [r7, #24]
 80013e0:	4313      	orrs	r3, r2
 80013e2:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	69ba      	ldr	r2, [r7, #24]
 80013e8:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80013ea:	683b      	ldr	r3, [r7, #0]
 80013ec:	685b      	ldr	r3, [r3, #4]
 80013ee:	2b01      	cmp	r3, #1
 80013f0:	d00b      	beq.n	800140a <HAL_GPIO_Init+0xe6>
 80013f2:	683b      	ldr	r3, [r7, #0]
 80013f4:	685b      	ldr	r3, [r3, #4]
 80013f6:	2b02      	cmp	r3, #2
 80013f8:	d007      	beq.n	800140a <HAL_GPIO_Init+0xe6>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80013fa:	683b      	ldr	r3, [r7, #0]
 80013fc:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80013fe:	2b11      	cmp	r3, #17
 8001400:	d003      	beq.n	800140a <HAL_GPIO_Init+0xe6>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001402:	683b      	ldr	r3, [r7, #0]
 8001404:	685b      	ldr	r3, [r3, #4]
 8001406:	2b12      	cmp	r3, #18
 8001408:	d130      	bne.n	800146c <HAL_GPIO_Init+0x148>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800140a:	687b      	ldr	r3, [r7, #4]
 800140c:	689b      	ldr	r3, [r3, #8]
 800140e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001410:	69fb      	ldr	r3, [r7, #28]
 8001412:	005b      	lsls	r3, r3, #1
 8001414:	2203      	movs	r2, #3
 8001416:	fa02 f303 	lsl.w	r3, r2, r3
 800141a:	43db      	mvns	r3, r3
 800141c:	69ba      	ldr	r2, [r7, #24]
 800141e:	4013      	ands	r3, r2
 8001420:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001422:	683b      	ldr	r3, [r7, #0]
 8001424:	68da      	ldr	r2, [r3, #12]
 8001426:	69fb      	ldr	r3, [r7, #28]
 8001428:	005b      	lsls	r3, r3, #1
 800142a:	fa02 f303 	lsl.w	r3, r2, r3
 800142e:	69ba      	ldr	r2, [r7, #24]
 8001430:	4313      	orrs	r3, r2
 8001432:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001434:	687b      	ldr	r3, [r7, #4]
 8001436:	69ba      	ldr	r2, [r7, #24]
 8001438:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800143a:	687b      	ldr	r3, [r7, #4]
 800143c:	685b      	ldr	r3, [r3, #4]
 800143e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001440:	2201      	movs	r2, #1
 8001442:	69fb      	ldr	r3, [r7, #28]
 8001444:	fa02 f303 	lsl.w	r3, r2, r3
 8001448:	43db      	mvns	r3, r3
 800144a:	69ba      	ldr	r2, [r7, #24]
 800144c:	4013      	ands	r3, r2
 800144e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8001450:	683b      	ldr	r3, [r7, #0]
 8001452:	685b      	ldr	r3, [r3, #4]
 8001454:	091b      	lsrs	r3, r3, #4
 8001456:	f003 0201 	and.w	r2, r3, #1
 800145a:	69fb      	ldr	r3, [r7, #28]
 800145c:	fa02 f303 	lsl.w	r3, r2, r3
 8001460:	69ba      	ldr	r2, [r7, #24]
 8001462:	4313      	orrs	r3, r2
 8001464:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001466:	687b      	ldr	r3, [r7, #4]
 8001468:	69ba      	ldr	r2, [r7, #24]
 800146a:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800146c:	687b      	ldr	r3, [r7, #4]
 800146e:	68db      	ldr	r3, [r3, #12]
 8001470:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001472:	69fb      	ldr	r3, [r7, #28]
 8001474:	005b      	lsls	r3, r3, #1
 8001476:	2203      	movs	r2, #3
 8001478:	fa02 f303 	lsl.w	r3, r2, r3
 800147c:	43db      	mvns	r3, r3
 800147e:	69ba      	ldr	r2, [r7, #24]
 8001480:	4013      	ands	r3, r2
 8001482:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001484:	683b      	ldr	r3, [r7, #0]
 8001486:	689a      	ldr	r2, [r3, #8]
 8001488:	69fb      	ldr	r3, [r7, #28]
 800148a:	005b      	lsls	r3, r3, #1
 800148c:	fa02 f303 	lsl.w	r3, r2, r3
 8001490:	69ba      	ldr	r2, [r7, #24]
 8001492:	4313      	orrs	r3, r2
 8001494:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	69ba      	ldr	r2, [r7, #24]
 800149a:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800149c:	683b      	ldr	r3, [r7, #0]
 800149e:	685b      	ldr	r3, [r3, #4]
 80014a0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80014a4:	2b00      	cmp	r3, #0
 80014a6:	f000 80a2 	beq.w	80015ee <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80014aa:	2300      	movs	r3, #0
 80014ac:	60fb      	str	r3, [r7, #12]
 80014ae:	4a56      	ldr	r2, [pc, #344]	; (8001608 <HAL_GPIO_Init+0x2e4>)
 80014b0:	4b55      	ldr	r3, [pc, #340]	; (8001608 <HAL_GPIO_Init+0x2e4>)
 80014b2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80014b4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80014b8:	6453      	str	r3, [r2, #68]	; 0x44
 80014ba:	4b53      	ldr	r3, [pc, #332]	; (8001608 <HAL_GPIO_Init+0x2e4>)
 80014bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80014be:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80014c2:	60fb      	str	r3, [r7, #12]
 80014c4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80014c6:	4a51      	ldr	r2, [pc, #324]	; (800160c <HAL_GPIO_Init+0x2e8>)
 80014c8:	69fb      	ldr	r3, [r7, #28]
 80014ca:	089b      	lsrs	r3, r3, #2
 80014cc:	3302      	adds	r3, #2
 80014ce:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80014d2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80014d4:	69fb      	ldr	r3, [r7, #28]
 80014d6:	f003 0303 	and.w	r3, r3, #3
 80014da:	009b      	lsls	r3, r3, #2
 80014dc:	220f      	movs	r2, #15
 80014de:	fa02 f303 	lsl.w	r3, r2, r3
 80014e2:	43db      	mvns	r3, r3
 80014e4:	69ba      	ldr	r2, [r7, #24]
 80014e6:	4013      	ands	r3, r2
 80014e8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80014ea:	687b      	ldr	r3, [r7, #4]
 80014ec:	4a48      	ldr	r2, [pc, #288]	; (8001610 <HAL_GPIO_Init+0x2ec>)
 80014ee:	4293      	cmp	r3, r2
 80014f0:	d019      	beq.n	8001526 <HAL_GPIO_Init+0x202>
 80014f2:	687b      	ldr	r3, [r7, #4]
 80014f4:	4a47      	ldr	r2, [pc, #284]	; (8001614 <HAL_GPIO_Init+0x2f0>)
 80014f6:	4293      	cmp	r3, r2
 80014f8:	d013      	beq.n	8001522 <HAL_GPIO_Init+0x1fe>
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	4a46      	ldr	r2, [pc, #280]	; (8001618 <HAL_GPIO_Init+0x2f4>)
 80014fe:	4293      	cmp	r3, r2
 8001500:	d00d      	beq.n	800151e <HAL_GPIO_Init+0x1fa>
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	4a45      	ldr	r2, [pc, #276]	; (800161c <HAL_GPIO_Init+0x2f8>)
 8001506:	4293      	cmp	r3, r2
 8001508:	d007      	beq.n	800151a <HAL_GPIO_Init+0x1f6>
 800150a:	687b      	ldr	r3, [r7, #4]
 800150c:	4a44      	ldr	r2, [pc, #272]	; (8001620 <HAL_GPIO_Init+0x2fc>)
 800150e:	4293      	cmp	r3, r2
 8001510:	d101      	bne.n	8001516 <HAL_GPIO_Init+0x1f2>
 8001512:	2304      	movs	r3, #4
 8001514:	e008      	b.n	8001528 <HAL_GPIO_Init+0x204>
 8001516:	2307      	movs	r3, #7
 8001518:	e006      	b.n	8001528 <HAL_GPIO_Init+0x204>
 800151a:	2303      	movs	r3, #3
 800151c:	e004      	b.n	8001528 <HAL_GPIO_Init+0x204>
 800151e:	2302      	movs	r3, #2
 8001520:	e002      	b.n	8001528 <HAL_GPIO_Init+0x204>
 8001522:	2301      	movs	r3, #1
 8001524:	e000      	b.n	8001528 <HAL_GPIO_Init+0x204>
 8001526:	2300      	movs	r3, #0
 8001528:	69fa      	ldr	r2, [r7, #28]
 800152a:	f002 0203 	and.w	r2, r2, #3
 800152e:	0092      	lsls	r2, r2, #2
 8001530:	4093      	lsls	r3, r2
 8001532:	69ba      	ldr	r2, [r7, #24]
 8001534:	4313      	orrs	r3, r2
 8001536:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001538:	4934      	ldr	r1, [pc, #208]	; (800160c <HAL_GPIO_Init+0x2e8>)
 800153a:	69fb      	ldr	r3, [r7, #28]
 800153c:	089b      	lsrs	r3, r3, #2
 800153e:	3302      	adds	r3, #2
 8001540:	69ba      	ldr	r2, [r7, #24]
 8001542:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001546:	4b37      	ldr	r3, [pc, #220]	; (8001624 <HAL_GPIO_Init+0x300>)
 8001548:	681b      	ldr	r3, [r3, #0]
 800154a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800154c:	693b      	ldr	r3, [r7, #16]
 800154e:	43db      	mvns	r3, r3
 8001550:	69ba      	ldr	r2, [r7, #24]
 8001552:	4013      	ands	r3, r2
 8001554:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001556:	683b      	ldr	r3, [r7, #0]
 8001558:	685b      	ldr	r3, [r3, #4]
 800155a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800155e:	2b00      	cmp	r3, #0
 8001560:	d003      	beq.n	800156a <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8001562:	69ba      	ldr	r2, [r7, #24]
 8001564:	693b      	ldr	r3, [r7, #16]
 8001566:	4313      	orrs	r3, r2
 8001568:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800156a:	4a2e      	ldr	r2, [pc, #184]	; (8001624 <HAL_GPIO_Init+0x300>)
 800156c:	69bb      	ldr	r3, [r7, #24]
 800156e:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8001570:	4b2c      	ldr	r3, [pc, #176]	; (8001624 <HAL_GPIO_Init+0x300>)
 8001572:	685b      	ldr	r3, [r3, #4]
 8001574:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001576:	693b      	ldr	r3, [r7, #16]
 8001578:	43db      	mvns	r3, r3
 800157a:	69ba      	ldr	r2, [r7, #24]
 800157c:	4013      	ands	r3, r2
 800157e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001580:	683b      	ldr	r3, [r7, #0]
 8001582:	685b      	ldr	r3, [r3, #4]
 8001584:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001588:	2b00      	cmp	r3, #0
 800158a:	d003      	beq.n	8001594 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 800158c:	69ba      	ldr	r2, [r7, #24]
 800158e:	693b      	ldr	r3, [r7, #16]
 8001590:	4313      	orrs	r3, r2
 8001592:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001594:	4a23      	ldr	r2, [pc, #140]	; (8001624 <HAL_GPIO_Init+0x300>)
 8001596:	69bb      	ldr	r3, [r7, #24]
 8001598:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800159a:	4b22      	ldr	r3, [pc, #136]	; (8001624 <HAL_GPIO_Init+0x300>)
 800159c:	689b      	ldr	r3, [r3, #8]
 800159e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80015a0:	693b      	ldr	r3, [r7, #16]
 80015a2:	43db      	mvns	r3, r3
 80015a4:	69ba      	ldr	r2, [r7, #24]
 80015a6:	4013      	ands	r3, r2
 80015a8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80015aa:	683b      	ldr	r3, [r7, #0]
 80015ac:	685b      	ldr	r3, [r3, #4]
 80015ae:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80015b2:	2b00      	cmp	r3, #0
 80015b4:	d003      	beq.n	80015be <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 80015b6:	69ba      	ldr	r2, [r7, #24]
 80015b8:	693b      	ldr	r3, [r7, #16]
 80015ba:	4313      	orrs	r3, r2
 80015bc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80015be:	4a19      	ldr	r2, [pc, #100]	; (8001624 <HAL_GPIO_Init+0x300>)
 80015c0:	69bb      	ldr	r3, [r7, #24]
 80015c2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80015c4:	4b17      	ldr	r3, [pc, #92]	; (8001624 <HAL_GPIO_Init+0x300>)
 80015c6:	68db      	ldr	r3, [r3, #12]
 80015c8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80015ca:	693b      	ldr	r3, [r7, #16]
 80015cc:	43db      	mvns	r3, r3
 80015ce:	69ba      	ldr	r2, [r7, #24]
 80015d0:	4013      	ands	r3, r2
 80015d2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80015d4:	683b      	ldr	r3, [r7, #0]
 80015d6:	685b      	ldr	r3, [r3, #4]
 80015d8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80015dc:	2b00      	cmp	r3, #0
 80015de:	d003      	beq.n	80015e8 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 80015e0:	69ba      	ldr	r2, [r7, #24]
 80015e2:	693b      	ldr	r3, [r7, #16]
 80015e4:	4313      	orrs	r3, r2
 80015e6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80015e8:	4a0e      	ldr	r2, [pc, #56]	; (8001624 <HAL_GPIO_Init+0x300>)
 80015ea:	69bb      	ldr	r3, [r7, #24]
 80015ec:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80015ee:	69fb      	ldr	r3, [r7, #28]
 80015f0:	3301      	adds	r3, #1
 80015f2:	61fb      	str	r3, [r7, #28]
 80015f4:	69fb      	ldr	r3, [r7, #28]
 80015f6:	2b0f      	cmp	r3, #15
 80015f8:	f67f aea2 	bls.w	8001340 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80015fc:	bf00      	nop
 80015fe:	3724      	adds	r7, #36	; 0x24
 8001600:	46bd      	mov	sp, r7
 8001602:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001606:	4770      	bx	lr
 8001608:	40023800 	.word	0x40023800
 800160c:	40013800 	.word	0x40013800
 8001610:	40020000 	.word	0x40020000
 8001614:	40020400 	.word	0x40020400
 8001618:	40020800 	.word	0x40020800
 800161c:	40020c00 	.word	0x40020c00
 8001620:	40021000 	.word	0x40021000
 8001624:	40013c00 	.word	0x40013c00

08001628 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001628:	b480      	push	{r7}
 800162a:	b083      	sub	sp, #12
 800162c:	af00      	add	r7, sp, #0
 800162e:	6078      	str	r0, [r7, #4]
 8001630:	460b      	mov	r3, r1
 8001632:	807b      	strh	r3, [r7, #2]
 8001634:	4613      	mov	r3, r2
 8001636:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001638:	787b      	ldrb	r3, [r7, #1]
 800163a:	2b00      	cmp	r3, #0
 800163c:	d003      	beq.n	8001646 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800163e:	887a      	ldrh	r2, [r7, #2]
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001644:	e003      	b.n	800164e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001646:	887b      	ldrh	r3, [r7, #2]
 8001648:	041a      	lsls	r2, r3, #16
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	619a      	str	r2, [r3, #24]
}
 800164e:	bf00      	nop
 8001650:	370c      	adds	r7, #12
 8001652:	46bd      	mov	sp, r7
 8001654:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001658:	4770      	bx	lr
	...

0800165c <HAL_I2C_Init>:
  * @param  hi2c pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800165c:	b580      	push	{r7, lr}
 800165e:	b084      	sub	sp, #16
 8001660:	af00      	add	r7, sp, #0
 8001662:	6078      	str	r0, [r7, #4]
  uint32_t freqrange = 0U;
 8001664:	2300      	movs	r3, #0
 8001666:	60fb      	str	r3, [r7, #12]
  uint32_t pclk1 = 0U;
 8001668:	2300      	movs	r3, #0
 800166a:	60bb      	str	r3, [r7, #8]

  /* Check the I2C handle allocation */
  if(hi2c == NULL)
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	2b00      	cmp	r3, #0
 8001670:	d101      	bne.n	8001676 <HAL_I2C_Init+0x1a>
  {
    return HAL_ERROR;
 8001672:	2301      	movs	r3, #1
 8001674:	e0c8      	b.n	8001808 <HAL_I2C_Init+0x1ac>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if(hi2c->State == HAL_I2C_STATE_RESET)
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800167c:	b2db      	uxtb	r3, r3
 800167e:	2b00      	cmp	r3, #0
 8001680:	d106      	bne.n	8001690 <HAL_I2C_Init+0x34>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	2200      	movs	r2, #0
 8001686:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800168a:	6878      	ldr	r0, [r7, #4]
 800168c:	f7ff fb1c 	bl	8000cc8 <HAL_I2C_MspInit>
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	2224      	movs	r2, #36	; 0x24
 8001694:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	681b      	ldr	r3, [r3, #0]
 800169c:	687a      	ldr	r2, [r7, #4]
 800169e:	6812      	ldr	r2, [r2, #0]
 80016a0:	6812      	ldr	r2, [r2, #0]
 80016a2:	f022 0201 	bic.w	r2, r2, #1
 80016a6:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80016a8:	f001 faf6 	bl	8002c98 <HAL_RCC_GetPCLK1Freq>
 80016ac:	60b8      	str	r0, [r7, #8]

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80016ae:	68bb      	ldr	r3, [r7, #8]
 80016b0:	4a57      	ldr	r2, [pc, #348]	; (8001810 <HAL_I2C_Init+0x1b4>)
 80016b2:	fba2 2303 	umull	r2, r3, r2, r3
 80016b6:	0c9b      	lsrs	r3, r3, #18
 80016b8:	60fb      	str	r3, [r7, #12]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->CR2 = freqrange;
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	681b      	ldr	r3, [r3, #0]
 80016be:	68fa      	ldr	r2, [r7, #12]
 80016c0:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  hi2c->Instance->TRISE = I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed);
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	681a      	ldr	r2, [r3, #0]
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	685b      	ldr	r3, [r3, #4]
 80016ca:	4952      	ldr	r1, [pc, #328]	; (8001814 <HAL_I2C_Init+0x1b8>)
 80016cc:	428b      	cmp	r3, r1
 80016ce:	d802      	bhi.n	80016d6 <HAL_I2C_Init+0x7a>
 80016d0:	68fb      	ldr	r3, [r7, #12]
 80016d2:	3301      	adds	r3, #1
 80016d4:	e009      	b.n	80016ea <HAL_I2C_Init+0x8e>
 80016d6:	68fb      	ldr	r3, [r7, #12]
 80016d8:	f44f 7196 	mov.w	r1, #300	; 0x12c
 80016dc:	fb01 f303 	mul.w	r3, r1, r3
 80016e0:	494d      	ldr	r1, [pc, #308]	; (8001818 <HAL_I2C_Init+0x1bc>)
 80016e2:	fba1 1303 	umull	r1, r3, r1, r3
 80016e6:	099b      	lsrs	r3, r3, #6
 80016e8:	3301      	adds	r3, #1
 80016ea:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  hi2c->Instance->CCR = I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle);
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	6819      	ldr	r1, [r3, #0]
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	685b      	ldr	r3, [r3, #4]
 80016f4:	4a47      	ldr	r2, [pc, #284]	; (8001814 <HAL_I2C_Init+0x1b8>)
 80016f6:	4293      	cmp	r3, r2
 80016f8:	d812      	bhi.n	8001720 <HAL_I2C_Init+0xc4>
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	685b      	ldr	r3, [r3, #4]
 80016fe:	005b      	lsls	r3, r3, #1
 8001700:	68ba      	ldr	r2, [r7, #8]
 8001702:	fbb2 f3f3 	udiv	r3, r2, r3
 8001706:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800170a:	2b03      	cmp	r3, #3
 800170c:	d906      	bls.n	800171c <HAL_I2C_Init+0xc0>
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	685b      	ldr	r3, [r3, #4]
 8001712:	005b      	lsls	r3, r3, #1
 8001714:	68ba      	ldr	r2, [r7, #8]
 8001716:	fbb2 f3f3 	udiv	r3, r2, r3
 800171a:	e045      	b.n	80017a8 <HAL_I2C_Init+0x14c>
 800171c:	2304      	movs	r3, #4
 800171e:	e043      	b.n	80017a8 <HAL_I2C_Init+0x14c>
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	689b      	ldr	r3, [r3, #8]
 8001724:	2b00      	cmp	r3, #0
 8001726:	d10f      	bne.n	8001748 <HAL_I2C_Init+0xec>
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	685a      	ldr	r2, [r3, #4]
 800172c:	4613      	mov	r3, r2
 800172e:	005b      	lsls	r3, r3, #1
 8001730:	4413      	add	r3, r2
 8001732:	68ba      	ldr	r2, [r7, #8]
 8001734:	fbb2 f3f3 	udiv	r3, r2, r3
 8001738:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800173c:	2b00      	cmp	r3, #0
 800173e:	bf0c      	ite	eq
 8001740:	2301      	moveq	r3, #1
 8001742:	2300      	movne	r3, #0
 8001744:	b2db      	uxtb	r3, r3
 8001746:	e010      	b.n	800176a <HAL_I2C_Init+0x10e>
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	685a      	ldr	r2, [r3, #4]
 800174c:	4613      	mov	r3, r2
 800174e:	009b      	lsls	r3, r3, #2
 8001750:	4413      	add	r3, r2
 8001752:	009a      	lsls	r2, r3, #2
 8001754:	4413      	add	r3, r2
 8001756:	68ba      	ldr	r2, [r7, #8]
 8001758:	fbb2 f3f3 	udiv	r3, r2, r3
 800175c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001760:	2b00      	cmp	r3, #0
 8001762:	bf0c      	ite	eq
 8001764:	2301      	moveq	r3, #1
 8001766:	2300      	movne	r3, #0
 8001768:	b2db      	uxtb	r3, r3
 800176a:	2b00      	cmp	r3, #0
 800176c:	d001      	beq.n	8001772 <HAL_I2C_Init+0x116>
 800176e:	2301      	movs	r3, #1
 8001770:	e01a      	b.n	80017a8 <HAL_I2C_Init+0x14c>
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	689b      	ldr	r3, [r3, #8]
 8001776:	2b00      	cmp	r3, #0
 8001778:	d10a      	bne.n	8001790 <HAL_I2C_Init+0x134>
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	685a      	ldr	r2, [r3, #4]
 800177e:	4613      	mov	r3, r2
 8001780:	005b      	lsls	r3, r3, #1
 8001782:	4413      	add	r3, r2
 8001784:	68ba      	ldr	r2, [r7, #8]
 8001786:	fbb2 f3f3 	udiv	r3, r2, r3
 800178a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800178e:	e00b      	b.n	80017a8 <HAL_I2C_Init+0x14c>
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	685a      	ldr	r2, [r3, #4]
 8001794:	4613      	mov	r3, r2
 8001796:	009b      	lsls	r3, r3, #2
 8001798:	4413      	add	r3, r2
 800179a:	009a      	lsls	r2, r3, #2
 800179c:	4413      	add	r3, r2
 800179e:	68ba      	ldr	r2, [r7, #8]
 80017a0:	fbb2 f3f3 	udiv	r3, r2, r3
 80017a4:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80017a8:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	681b      	ldr	r3, [r3, #0]
 80017ae:	687a      	ldr	r2, [r7, #4]
 80017b0:	69d1      	ldr	r1, [r2, #28]
 80017b2:	687a      	ldr	r2, [r7, #4]
 80017b4:	6a12      	ldr	r2, [r2, #32]
 80017b6:	430a      	orrs	r2, r1
 80017b8:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  hi2c->Instance->OAR1 = (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1);
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	681b      	ldr	r3, [r3, #0]
 80017be:	687a      	ldr	r2, [r7, #4]
 80017c0:	6911      	ldr	r1, [r2, #16]
 80017c2:	687a      	ldr	r2, [r7, #4]
 80017c4:	68d2      	ldr	r2, [r2, #12]
 80017c6:	430a      	orrs	r2, r1
 80017c8:	609a      	str	r2, [r3, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2);
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	681b      	ldr	r3, [r3, #0]
 80017ce:	687a      	ldr	r2, [r7, #4]
 80017d0:	6951      	ldr	r1, [r2, #20]
 80017d2:	687a      	ldr	r2, [r7, #4]
 80017d4:	6992      	ldr	r2, [r2, #24]
 80017d6:	430a      	orrs	r2, r1
 80017d8:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	681b      	ldr	r3, [r3, #0]
 80017de:	687a      	ldr	r2, [r7, #4]
 80017e0:	6812      	ldr	r2, [r2, #0]
 80017e2:	6812      	ldr	r2, [r2, #0]
 80017e4:	f042 0201 	orr.w	r2, r2, #1
 80017e8:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	2200      	movs	r2, #0
 80017ee:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	2220      	movs	r2, #32
 80017f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	2200      	movs	r2, #0
 80017fc:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	2200      	movs	r2, #0
 8001802:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8001806:	2300      	movs	r3, #0
}
 8001808:	4618      	mov	r0, r3
 800180a:	3710      	adds	r7, #16
 800180c:	46bd      	mov	sp, r7
 800180e:	bd80      	pop	{r7, pc}
 8001810:	431bde83 	.word	0x431bde83
 8001814:	000186a0 	.word	0x000186a0
 8001818:	10624dd3 	.word	0x10624dd3

0800181c <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800181c:	b580      	push	{r7, lr}
 800181e:	b088      	sub	sp, #32
 8001820:	af02      	add	r7, sp, #8
 8001822:	60f8      	str	r0, [r7, #12]
 8001824:	607a      	str	r2, [r7, #4]
 8001826:	461a      	mov	r2, r3
 8001828:	460b      	mov	r3, r1
 800182a:	817b      	strh	r3, [r7, #10]
 800182c:	4613      	mov	r3, r2
 800182e:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart = 0x00U;
 8001830:	2300      	movs	r3, #0
 8001832:	617b      	str	r3, [r7, #20]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8001834:	f7ff fc1a 	bl	800106c <HAL_GetTick>
 8001838:	6178      	str	r0, [r7, #20]

  if(hi2c->State == HAL_I2C_STATE_READY)
 800183a:	68fb      	ldr	r3, [r7, #12]
 800183c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001840:	b2db      	uxtb	r3, r3
 8001842:	2b20      	cmp	r3, #32
 8001844:	f040 80ee 	bne.w	8001a24 <HAL_I2C_Master_Transmit+0x208>
  {
    /* Wait until BUSY flag is reset */
    if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001848:	697b      	ldr	r3, [r7, #20]
 800184a:	9300      	str	r3, [sp, #0]
 800184c:	2319      	movs	r3, #25
 800184e:	2201      	movs	r2, #1
 8001850:	4977      	ldr	r1, [pc, #476]	; (8001a30 <HAL_I2C_Master_Transmit+0x214>)
 8001852:	68f8      	ldr	r0, [r7, #12]
 8001854:	f000 fc6c 	bl	8002130 <I2C_WaitOnFlagUntilTimeout>
 8001858:	4603      	mov	r3, r0
 800185a:	2b00      	cmp	r3, #0
 800185c:	d001      	beq.n	8001862 <HAL_I2C_Master_Transmit+0x46>
    {
      return HAL_BUSY;
 800185e:	2302      	movs	r3, #2
 8001860:	e0e1      	b.n	8001a26 <HAL_I2C_Master_Transmit+0x20a>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001862:	68fb      	ldr	r3, [r7, #12]
 8001864:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001868:	2b01      	cmp	r3, #1
 800186a:	d101      	bne.n	8001870 <HAL_I2C_Master_Transmit+0x54>
 800186c:	2302      	movs	r3, #2
 800186e:	e0da      	b.n	8001a26 <HAL_I2C_Master_Transmit+0x20a>
 8001870:	68fb      	ldr	r3, [r7, #12]
 8001872:	2201      	movs	r2, #1
 8001874:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001878:	68fb      	ldr	r3, [r7, #12]
 800187a:	681b      	ldr	r3, [r3, #0]
 800187c:	681b      	ldr	r3, [r3, #0]
 800187e:	f003 0301 	and.w	r3, r3, #1
 8001882:	2b01      	cmp	r3, #1
 8001884:	d007      	beq.n	8001896 <HAL_I2C_Master_Transmit+0x7a>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8001886:	68fb      	ldr	r3, [r7, #12]
 8001888:	681b      	ldr	r3, [r3, #0]
 800188a:	68fa      	ldr	r2, [r7, #12]
 800188c:	6812      	ldr	r2, [r2, #0]
 800188e:	6812      	ldr	r2, [r2, #0]
 8001890:	f042 0201 	orr.w	r2, r2, #1
 8001894:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 8001896:	68fb      	ldr	r3, [r7, #12]
 8001898:	681b      	ldr	r3, [r3, #0]
 800189a:	68fa      	ldr	r2, [r7, #12]
 800189c:	6812      	ldr	r2, [r2, #0]
 800189e:	6812      	ldr	r2, [r2, #0]
 80018a0:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80018a4:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80018a6:	68fb      	ldr	r3, [r7, #12]
 80018a8:	2221      	movs	r2, #33	; 0x21
 80018aa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 80018ae:	68fb      	ldr	r3, [r7, #12]
 80018b0:	2210      	movs	r2, #16
 80018b2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80018b6:	68fb      	ldr	r3, [r7, #12]
 80018b8:	2200      	movs	r2, #0
 80018ba:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80018bc:	68fb      	ldr	r3, [r7, #12]
 80018be:	687a      	ldr	r2, [r7, #4]
 80018c0:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80018c2:	68fb      	ldr	r3, [r7, #12]
 80018c4:	893a      	ldrh	r2, [r7, #8]
 80018c6:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80018c8:	68fb      	ldr	r3, [r7, #12]
 80018ca:	4a5a      	ldr	r2, [pc, #360]	; (8001a34 <HAL_I2C_Master_Transmit+0x218>)
 80018cc:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->XferSize    = hi2c->XferCount;
 80018ce:	68fb      	ldr	r3, [r7, #12]
 80018d0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80018d2:	b29a      	uxth	r2, r3
 80018d4:	68fb      	ldr	r3, [r7, #12]
 80018d6:	851a      	strh	r2, [r3, #40]	; 0x28

    /* Send Slave Address */
    if(I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 80018d8:	8979      	ldrh	r1, [r7, #10]
 80018da:	697b      	ldr	r3, [r7, #20]
 80018dc:	6a3a      	ldr	r2, [r7, #32]
 80018de:	68f8      	ldr	r0, [r7, #12]
 80018e0:	f000 fadc 	bl	8001e9c <I2C_MasterRequestWrite>
 80018e4:	4603      	mov	r3, r0
 80018e6:	2b00      	cmp	r3, #0
 80018e8:	d00f      	beq.n	800190a <HAL_I2C_Master_Transmit+0xee>
    {
      if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80018ea:	68fb      	ldr	r3, [r7, #12]
 80018ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018ee:	2b04      	cmp	r3, #4
 80018f0:	d105      	bne.n	80018fe <HAL_I2C_Master_Transmit+0xe2>
      {
        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80018f2:	68fb      	ldr	r3, [r7, #12]
 80018f4:	2200      	movs	r2, #0
 80018f6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
        return HAL_ERROR;
 80018fa:	2301      	movs	r3, #1
 80018fc:	e093      	b.n	8001a26 <HAL_I2C_Master_Transmit+0x20a>
      }
      else
      {
        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80018fe:	68fb      	ldr	r3, [r7, #12]
 8001900:	2200      	movs	r2, #0
 8001902:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
        return HAL_TIMEOUT;
 8001906:	2303      	movs	r3, #3
 8001908:	e08d      	b.n	8001a26 <HAL_I2C_Master_Transmit+0x20a>
      }
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800190a:	2300      	movs	r3, #0
 800190c:	613b      	str	r3, [r7, #16]
 800190e:	68fb      	ldr	r3, [r7, #12]
 8001910:	681b      	ldr	r3, [r3, #0]
 8001912:	695b      	ldr	r3, [r3, #20]
 8001914:	613b      	str	r3, [r7, #16]
 8001916:	68fb      	ldr	r3, [r7, #12]
 8001918:	681b      	ldr	r3, [r3, #0]
 800191a:	699b      	ldr	r3, [r3, #24]
 800191c:	613b      	str	r3, [r7, #16]
 800191e:	693b      	ldr	r3, [r7, #16]

    while(hi2c->XferSize > 0U)
 8001920:	e066      	b.n	80019f0 <HAL_I2C_Master_Transmit+0x1d4>
    {
      /* Wait until TXE flag is set */
      if(I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001922:	697a      	ldr	r2, [r7, #20]
 8001924:	6a39      	ldr	r1, [r7, #32]
 8001926:	68f8      	ldr	r0, [r7, #12]
 8001928:	f000 fcc1 	bl	80022ae <I2C_WaitOnTXEFlagUntilTimeout>
 800192c:	4603      	mov	r3, r0
 800192e:	2b00      	cmp	r3, #0
 8001930:	d00f      	beq.n	8001952 <HAL_I2C_Master_Transmit+0x136>
      {
        if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001932:	68fb      	ldr	r3, [r7, #12]
 8001934:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001936:	2b04      	cmp	r3, #4
 8001938:	d109      	bne.n	800194e <HAL_I2C_Master_Transmit+0x132>
        {
          /* Generate Stop */
          hi2c->Instance->CR1 |= I2C_CR1_STOP;
 800193a:	68fb      	ldr	r3, [r7, #12]
 800193c:	681b      	ldr	r3, [r3, #0]
 800193e:	68fa      	ldr	r2, [r7, #12]
 8001940:	6812      	ldr	r2, [r2, #0]
 8001942:	6812      	ldr	r2, [r2, #0]
 8001944:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001948:	601a      	str	r2, [r3, #0]
          return HAL_ERROR;
 800194a:	2301      	movs	r3, #1
 800194c:	e06b      	b.n	8001a26 <HAL_I2C_Master_Transmit+0x20a>
        }
        else
        {
          return HAL_TIMEOUT;
 800194e:	2303      	movs	r3, #3
 8001950:	e069      	b.n	8001a26 <HAL_I2C_Master_Transmit+0x20a>
        }
      }

      /* Write data to DR */
      hi2c->Instance->DR = (*hi2c->pBuffPtr++);
 8001952:	68fb      	ldr	r3, [r7, #12]
 8001954:	681a      	ldr	r2, [r3, #0]
 8001956:	68fb      	ldr	r3, [r7, #12]
 8001958:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800195a:	1c58      	adds	r0, r3, #1
 800195c:	68f9      	ldr	r1, [r7, #12]
 800195e:	6248      	str	r0, [r1, #36]	; 0x24
 8001960:	781b      	ldrb	r3, [r3, #0]
 8001962:	6113      	str	r3, [r2, #16]
      hi2c->XferCount--;
 8001964:	68fb      	ldr	r3, [r7, #12]
 8001966:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001968:	b29b      	uxth	r3, r3
 800196a:	3b01      	subs	r3, #1
 800196c:	b29a      	uxth	r2, r3
 800196e:	68fb      	ldr	r3, [r7, #12]
 8001970:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8001972:	68fb      	ldr	r3, [r7, #12]
 8001974:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001976:	3b01      	subs	r3, #1
 8001978:	b29a      	uxth	r2, r3
 800197a:	68fb      	ldr	r3, [r7, #12]
 800197c:	851a      	strh	r2, [r3, #40]	; 0x28

      if((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800197e:	68fb      	ldr	r3, [r7, #12]
 8001980:	681b      	ldr	r3, [r3, #0]
 8001982:	695b      	ldr	r3, [r3, #20]
 8001984:	f003 0304 	and.w	r3, r3, #4
 8001988:	2b04      	cmp	r3, #4
 800198a:	d119      	bne.n	80019c0 <HAL_I2C_Master_Transmit+0x1a4>
 800198c:	68fb      	ldr	r3, [r7, #12]
 800198e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001990:	2b00      	cmp	r3, #0
 8001992:	d015      	beq.n	80019c0 <HAL_I2C_Master_Transmit+0x1a4>
      {
        /* Write data to DR */
        hi2c->Instance->DR = (*hi2c->pBuffPtr++);
 8001994:	68fb      	ldr	r3, [r7, #12]
 8001996:	681a      	ldr	r2, [r3, #0]
 8001998:	68fb      	ldr	r3, [r7, #12]
 800199a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800199c:	1c58      	adds	r0, r3, #1
 800199e:	68f9      	ldr	r1, [r7, #12]
 80019a0:	6248      	str	r0, [r1, #36]	; 0x24
 80019a2:	781b      	ldrb	r3, [r3, #0]
 80019a4:	6113      	str	r3, [r2, #16]
        hi2c->XferCount--;
 80019a6:	68fb      	ldr	r3, [r7, #12]
 80019a8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80019aa:	b29b      	uxth	r3, r3
 80019ac:	3b01      	subs	r3, #1
 80019ae:	b29a      	uxth	r2, r3
 80019b0:	68fb      	ldr	r3, [r7, #12]
 80019b2:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 80019b4:	68fb      	ldr	r3, [r7, #12]
 80019b6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80019b8:	3b01      	subs	r3, #1
 80019ba:	b29a      	uxth	r2, r3
 80019bc:	68fb      	ldr	r3, [r7, #12]
 80019be:	851a      	strh	r2, [r3, #40]	; 0x28
      }
      
      /* Wait until BTF flag is set */
      if(I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80019c0:	697a      	ldr	r2, [r7, #20]
 80019c2:	6a39      	ldr	r1, [r7, #32]
 80019c4:	68f8      	ldr	r0, [r7, #12]
 80019c6:	f000 fcaf 	bl	8002328 <I2C_WaitOnBTFFlagUntilTimeout>
 80019ca:	4603      	mov	r3, r0
 80019cc:	2b00      	cmp	r3, #0
 80019ce:	d00f      	beq.n	80019f0 <HAL_I2C_Master_Transmit+0x1d4>
      {
        if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80019d0:	68fb      	ldr	r3, [r7, #12]
 80019d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019d4:	2b04      	cmp	r3, #4
 80019d6:	d109      	bne.n	80019ec <HAL_I2C_Master_Transmit+0x1d0>
        {
          /* Generate Stop */
          hi2c->Instance->CR1 |= I2C_CR1_STOP;
 80019d8:	68fb      	ldr	r3, [r7, #12]
 80019da:	681b      	ldr	r3, [r3, #0]
 80019dc:	68fa      	ldr	r2, [r7, #12]
 80019de:	6812      	ldr	r2, [r2, #0]
 80019e0:	6812      	ldr	r2, [r2, #0]
 80019e2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80019e6:	601a      	str	r2, [r3, #0]
          return HAL_ERROR;
 80019e8:	2301      	movs	r3, #1
 80019ea:	e01c      	b.n	8001a26 <HAL_I2C_Master_Transmit+0x20a>
        }
        else
        {
          return HAL_TIMEOUT;
 80019ec:	2303      	movs	r3, #3
 80019ee:	e01a      	b.n	8001a26 <HAL_I2C_Master_Transmit+0x20a>
    while(hi2c->XferSize > 0U)
 80019f0:	68fb      	ldr	r3, [r7, #12]
 80019f2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80019f4:	2b00      	cmp	r3, #0
 80019f6:	d194      	bne.n	8001922 <HAL_I2C_Master_Transmit+0x106>
        }
      }
    }

    /* Generate Stop */
    hi2c->Instance->CR1 |= I2C_CR1_STOP;
 80019f8:	68fb      	ldr	r3, [r7, #12]
 80019fa:	681b      	ldr	r3, [r3, #0]
 80019fc:	68fa      	ldr	r2, [r7, #12]
 80019fe:	6812      	ldr	r2, [r2, #0]
 8001a00:	6812      	ldr	r2, [r2, #0]
 8001a02:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001a06:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001a08:	68fb      	ldr	r3, [r7, #12]
 8001a0a:	2220      	movs	r2, #32
 8001a0c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001a10:	68fb      	ldr	r3, [r7, #12]
 8001a12:	2200      	movs	r2, #0
 8001a14:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    
    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001a18:	68fb      	ldr	r3, [r7, #12]
 8001a1a:	2200      	movs	r2, #0
 8001a1c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8001a20:	2300      	movs	r3, #0
 8001a22:	e000      	b.n	8001a26 <HAL_I2C_Master_Transmit+0x20a>
  }
  else
  {
    return HAL_BUSY;
 8001a24:	2302      	movs	r3, #2
  }
}
 8001a26:	4618      	mov	r0, r3
 8001a28:	3718      	adds	r7, #24
 8001a2a:	46bd      	mov	sp, r7
 8001a2c:	bd80      	pop	{r7, pc}
 8001a2e:	bf00      	nop
 8001a30:	00100002 	.word	0x00100002
 8001a34:	ffff0000 	.word	0xffff0000

08001a38 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001a38:	b580      	push	{r7, lr}
 8001a3a:	b08c      	sub	sp, #48	; 0x30
 8001a3c:	af02      	add	r7, sp, #8
 8001a3e:	60f8      	str	r0, [r7, #12]
 8001a40:	607a      	str	r2, [r7, #4]
 8001a42:	461a      	mov	r2, r3
 8001a44:	460b      	mov	r3, r1
 8001a46:	817b      	strh	r3, [r7, #10]
 8001a48:	4613      	mov	r3, r2
 8001a4a:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart = 0x00U;
 8001a4c:	2300      	movs	r3, #0
 8001a4e:	627b      	str	r3, [r7, #36]	; 0x24

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8001a50:	f7ff fb0c 	bl	800106c <HAL_GetTick>
 8001a54:	6278      	str	r0, [r7, #36]	; 0x24

  if(hi2c->State == HAL_I2C_STATE_READY)
 8001a56:	68fb      	ldr	r3, [r7, #12]
 8001a58:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001a5c:	b2db      	uxtb	r3, r3
 8001a5e:	2b20      	cmp	r3, #32
 8001a60:	f040 8215 	bne.w	8001e8e <HAL_I2C_Master_Receive+0x456>
  {
    /* Wait until BUSY flag is reset */
    if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001a64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a66:	9300      	str	r3, [sp, #0]
 8001a68:	2319      	movs	r3, #25
 8001a6a:	2201      	movs	r2, #1
 8001a6c:	4985      	ldr	r1, [pc, #532]	; (8001c84 <HAL_I2C_Master_Receive+0x24c>)
 8001a6e:	68f8      	ldr	r0, [r7, #12]
 8001a70:	f000 fb5e 	bl	8002130 <I2C_WaitOnFlagUntilTimeout>
 8001a74:	4603      	mov	r3, r0
 8001a76:	2b00      	cmp	r3, #0
 8001a78:	d001      	beq.n	8001a7e <HAL_I2C_Master_Receive+0x46>
    {
      return HAL_BUSY;
 8001a7a:	2302      	movs	r3, #2
 8001a7c:	e208      	b.n	8001e90 <HAL_I2C_Master_Receive+0x458>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001a7e:	68fb      	ldr	r3, [r7, #12]
 8001a80:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001a84:	2b01      	cmp	r3, #1
 8001a86:	d101      	bne.n	8001a8c <HAL_I2C_Master_Receive+0x54>
 8001a88:	2302      	movs	r3, #2
 8001a8a:	e201      	b.n	8001e90 <HAL_I2C_Master_Receive+0x458>
 8001a8c:	68fb      	ldr	r3, [r7, #12]
 8001a8e:	2201      	movs	r2, #1
 8001a90:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001a94:	68fb      	ldr	r3, [r7, #12]
 8001a96:	681b      	ldr	r3, [r3, #0]
 8001a98:	681b      	ldr	r3, [r3, #0]
 8001a9a:	f003 0301 	and.w	r3, r3, #1
 8001a9e:	2b01      	cmp	r3, #1
 8001aa0:	d007      	beq.n	8001ab2 <HAL_I2C_Master_Receive+0x7a>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8001aa2:	68fb      	ldr	r3, [r7, #12]
 8001aa4:	681b      	ldr	r3, [r3, #0]
 8001aa6:	68fa      	ldr	r2, [r7, #12]
 8001aa8:	6812      	ldr	r2, [r2, #0]
 8001aaa:	6812      	ldr	r2, [r2, #0]
 8001aac:	f042 0201 	orr.w	r2, r2, #1
 8001ab0:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 8001ab2:	68fb      	ldr	r3, [r7, #12]
 8001ab4:	681b      	ldr	r3, [r3, #0]
 8001ab6:	68fa      	ldr	r2, [r7, #12]
 8001ab8:	6812      	ldr	r2, [r2, #0]
 8001aba:	6812      	ldr	r2, [r2, #0]
 8001abc:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001ac0:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 8001ac2:	68fb      	ldr	r3, [r7, #12]
 8001ac4:	2222      	movs	r2, #34	; 0x22
 8001ac6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8001aca:	68fb      	ldr	r3, [r7, #12]
 8001acc:	2210      	movs	r2, #16
 8001ace:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8001ad2:	68fb      	ldr	r3, [r7, #12]
 8001ad4:	2200      	movs	r2, #0
 8001ad6:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8001ad8:	68fb      	ldr	r3, [r7, #12]
 8001ada:	687a      	ldr	r2, [r7, #4]
 8001adc:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8001ade:	68fb      	ldr	r3, [r7, #12]
 8001ae0:	893a      	ldrh	r2, [r7, #8]
 8001ae2:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001ae4:	68fb      	ldr	r3, [r7, #12]
 8001ae6:	4a68      	ldr	r2, [pc, #416]	; (8001c88 <HAL_I2C_Master_Receive+0x250>)
 8001ae8:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->XferSize    = hi2c->XferCount;
 8001aea:	68fb      	ldr	r3, [r7, #12]
 8001aec:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001aee:	b29a      	uxth	r2, r3
 8001af0:	68fb      	ldr	r3, [r7, #12]
 8001af2:	851a      	strh	r2, [r3, #40]	; 0x28

    /* Send Slave Address */
    if(I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8001af4:	8979      	ldrh	r1, [r7, #10]
 8001af6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001af8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001afa:	68f8      	ldr	r0, [r7, #12]
 8001afc:	f000 fa50 	bl	8001fa0 <I2C_MasterRequestRead>
 8001b00:	4603      	mov	r3, r0
 8001b02:	2b00      	cmp	r3, #0
 8001b04:	d00f      	beq.n	8001b26 <HAL_I2C_Master_Receive+0xee>
    {
      if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001b06:	68fb      	ldr	r3, [r7, #12]
 8001b08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b0a:	2b04      	cmp	r3, #4
 8001b0c:	d105      	bne.n	8001b1a <HAL_I2C_Master_Receive+0xe2>
      {
        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001b0e:	68fb      	ldr	r3, [r7, #12]
 8001b10:	2200      	movs	r2, #0
 8001b12:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
        return HAL_ERROR;
 8001b16:	2301      	movs	r3, #1
 8001b18:	e1ba      	b.n	8001e90 <HAL_I2C_Master_Receive+0x458>
      }
      else
      {
        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001b1a:	68fb      	ldr	r3, [r7, #12]
 8001b1c:	2200      	movs	r2, #0
 8001b1e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
        return HAL_TIMEOUT;
 8001b22:	2303      	movs	r3, #3
 8001b24:	e1b4      	b.n	8001e90 <HAL_I2C_Master_Receive+0x458>
      }
    }

    if(hi2c->XferSize == 0U)
 8001b26:	68fb      	ldr	r3, [r7, #12]
 8001b28:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001b2a:	2b00      	cmp	r3, #0
 8001b2c:	d113      	bne.n	8001b56 <HAL_I2C_Master_Receive+0x11e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001b2e:	2300      	movs	r3, #0
 8001b30:	623b      	str	r3, [r7, #32]
 8001b32:	68fb      	ldr	r3, [r7, #12]
 8001b34:	681b      	ldr	r3, [r3, #0]
 8001b36:	695b      	ldr	r3, [r3, #20]
 8001b38:	623b      	str	r3, [r7, #32]
 8001b3a:	68fb      	ldr	r3, [r7, #12]
 8001b3c:	681b      	ldr	r3, [r3, #0]
 8001b3e:	699b      	ldr	r3, [r3, #24]
 8001b40:	623b      	str	r3, [r7, #32]
 8001b42:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      hi2c->Instance->CR1 |= I2C_CR1_STOP;
 8001b44:	68fb      	ldr	r3, [r7, #12]
 8001b46:	681b      	ldr	r3, [r3, #0]
 8001b48:	68fa      	ldr	r2, [r7, #12]
 8001b4a:	6812      	ldr	r2, [r2, #0]
 8001b4c:	6812      	ldr	r2, [r2, #0]
 8001b4e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001b52:	601a      	str	r2, [r3, #0]
 8001b54:	e188      	b.n	8001e68 <HAL_I2C_Master_Receive+0x430>
    }
    else if(hi2c->XferSize == 1U)
 8001b56:	68fb      	ldr	r3, [r7, #12]
 8001b58:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001b5a:	2b01      	cmp	r3, #1
 8001b5c:	d11b      	bne.n	8001b96 <HAL_I2C_Master_Receive+0x15e>
    {
      /* Disable Acknowledge */
      hi2c->Instance->CR1 &= ~I2C_CR1_ACK;
 8001b5e:	68fb      	ldr	r3, [r7, #12]
 8001b60:	681b      	ldr	r3, [r3, #0]
 8001b62:	68fa      	ldr	r2, [r7, #12]
 8001b64:	6812      	ldr	r2, [r2, #0]
 8001b66:	6812      	ldr	r2, [r2, #0]
 8001b68:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001b6c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001b6e:	2300      	movs	r3, #0
 8001b70:	61fb      	str	r3, [r7, #28]
 8001b72:	68fb      	ldr	r3, [r7, #12]
 8001b74:	681b      	ldr	r3, [r3, #0]
 8001b76:	695b      	ldr	r3, [r3, #20]
 8001b78:	61fb      	str	r3, [r7, #28]
 8001b7a:	68fb      	ldr	r3, [r7, #12]
 8001b7c:	681b      	ldr	r3, [r3, #0]
 8001b7e:	699b      	ldr	r3, [r3, #24]
 8001b80:	61fb      	str	r3, [r7, #28]
 8001b82:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      hi2c->Instance->CR1 |= I2C_CR1_STOP;
 8001b84:	68fb      	ldr	r3, [r7, #12]
 8001b86:	681b      	ldr	r3, [r3, #0]
 8001b88:	68fa      	ldr	r2, [r7, #12]
 8001b8a:	6812      	ldr	r2, [r2, #0]
 8001b8c:	6812      	ldr	r2, [r2, #0]
 8001b8e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001b92:	601a      	str	r2, [r3, #0]
 8001b94:	e168      	b.n	8001e68 <HAL_I2C_Master_Receive+0x430>
    }
    else if(hi2c->XferSize == 2U)
 8001b96:	68fb      	ldr	r3, [r7, #12]
 8001b98:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001b9a:	2b02      	cmp	r3, #2
 8001b9c:	d11b      	bne.n	8001bd6 <HAL_I2C_Master_Receive+0x19e>
    {
      /* Disable Acknowledge */
      hi2c->Instance->CR1 &= ~I2C_CR1_ACK;
 8001b9e:	68fb      	ldr	r3, [r7, #12]
 8001ba0:	681b      	ldr	r3, [r3, #0]
 8001ba2:	68fa      	ldr	r2, [r7, #12]
 8001ba4:	6812      	ldr	r2, [r2, #0]
 8001ba6:	6812      	ldr	r2, [r2, #0]
 8001ba8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001bac:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      hi2c->Instance->CR1 |= I2C_CR1_POS;
 8001bae:	68fb      	ldr	r3, [r7, #12]
 8001bb0:	681b      	ldr	r3, [r3, #0]
 8001bb2:	68fa      	ldr	r2, [r7, #12]
 8001bb4:	6812      	ldr	r2, [r2, #0]
 8001bb6:	6812      	ldr	r2, [r2, #0]
 8001bb8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001bbc:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001bbe:	2300      	movs	r3, #0
 8001bc0:	61bb      	str	r3, [r7, #24]
 8001bc2:	68fb      	ldr	r3, [r7, #12]
 8001bc4:	681b      	ldr	r3, [r3, #0]
 8001bc6:	695b      	ldr	r3, [r3, #20]
 8001bc8:	61bb      	str	r3, [r7, #24]
 8001bca:	68fb      	ldr	r3, [r7, #12]
 8001bcc:	681b      	ldr	r3, [r3, #0]
 8001bce:	699b      	ldr	r3, [r3, #24]
 8001bd0:	61bb      	str	r3, [r7, #24]
 8001bd2:	69bb      	ldr	r3, [r7, #24]
 8001bd4:	e148      	b.n	8001e68 <HAL_I2C_Master_Receive+0x430>
    }
    else
    {
      /* Enable Acknowledge */
      hi2c->Instance->CR1 |= I2C_CR1_ACK;
 8001bd6:	68fb      	ldr	r3, [r7, #12]
 8001bd8:	681b      	ldr	r3, [r3, #0]
 8001bda:	68fa      	ldr	r2, [r7, #12]
 8001bdc:	6812      	ldr	r2, [r2, #0]
 8001bde:	6812      	ldr	r2, [r2, #0]
 8001be0:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8001be4:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001be6:	2300      	movs	r3, #0
 8001be8:	617b      	str	r3, [r7, #20]
 8001bea:	68fb      	ldr	r3, [r7, #12]
 8001bec:	681b      	ldr	r3, [r3, #0]
 8001bee:	695b      	ldr	r3, [r3, #20]
 8001bf0:	617b      	str	r3, [r7, #20]
 8001bf2:	68fb      	ldr	r3, [r7, #12]
 8001bf4:	681b      	ldr	r3, [r3, #0]
 8001bf6:	699b      	ldr	r3, [r3, #24]
 8001bf8:	617b      	str	r3, [r7, #20]
 8001bfa:	697b      	ldr	r3, [r7, #20]
    }

    while(hi2c->XferSize > 0U)
 8001bfc:	e134      	b.n	8001e68 <HAL_I2C_Master_Receive+0x430>
    {
      if(hi2c->XferSize <= 3U)
 8001bfe:	68fb      	ldr	r3, [r7, #12]
 8001c00:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001c02:	2b03      	cmp	r3, #3
 8001c04:	f200 80eb 	bhi.w	8001dde <HAL_I2C_Master_Receive+0x3a6>
      {
        /* One byte */
        if(hi2c->XferSize == 1U)
 8001c08:	68fb      	ldr	r3, [r7, #12]
 8001c0a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001c0c:	2b01      	cmp	r3, #1
 8001c0e:	d127      	bne.n	8001c60 <HAL_I2C_Master_Receive+0x228>
        {
          /* Wait until RXNE flag is set */
          if(I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)      
 8001c10:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001c12:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8001c14:	68f8      	ldr	r0, [r7, #12]
 8001c16:	f000 fbc4 	bl	80023a2 <I2C_WaitOnRXNEFlagUntilTimeout>
 8001c1a:	4603      	mov	r3, r0
 8001c1c:	2b00      	cmp	r3, #0
 8001c1e:	d007      	beq.n	8001c30 <HAL_I2C_Master_Receive+0x1f8>
          {
            if(hi2c->ErrorCode == HAL_I2C_ERROR_TIMEOUT)
 8001c20:	68fb      	ldr	r3, [r7, #12]
 8001c22:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c24:	2b20      	cmp	r3, #32
 8001c26:	d101      	bne.n	8001c2c <HAL_I2C_Master_Receive+0x1f4>
            {
              return HAL_TIMEOUT;
 8001c28:	2303      	movs	r3, #3
 8001c2a:	e131      	b.n	8001e90 <HAL_I2C_Master_Receive+0x458>
            }
            else
            {
              return HAL_ERROR;
 8001c2c:	2301      	movs	r3, #1
 8001c2e:	e12f      	b.n	8001e90 <HAL_I2C_Master_Receive+0x458>
            }
          }

          /* Read data from DR */
          (*hi2c->pBuffPtr++) = hi2c->Instance->DR;
 8001c30:	68fb      	ldr	r3, [r7, #12]
 8001c32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c34:	1c59      	adds	r1, r3, #1
 8001c36:	68fa      	ldr	r2, [r7, #12]
 8001c38:	6251      	str	r1, [r2, #36]	; 0x24
 8001c3a:	68fa      	ldr	r2, [r7, #12]
 8001c3c:	6812      	ldr	r2, [r2, #0]
 8001c3e:	6912      	ldr	r2, [r2, #16]
 8001c40:	b2d2      	uxtb	r2, r2
 8001c42:	701a      	strb	r2, [r3, #0]
          hi2c->XferSize--;
 8001c44:	68fb      	ldr	r3, [r7, #12]
 8001c46:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001c48:	3b01      	subs	r3, #1
 8001c4a:	b29a      	uxth	r2, r3
 8001c4c:	68fb      	ldr	r3, [r7, #12]
 8001c4e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8001c50:	68fb      	ldr	r3, [r7, #12]
 8001c52:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001c54:	b29b      	uxth	r3, r3
 8001c56:	3b01      	subs	r3, #1
 8001c58:	b29a      	uxth	r2, r3
 8001c5a:	68fb      	ldr	r3, [r7, #12]
 8001c5c:	855a      	strh	r2, [r3, #42]	; 0x2a
 8001c5e:	e103      	b.n	8001e68 <HAL_I2C_Master_Receive+0x430>
        }
        /* Two bytes */
        else if(hi2c->XferSize == 2U)
 8001c60:	68fb      	ldr	r3, [r7, #12]
 8001c62:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001c64:	2b02      	cmp	r3, #2
 8001c66:	d14a      	bne.n	8001cfe <HAL_I2C_Master_Receive+0x2c6>
        {
          /* Wait until BTF flag is set */
          if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8001c68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c6a:	9300      	str	r3, [sp, #0]
 8001c6c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001c6e:	2200      	movs	r2, #0
 8001c70:	4906      	ldr	r1, [pc, #24]	; (8001c8c <HAL_I2C_Master_Receive+0x254>)
 8001c72:	68f8      	ldr	r0, [r7, #12]
 8001c74:	f000 fa5c 	bl	8002130 <I2C_WaitOnFlagUntilTimeout>
 8001c78:	4603      	mov	r3, r0
 8001c7a:	2b00      	cmp	r3, #0
 8001c7c:	d008      	beq.n	8001c90 <HAL_I2C_Master_Receive+0x258>
          {
            return HAL_TIMEOUT;
 8001c7e:	2303      	movs	r3, #3
 8001c80:	e106      	b.n	8001e90 <HAL_I2C_Master_Receive+0x458>
 8001c82:	bf00      	nop
 8001c84:	00100002 	.word	0x00100002
 8001c88:	ffff0000 	.word	0xffff0000
 8001c8c:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          hi2c->Instance->CR1 |= I2C_CR1_STOP;
 8001c90:	68fb      	ldr	r3, [r7, #12]
 8001c92:	681b      	ldr	r3, [r3, #0]
 8001c94:	68fa      	ldr	r2, [r7, #12]
 8001c96:	6812      	ldr	r2, [r2, #0]
 8001c98:	6812      	ldr	r2, [r2, #0]
 8001c9a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001c9e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          (*hi2c->pBuffPtr++) = hi2c->Instance->DR;
 8001ca0:	68fb      	ldr	r3, [r7, #12]
 8001ca2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ca4:	1c59      	adds	r1, r3, #1
 8001ca6:	68fa      	ldr	r2, [r7, #12]
 8001ca8:	6251      	str	r1, [r2, #36]	; 0x24
 8001caa:	68fa      	ldr	r2, [r7, #12]
 8001cac:	6812      	ldr	r2, [r2, #0]
 8001cae:	6912      	ldr	r2, [r2, #16]
 8001cb0:	b2d2      	uxtb	r2, r2
 8001cb2:	701a      	strb	r2, [r3, #0]
          hi2c->XferSize--;
 8001cb4:	68fb      	ldr	r3, [r7, #12]
 8001cb6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001cb8:	3b01      	subs	r3, #1
 8001cba:	b29a      	uxth	r2, r3
 8001cbc:	68fb      	ldr	r3, [r7, #12]
 8001cbe:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8001cc0:	68fb      	ldr	r3, [r7, #12]
 8001cc2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001cc4:	b29b      	uxth	r3, r3
 8001cc6:	3b01      	subs	r3, #1
 8001cc8:	b29a      	uxth	r2, r3
 8001cca:	68fb      	ldr	r3, [r7, #12]
 8001ccc:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          (*hi2c->pBuffPtr++) = hi2c->Instance->DR;
 8001cce:	68fb      	ldr	r3, [r7, #12]
 8001cd0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001cd2:	1c59      	adds	r1, r3, #1
 8001cd4:	68fa      	ldr	r2, [r7, #12]
 8001cd6:	6251      	str	r1, [r2, #36]	; 0x24
 8001cd8:	68fa      	ldr	r2, [r7, #12]
 8001cda:	6812      	ldr	r2, [r2, #0]
 8001cdc:	6912      	ldr	r2, [r2, #16]
 8001cde:	b2d2      	uxtb	r2, r2
 8001ce0:	701a      	strb	r2, [r3, #0]
          hi2c->XferSize--;
 8001ce2:	68fb      	ldr	r3, [r7, #12]
 8001ce4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001ce6:	3b01      	subs	r3, #1
 8001ce8:	b29a      	uxth	r2, r3
 8001cea:	68fb      	ldr	r3, [r7, #12]
 8001cec:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8001cee:	68fb      	ldr	r3, [r7, #12]
 8001cf0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001cf2:	b29b      	uxth	r3, r3
 8001cf4:	3b01      	subs	r3, #1
 8001cf6:	b29a      	uxth	r2, r3
 8001cf8:	68fb      	ldr	r3, [r7, #12]
 8001cfa:	855a      	strh	r2, [r3, #42]	; 0x2a
 8001cfc:	e0b4      	b.n	8001e68 <HAL_I2C_Master_Receive+0x430>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8001cfe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d00:	9300      	str	r3, [sp, #0]
 8001d02:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001d04:	2200      	movs	r2, #0
 8001d06:	4964      	ldr	r1, [pc, #400]	; (8001e98 <HAL_I2C_Master_Receive+0x460>)
 8001d08:	68f8      	ldr	r0, [r7, #12]
 8001d0a:	f000 fa11 	bl	8002130 <I2C_WaitOnFlagUntilTimeout>
 8001d0e:	4603      	mov	r3, r0
 8001d10:	2b00      	cmp	r3, #0
 8001d12:	d001      	beq.n	8001d18 <HAL_I2C_Master_Receive+0x2e0>
          {
            return HAL_TIMEOUT;
 8001d14:	2303      	movs	r3, #3
 8001d16:	e0bb      	b.n	8001e90 <HAL_I2C_Master_Receive+0x458>
          }

          /* Disable Acknowledge */
          hi2c->Instance->CR1 &= ~I2C_CR1_ACK;
 8001d18:	68fb      	ldr	r3, [r7, #12]
 8001d1a:	681b      	ldr	r3, [r3, #0]
 8001d1c:	68fa      	ldr	r2, [r7, #12]
 8001d1e:	6812      	ldr	r2, [r2, #0]
 8001d20:	6812      	ldr	r2, [r2, #0]
 8001d22:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001d26:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          (*hi2c->pBuffPtr++) = hi2c->Instance->DR;
 8001d28:	68fb      	ldr	r3, [r7, #12]
 8001d2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d2c:	1c59      	adds	r1, r3, #1
 8001d2e:	68fa      	ldr	r2, [r7, #12]
 8001d30:	6251      	str	r1, [r2, #36]	; 0x24
 8001d32:	68fa      	ldr	r2, [r7, #12]
 8001d34:	6812      	ldr	r2, [r2, #0]
 8001d36:	6912      	ldr	r2, [r2, #16]
 8001d38:	b2d2      	uxtb	r2, r2
 8001d3a:	701a      	strb	r2, [r3, #0]
          hi2c->XferSize--;
 8001d3c:	68fb      	ldr	r3, [r7, #12]
 8001d3e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001d40:	3b01      	subs	r3, #1
 8001d42:	b29a      	uxth	r2, r3
 8001d44:	68fb      	ldr	r3, [r7, #12]
 8001d46:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8001d48:	68fb      	ldr	r3, [r7, #12]
 8001d4a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001d4c:	b29b      	uxth	r3, r3
 8001d4e:	3b01      	subs	r3, #1
 8001d50:	b29a      	uxth	r2, r3
 8001d52:	68fb      	ldr	r3, [r7, #12]
 8001d54:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8001d56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d58:	9300      	str	r3, [sp, #0]
 8001d5a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001d5c:	2200      	movs	r2, #0
 8001d5e:	494e      	ldr	r1, [pc, #312]	; (8001e98 <HAL_I2C_Master_Receive+0x460>)
 8001d60:	68f8      	ldr	r0, [r7, #12]
 8001d62:	f000 f9e5 	bl	8002130 <I2C_WaitOnFlagUntilTimeout>
 8001d66:	4603      	mov	r3, r0
 8001d68:	2b00      	cmp	r3, #0
 8001d6a:	d001      	beq.n	8001d70 <HAL_I2C_Master_Receive+0x338>
          {
            return HAL_TIMEOUT;
 8001d6c:	2303      	movs	r3, #3
 8001d6e:	e08f      	b.n	8001e90 <HAL_I2C_Master_Receive+0x458>
          }

          /* Generate Stop */
          hi2c->Instance->CR1 |= I2C_CR1_STOP;
 8001d70:	68fb      	ldr	r3, [r7, #12]
 8001d72:	681b      	ldr	r3, [r3, #0]
 8001d74:	68fa      	ldr	r2, [r7, #12]
 8001d76:	6812      	ldr	r2, [r2, #0]
 8001d78:	6812      	ldr	r2, [r2, #0]
 8001d7a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001d7e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          (*hi2c->pBuffPtr++) = hi2c->Instance->DR;
 8001d80:	68fb      	ldr	r3, [r7, #12]
 8001d82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d84:	1c59      	adds	r1, r3, #1
 8001d86:	68fa      	ldr	r2, [r7, #12]
 8001d88:	6251      	str	r1, [r2, #36]	; 0x24
 8001d8a:	68fa      	ldr	r2, [r7, #12]
 8001d8c:	6812      	ldr	r2, [r2, #0]
 8001d8e:	6912      	ldr	r2, [r2, #16]
 8001d90:	b2d2      	uxtb	r2, r2
 8001d92:	701a      	strb	r2, [r3, #0]
          hi2c->XferSize--;
 8001d94:	68fb      	ldr	r3, [r7, #12]
 8001d96:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001d98:	3b01      	subs	r3, #1
 8001d9a:	b29a      	uxth	r2, r3
 8001d9c:	68fb      	ldr	r3, [r7, #12]
 8001d9e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8001da0:	68fb      	ldr	r3, [r7, #12]
 8001da2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001da4:	b29b      	uxth	r3, r3
 8001da6:	3b01      	subs	r3, #1
 8001da8:	b29a      	uxth	r2, r3
 8001daa:	68fb      	ldr	r3, [r7, #12]
 8001dac:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          (*hi2c->pBuffPtr++) = hi2c->Instance->DR;
 8001dae:	68fb      	ldr	r3, [r7, #12]
 8001db0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001db2:	1c59      	adds	r1, r3, #1
 8001db4:	68fa      	ldr	r2, [r7, #12]
 8001db6:	6251      	str	r1, [r2, #36]	; 0x24
 8001db8:	68fa      	ldr	r2, [r7, #12]
 8001dba:	6812      	ldr	r2, [r2, #0]
 8001dbc:	6912      	ldr	r2, [r2, #16]
 8001dbe:	b2d2      	uxtb	r2, r2
 8001dc0:	701a      	strb	r2, [r3, #0]
          hi2c->XferSize--;
 8001dc2:	68fb      	ldr	r3, [r7, #12]
 8001dc4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001dc6:	3b01      	subs	r3, #1
 8001dc8:	b29a      	uxth	r2, r3
 8001dca:	68fb      	ldr	r3, [r7, #12]
 8001dcc:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8001dce:	68fb      	ldr	r3, [r7, #12]
 8001dd0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001dd2:	b29b      	uxth	r3, r3
 8001dd4:	3b01      	subs	r3, #1
 8001dd6:	b29a      	uxth	r2, r3
 8001dd8:	68fb      	ldr	r3, [r7, #12]
 8001dda:	855a      	strh	r2, [r3, #42]	; 0x2a
 8001ddc:	e044      	b.n	8001e68 <HAL_I2C_Master_Receive+0x430>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if(I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)      
 8001dde:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001de0:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8001de2:	68f8      	ldr	r0, [r7, #12]
 8001de4:	f000 fadd 	bl	80023a2 <I2C_WaitOnRXNEFlagUntilTimeout>
 8001de8:	4603      	mov	r3, r0
 8001dea:	2b00      	cmp	r3, #0
 8001dec:	d007      	beq.n	8001dfe <HAL_I2C_Master_Receive+0x3c6>
        {
          if(hi2c->ErrorCode == HAL_I2C_ERROR_TIMEOUT)
 8001dee:	68fb      	ldr	r3, [r7, #12]
 8001df0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001df2:	2b20      	cmp	r3, #32
 8001df4:	d101      	bne.n	8001dfa <HAL_I2C_Master_Receive+0x3c2>
          {
            return HAL_TIMEOUT;
 8001df6:	2303      	movs	r3, #3
 8001df8:	e04a      	b.n	8001e90 <HAL_I2C_Master_Receive+0x458>
          }
          else
          {
            return HAL_ERROR;
 8001dfa:	2301      	movs	r3, #1
 8001dfc:	e048      	b.n	8001e90 <HAL_I2C_Master_Receive+0x458>
          }
        }

        /* Read data from DR */
        (*hi2c->pBuffPtr++) = hi2c->Instance->DR;
 8001dfe:	68fb      	ldr	r3, [r7, #12]
 8001e00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e02:	1c59      	adds	r1, r3, #1
 8001e04:	68fa      	ldr	r2, [r7, #12]
 8001e06:	6251      	str	r1, [r2, #36]	; 0x24
 8001e08:	68fa      	ldr	r2, [r7, #12]
 8001e0a:	6812      	ldr	r2, [r2, #0]
 8001e0c:	6912      	ldr	r2, [r2, #16]
 8001e0e:	b2d2      	uxtb	r2, r2
 8001e10:	701a      	strb	r2, [r3, #0]
        hi2c->XferSize--;
 8001e12:	68fb      	ldr	r3, [r7, #12]
 8001e14:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001e16:	3b01      	subs	r3, #1
 8001e18:	b29a      	uxth	r2, r3
 8001e1a:	68fb      	ldr	r3, [r7, #12]
 8001e1c:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8001e1e:	68fb      	ldr	r3, [r7, #12]
 8001e20:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001e22:	b29b      	uxth	r3, r3
 8001e24:	3b01      	subs	r3, #1
 8001e26:	b29a      	uxth	r2, r3
 8001e28:	68fb      	ldr	r3, [r7, #12]
 8001e2a:	855a      	strh	r2, [r3, #42]	; 0x2a

        if(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8001e2c:	68fb      	ldr	r3, [r7, #12]
 8001e2e:	681b      	ldr	r3, [r3, #0]
 8001e30:	695b      	ldr	r3, [r3, #20]
 8001e32:	f003 0304 	and.w	r3, r3, #4
 8001e36:	2b04      	cmp	r3, #4
 8001e38:	d116      	bne.n	8001e68 <HAL_I2C_Master_Receive+0x430>
        {
          /* Read data from DR */
          (*hi2c->pBuffPtr++) = hi2c->Instance->DR;
 8001e3a:	68fb      	ldr	r3, [r7, #12]
 8001e3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e3e:	1c59      	adds	r1, r3, #1
 8001e40:	68fa      	ldr	r2, [r7, #12]
 8001e42:	6251      	str	r1, [r2, #36]	; 0x24
 8001e44:	68fa      	ldr	r2, [r7, #12]
 8001e46:	6812      	ldr	r2, [r2, #0]
 8001e48:	6912      	ldr	r2, [r2, #16]
 8001e4a:	b2d2      	uxtb	r2, r2
 8001e4c:	701a      	strb	r2, [r3, #0]
          hi2c->XferSize--;
 8001e4e:	68fb      	ldr	r3, [r7, #12]
 8001e50:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001e52:	3b01      	subs	r3, #1
 8001e54:	b29a      	uxth	r2, r3
 8001e56:	68fb      	ldr	r3, [r7, #12]
 8001e58:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8001e5a:	68fb      	ldr	r3, [r7, #12]
 8001e5c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001e5e:	b29b      	uxth	r3, r3
 8001e60:	3b01      	subs	r3, #1
 8001e62:	b29a      	uxth	r2, r3
 8001e64:	68fb      	ldr	r3, [r7, #12]
 8001e66:	855a      	strh	r2, [r3, #42]	; 0x2a
    while(hi2c->XferSize > 0U)
 8001e68:	68fb      	ldr	r3, [r7, #12]
 8001e6a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001e6c:	2b00      	cmp	r3, #0
 8001e6e:	f47f aec6 	bne.w	8001bfe <HAL_I2C_Master_Receive+0x1c6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8001e72:	68fb      	ldr	r3, [r7, #12]
 8001e74:	2220      	movs	r2, #32
 8001e76:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001e7a:	68fb      	ldr	r3, [r7, #12]
 8001e7c:	2200      	movs	r2, #0
 8001e7e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001e82:	68fb      	ldr	r3, [r7, #12]
 8001e84:	2200      	movs	r2, #0
 8001e86:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8001e8a:	2300      	movs	r3, #0
 8001e8c:	e000      	b.n	8001e90 <HAL_I2C_Master_Receive+0x458>
  }
  else
  {
    return HAL_BUSY;
 8001e8e:	2302      	movs	r3, #2
  }
}
 8001e90:	4618      	mov	r0, r3
 8001e92:	3728      	adds	r7, #40	; 0x28
 8001e94:	46bd      	mov	sp, r7
 8001e96:	bd80      	pop	{r7, pc}
 8001e98:	00010004 	.word	0x00010004

08001e9c <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8001e9c:	b580      	push	{r7, lr}
 8001e9e:	b088      	sub	sp, #32
 8001ea0:	af02      	add	r7, sp, #8
 8001ea2:	60f8      	str	r0, [r7, #12]
 8001ea4:	607a      	str	r2, [r7, #4]
 8001ea6:	603b      	str	r3, [r7, #0]
 8001ea8:	460b      	mov	r3, r1
 8001eaa:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8001eac:	68fb      	ldr	r3, [r7, #12]
 8001eae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001eb0:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8001eb2:	697b      	ldr	r3, [r7, #20]
 8001eb4:	2b04      	cmp	r3, #4
 8001eb6:	d006      	beq.n	8001ec6 <I2C_MasterRequestWrite+0x2a>
 8001eb8:	697b      	ldr	r3, [r7, #20]
 8001eba:	2b01      	cmp	r3, #1
 8001ebc:	d003      	beq.n	8001ec6 <I2C_MasterRequestWrite+0x2a>
 8001ebe:	697b      	ldr	r3, [r7, #20]
 8001ec0:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8001ec4:	d108      	bne.n	8001ed8 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    hi2c->Instance->CR1 |= I2C_CR1_START;
 8001ec6:	68fb      	ldr	r3, [r7, #12]
 8001ec8:	681b      	ldr	r3, [r3, #0]
 8001eca:	68fa      	ldr	r2, [r7, #12]
 8001ecc:	6812      	ldr	r2, [r2, #0]
 8001ece:	6812      	ldr	r2, [r2, #0]
 8001ed0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001ed4:	601a      	str	r2, [r3, #0]
 8001ed6:	e00b      	b.n	8001ef0 <I2C_MasterRequestWrite+0x54>
  }
  else if(hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8001ed8:	68fb      	ldr	r3, [r7, #12]
 8001eda:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001edc:	2b12      	cmp	r3, #18
 8001ede:	d107      	bne.n	8001ef0 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    hi2c->Instance->CR1 |= I2C_CR1_START;
 8001ee0:	68fb      	ldr	r3, [r7, #12]
 8001ee2:	681b      	ldr	r3, [r3, #0]
 8001ee4:	68fa      	ldr	r2, [r7, #12]
 8001ee6:	6812      	ldr	r2, [r2, #0]
 8001ee8:	6812      	ldr	r2, [r2, #0]
 8001eea:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001eee:	601a      	str	r2, [r3, #0]
  }

  /* Wait until SB flag is set */
  if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8001ef0:	683b      	ldr	r3, [r7, #0]
 8001ef2:	9300      	str	r3, [sp, #0]
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	2200      	movs	r2, #0
 8001ef8:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8001efc:	68f8      	ldr	r0, [r7, #12]
 8001efe:	f000 f917 	bl	8002130 <I2C_WaitOnFlagUntilTimeout>
 8001f02:	4603      	mov	r3, r0
 8001f04:	2b00      	cmp	r3, #0
 8001f06:	d001      	beq.n	8001f0c <I2C_MasterRequestWrite+0x70>
  {
    return HAL_TIMEOUT;
 8001f08:	2303      	movs	r3, #3
 8001f0a:	e040      	b.n	8001f8e <I2C_MasterRequestWrite+0xf2>
  }

  if(hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001f0c:	68fb      	ldr	r3, [r7, #12]
 8001f0e:	691b      	ldr	r3, [r3, #16]
 8001f10:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8001f14:	d107      	bne.n	8001f26 <I2C_MasterRequestWrite+0x8a>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8001f16:	68fb      	ldr	r3, [r7, #12]
 8001f18:	681b      	ldr	r3, [r3, #0]
 8001f1a:	897a      	ldrh	r2, [r7, #10]
 8001f1c:	b2d2      	uxtb	r2, r2
 8001f1e:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8001f22:	611a      	str	r2, [r3, #16]
 8001f24:	e021      	b.n	8001f6a <I2C_MasterRequestWrite+0xce>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8001f26:	68fb      	ldr	r3, [r7, #12]
 8001f28:	681b      	ldr	r3, [r3, #0]
 8001f2a:	897a      	ldrh	r2, [r7, #10]
 8001f2c:	11d2      	asrs	r2, r2, #7
 8001f2e:	b2d2      	uxtb	r2, r2
 8001f30:	f002 0206 	and.w	r2, r2, #6
 8001f34:	b2d2      	uxtb	r2, r2
 8001f36:	f062 020f 	orn	r2, r2, #15
 8001f3a:	b2d2      	uxtb	r2, r2
 8001f3c:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if(I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8001f3e:	683b      	ldr	r3, [r7, #0]
 8001f40:	687a      	ldr	r2, [r7, #4]
 8001f42:	4915      	ldr	r1, [pc, #84]	; (8001f98 <I2C_MasterRequestWrite+0xfc>)
 8001f44:	68f8      	ldr	r0, [r7, #12]
 8001f46:	f000 f944 	bl	80021d2 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8001f4a:	4603      	mov	r3, r0
 8001f4c:	2b00      	cmp	r3, #0
 8001f4e:	d007      	beq.n	8001f60 <I2C_MasterRequestWrite+0xc4>
    {
      if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001f50:	68fb      	ldr	r3, [r7, #12]
 8001f52:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f54:	2b04      	cmp	r3, #4
 8001f56:	d101      	bne.n	8001f5c <I2C_MasterRequestWrite+0xc0>
      {
        return HAL_ERROR;
 8001f58:	2301      	movs	r3, #1
 8001f5a:	e018      	b.n	8001f8e <I2C_MasterRequestWrite+0xf2>
      }
      else
      {
        return HAL_TIMEOUT;
 8001f5c:	2303      	movs	r3, #3
 8001f5e:	e016      	b.n	8001f8e <I2C_MasterRequestWrite+0xf2>
      }
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8001f60:	68fb      	ldr	r3, [r7, #12]
 8001f62:	681b      	ldr	r3, [r3, #0]
 8001f64:	897a      	ldrh	r2, [r7, #10]
 8001f66:	b2d2      	uxtb	r2, r2
 8001f68:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if(I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8001f6a:	683b      	ldr	r3, [r7, #0]
 8001f6c:	687a      	ldr	r2, [r7, #4]
 8001f6e:	490b      	ldr	r1, [pc, #44]	; (8001f9c <I2C_MasterRequestWrite+0x100>)
 8001f70:	68f8      	ldr	r0, [r7, #12]
 8001f72:	f000 f92e 	bl	80021d2 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8001f76:	4603      	mov	r3, r0
 8001f78:	2b00      	cmp	r3, #0
 8001f7a:	d007      	beq.n	8001f8c <I2C_MasterRequestWrite+0xf0>
  {
    if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001f7c:	68fb      	ldr	r3, [r7, #12]
 8001f7e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f80:	2b04      	cmp	r3, #4
 8001f82:	d101      	bne.n	8001f88 <I2C_MasterRequestWrite+0xec>
    {
      return HAL_ERROR;
 8001f84:	2301      	movs	r3, #1
 8001f86:	e002      	b.n	8001f8e <I2C_MasterRequestWrite+0xf2>
    }
    else
    {
      return HAL_TIMEOUT;
 8001f88:	2303      	movs	r3, #3
 8001f8a:	e000      	b.n	8001f8e <I2C_MasterRequestWrite+0xf2>
    }
  }

  return HAL_OK;
 8001f8c:	2300      	movs	r3, #0
}
 8001f8e:	4618      	mov	r0, r3
 8001f90:	3718      	adds	r7, #24
 8001f92:	46bd      	mov	sp, r7
 8001f94:	bd80      	pop	{r7, pc}
 8001f96:	bf00      	nop
 8001f98:	00010008 	.word	0x00010008
 8001f9c:	00010002 	.word	0x00010002

08001fa0 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8001fa0:	b580      	push	{r7, lr}
 8001fa2:	b088      	sub	sp, #32
 8001fa4:	af02      	add	r7, sp, #8
 8001fa6:	60f8      	str	r0, [r7, #12]
 8001fa8:	607a      	str	r2, [r7, #4]
 8001faa:	603b      	str	r3, [r7, #0]
 8001fac:	460b      	mov	r3, r1
 8001fae:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8001fb0:	68fb      	ldr	r3, [r7, #12]
 8001fb2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001fb4:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  hi2c->Instance->CR1 |= I2C_CR1_ACK;
 8001fb6:	68fb      	ldr	r3, [r7, #12]
 8001fb8:	681b      	ldr	r3, [r3, #0]
 8001fba:	68fa      	ldr	r2, [r7, #12]
 8001fbc:	6812      	ldr	r2, [r2, #0]
 8001fbe:	6812      	ldr	r2, [r2, #0]
 8001fc0:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8001fc4:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8001fc6:	697b      	ldr	r3, [r7, #20]
 8001fc8:	2b04      	cmp	r3, #4
 8001fca:	d006      	beq.n	8001fda <I2C_MasterRequestRead+0x3a>
 8001fcc:	697b      	ldr	r3, [r7, #20]
 8001fce:	2b01      	cmp	r3, #1
 8001fd0:	d003      	beq.n	8001fda <I2C_MasterRequestRead+0x3a>
 8001fd2:	697b      	ldr	r3, [r7, #20]
 8001fd4:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8001fd8:	d108      	bne.n	8001fec <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    hi2c->Instance->CR1 |= I2C_CR1_START;
 8001fda:	68fb      	ldr	r3, [r7, #12]
 8001fdc:	681b      	ldr	r3, [r3, #0]
 8001fde:	68fa      	ldr	r2, [r7, #12]
 8001fe0:	6812      	ldr	r2, [r2, #0]
 8001fe2:	6812      	ldr	r2, [r2, #0]
 8001fe4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001fe8:	601a      	str	r2, [r3, #0]
 8001fea:	e00b      	b.n	8002004 <I2C_MasterRequestRead+0x64>
  }
  else if(hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 8001fec:	68fb      	ldr	r3, [r7, #12]
 8001fee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ff0:	2b11      	cmp	r3, #17
 8001ff2:	d107      	bne.n	8002004 <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    hi2c->Instance->CR1 |= I2C_CR1_START;
 8001ff4:	68fb      	ldr	r3, [r7, #12]
 8001ff6:	681b      	ldr	r3, [r3, #0]
 8001ff8:	68fa      	ldr	r2, [r7, #12]
 8001ffa:	6812      	ldr	r2, [r2, #0]
 8001ffc:	6812      	ldr	r2, [r2, #0]
 8001ffe:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002002:	601a      	str	r2, [r3, #0]
  }

  /* Wait until SB flag is set */
  if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002004:	683b      	ldr	r3, [r7, #0]
 8002006:	9300      	str	r3, [sp, #0]
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	2200      	movs	r2, #0
 800200c:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002010:	68f8      	ldr	r0, [r7, #12]
 8002012:	f000 f88d 	bl	8002130 <I2C_WaitOnFlagUntilTimeout>
 8002016:	4603      	mov	r3, r0
 8002018:	2b00      	cmp	r3, #0
 800201a:	d001      	beq.n	8002020 <I2C_MasterRequestRead+0x80>
  {
    return HAL_TIMEOUT;
 800201c:	2303      	movs	r3, #3
 800201e:	e07f      	b.n	8002120 <I2C_MasterRequestRead+0x180>
  }

  if(hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002020:	68fb      	ldr	r3, [r7, #12]
 8002022:	691b      	ldr	r3, [r3, #16]
 8002024:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002028:	d108      	bne.n	800203c <I2C_MasterRequestRead+0x9c>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 800202a:	68fb      	ldr	r3, [r7, #12]
 800202c:	681b      	ldr	r3, [r3, #0]
 800202e:	897a      	ldrh	r2, [r7, #10]
 8002030:	b2d2      	uxtb	r2, r2
 8002032:	f042 0201 	orr.w	r2, r2, #1
 8002036:	b2d2      	uxtb	r2, r2
 8002038:	611a      	str	r2, [r3, #16]
 800203a:	e05f      	b.n	80020fc <I2C_MasterRequestRead+0x15c>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 800203c:	68fb      	ldr	r3, [r7, #12]
 800203e:	681b      	ldr	r3, [r3, #0]
 8002040:	897a      	ldrh	r2, [r7, #10]
 8002042:	11d2      	asrs	r2, r2, #7
 8002044:	b2d2      	uxtb	r2, r2
 8002046:	f002 0206 	and.w	r2, r2, #6
 800204a:	b2d2      	uxtb	r2, r2
 800204c:	f062 020f 	orn	r2, r2, #15
 8002050:	b2d2      	uxtb	r2, r2
 8002052:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if(I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8002054:	683b      	ldr	r3, [r7, #0]
 8002056:	687a      	ldr	r2, [r7, #4]
 8002058:	4933      	ldr	r1, [pc, #204]	; (8002128 <I2C_MasterRequestRead+0x188>)
 800205a:	68f8      	ldr	r0, [r7, #12]
 800205c:	f000 f8b9 	bl	80021d2 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002060:	4603      	mov	r3, r0
 8002062:	2b00      	cmp	r3, #0
 8002064:	d007      	beq.n	8002076 <I2C_MasterRequestRead+0xd6>
    {
      if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002066:	68fb      	ldr	r3, [r7, #12]
 8002068:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800206a:	2b04      	cmp	r3, #4
 800206c:	d101      	bne.n	8002072 <I2C_MasterRequestRead+0xd2>
      {
        return HAL_ERROR;
 800206e:	2301      	movs	r3, #1
 8002070:	e056      	b.n	8002120 <I2C_MasterRequestRead+0x180>
      }
      else
      {
        return HAL_TIMEOUT;
 8002072:	2303      	movs	r3, #3
 8002074:	e054      	b.n	8002120 <I2C_MasterRequestRead+0x180>
      }
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8002076:	68fb      	ldr	r3, [r7, #12]
 8002078:	681b      	ldr	r3, [r3, #0]
 800207a:	897a      	ldrh	r2, [r7, #10]
 800207c:	b2d2      	uxtb	r2, r2
 800207e:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if(I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002080:	683b      	ldr	r3, [r7, #0]
 8002082:	687a      	ldr	r2, [r7, #4]
 8002084:	4929      	ldr	r1, [pc, #164]	; (800212c <I2C_MasterRequestRead+0x18c>)
 8002086:	68f8      	ldr	r0, [r7, #12]
 8002088:	f000 f8a3 	bl	80021d2 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800208c:	4603      	mov	r3, r0
 800208e:	2b00      	cmp	r3, #0
 8002090:	d007      	beq.n	80020a2 <I2C_MasterRequestRead+0x102>
    {
      if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002092:	68fb      	ldr	r3, [r7, #12]
 8002094:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002096:	2b04      	cmp	r3, #4
 8002098:	d101      	bne.n	800209e <I2C_MasterRequestRead+0xfe>
      {
        return HAL_ERROR;
 800209a:	2301      	movs	r3, #1
 800209c:	e040      	b.n	8002120 <I2C_MasterRequestRead+0x180>
      }
      else
      {
        return HAL_TIMEOUT;
 800209e:	2303      	movs	r3, #3
 80020a0:	e03e      	b.n	8002120 <I2C_MasterRequestRead+0x180>
      }
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80020a2:	2300      	movs	r3, #0
 80020a4:	613b      	str	r3, [r7, #16]
 80020a6:	68fb      	ldr	r3, [r7, #12]
 80020a8:	681b      	ldr	r3, [r3, #0]
 80020aa:	695b      	ldr	r3, [r3, #20]
 80020ac:	613b      	str	r3, [r7, #16]
 80020ae:	68fb      	ldr	r3, [r7, #12]
 80020b0:	681b      	ldr	r3, [r3, #0]
 80020b2:	699b      	ldr	r3, [r3, #24]
 80020b4:	613b      	str	r3, [r7, #16]
 80020b6:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    hi2c->Instance->CR1 |= I2C_CR1_START;
 80020b8:	68fb      	ldr	r3, [r7, #12]
 80020ba:	681b      	ldr	r3, [r3, #0]
 80020bc:	68fa      	ldr	r2, [r7, #12]
 80020be:	6812      	ldr	r2, [r2, #0]
 80020c0:	6812      	ldr	r2, [r2, #0]
 80020c2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80020c6:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80020c8:	683b      	ldr	r3, [r7, #0]
 80020ca:	9300      	str	r3, [sp, #0]
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	2200      	movs	r2, #0
 80020d0:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80020d4:	68f8      	ldr	r0, [r7, #12]
 80020d6:	f000 f82b 	bl	8002130 <I2C_WaitOnFlagUntilTimeout>
 80020da:	4603      	mov	r3, r0
 80020dc:	2b00      	cmp	r3, #0
 80020de:	d001      	beq.n	80020e4 <I2C_MasterRequestRead+0x144>
    {
      return HAL_TIMEOUT;
 80020e0:	2303      	movs	r3, #3
 80020e2:	e01d      	b.n	8002120 <I2C_MasterRequestRead+0x180>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 80020e4:	68fb      	ldr	r3, [r7, #12]
 80020e6:	681b      	ldr	r3, [r3, #0]
 80020e8:	897a      	ldrh	r2, [r7, #10]
 80020ea:	11d2      	asrs	r2, r2, #7
 80020ec:	b2d2      	uxtb	r2, r2
 80020ee:	f002 0206 	and.w	r2, r2, #6
 80020f2:	b2d2      	uxtb	r2, r2
 80020f4:	f062 020e 	orn	r2, r2, #14
 80020f8:	b2d2      	uxtb	r2, r2
 80020fa:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if(I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80020fc:	683b      	ldr	r3, [r7, #0]
 80020fe:	687a      	ldr	r2, [r7, #4]
 8002100:	490a      	ldr	r1, [pc, #40]	; (800212c <I2C_MasterRequestRead+0x18c>)
 8002102:	68f8      	ldr	r0, [r7, #12]
 8002104:	f000 f865 	bl	80021d2 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002108:	4603      	mov	r3, r0
 800210a:	2b00      	cmp	r3, #0
 800210c:	d007      	beq.n	800211e <I2C_MasterRequestRead+0x17e>
  {
    if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800210e:	68fb      	ldr	r3, [r7, #12]
 8002110:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002112:	2b04      	cmp	r3, #4
 8002114:	d101      	bne.n	800211a <I2C_MasterRequestRead+0x17a>
    {
      return HAL_ERROR;
 8002116:	2301      	movs	r3, #1
 8002118:	e002      	b.n	8002120 <I2C_MasterRequestRead+0x180>
    }
    else
    {
      return HAL_TIMEOUT;
 800211a:	2303      	movs	r3, #3
 800211c:	e000      	b.n	8002120 <I2C_MasterRequestRead+0x180>
    }
  }

  return HAL_OK;
 800211e:	2300      	movs	r3, #0
}
 8002120:	4618      	mov	r0, r3
 8002122:	3718      	adds	r7, #24
 8002124:	46bd      	mov	sp, r7
 8002126:	bd80      	pop	{r7, pc}
 8002128:	00010008 	.word	0x00010008
 800212c:	00010002 	.word	0x00010002

08002130 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8002130:	b580      	push	{r7, lr}
 8002132:	b084      	sub	sp, #16
 8002134:	af00      	add	r7, sp, #0
 8002136:	60f8      	str	r0, [r7, #12]
 8002138:	60b9      	str	r1, [r7, #8]
 800213a:	603b      	str	r3, [r7, #0]
 800213c:	4613      	mov	r3, r2
 800213e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while((__HAL_I2C_GET_FLAG(hi2c, Flag) ? SET : RESET) == Status) 
 8002140:	e01f      	b.n	8002182 <I2C_WaitOnFlagUntilTimeout+0x52>
  {
    /* Check for the Timeout */
    if(Timeout != HAL_MAX_DELAY)
 8002142:	683b      	ldr	r3, [r7, #0]
 8002144:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002148:	d01b      	beq.n	8002182 <I2C_WaitOnFlagUntilTimeout+0x52>
    {
      if((Timeout == 0U)||((HAL_GetTick() - Tickstart ) > Timeout))
 800214a:	683b      	ldr	r3, [r7, #0]
 800214c:	2b00      	cmp	r3, #0
 800214e:	d007      	beq.n	8002160 <I2C_WaitOnFlagUntilTimeout+0x30>
 8002150:	f7fe ff8c 	bl	800106c <HAL_GetTick>
 8002154:	4602      	mov	r2, r0
 8002156:	69bb      	ldr	r3, [r7, #24]
 8002158:	1ad2      	subs	r2, r2, r3
 800215a:	683b      	ldr	r3, [r7, #0]
 800215c:	429a      	cmp	r2, r3
 800215e:	d910      	bls.n	8002182 <I2C_WaitOnFlagUntilTimeout+0x52>
      {
        hi2c->PreviousState = I2C_STATE_NONE;
 8002160:	68fb      	ldr	r3, [r7, #12]
 8002162:	2200      	movs	r2, #0
 8002164:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State= HAL_I2C_STATE_READY;
 8002166:	68fb      	ldr	r3, [r7, #12]
 8002168:	2220      	movs	r2, #32
 800216a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800216e:	68fb      	ldr	r3, [r7, #12]
 8002170:	2200      	movs	r2, #0
 8002172:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002176:	68fb      	ldr	r3, [r7, #12]
 8002178:	2200      	movs	r2, #0
 800217a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
        
        return HAL_TIMEOUT;
 800217e:	2303      	movs	r3, #3
 8002180:	e023      	b.n	80021ca <I2C_WaitOnFlagUntilTimeout+0x9a>
  while((__HAL_I2C_GET_FLAG(hi2c, Flag) ? SET : RESET) == Status) 
 8002182:	68bb      	ldr	r3, [r7, #8]
 8002184:	0c1b      	lsrs	r3, r3, #16
 8002186:	b2db      	uxtb	r3, r3
 8002188:	2b01      	cmp	r3, #1
 800218a:	d10d      	bne.n	80021a8 <I2C_WaitOnFlagUntilTimeout+0x78>
 800218c:	68fb      	ldr	r3, [r7, #12]
 800218e:	681b      	ldr	r3, [r3, #0]
 8002190:	695b      	ldr	r3, [r3, #20]
 8002192:	43da      	mvns	r2, r3
 8002194:	68bb      	ldr	r3, [r7, #8]
 8002196:	4013      	ands	r3, r2
 8002198:	b29b      	uxth	r3, r3
 800219a:	2b00      	cmp	r3, #0
 800219c:	bf0c      	ite	eq
 800219e:	2301      	moveq	r3, #1
 80021a0:	2300      	movne	r3, #0
 80021a2:	b2db      	uxtb	r3, r3
 80021a4:	461a      	mov	r2, r3
 80021a6:	e00c      	b.n	80021c2 <I2C_WaitOnFlagUntilTimeout+0x92>
 80021a8:	68fb      	ldr	r3, [r7, #12]
 80021aa:	681b      	ldr	r3, [r3, #0]
 80021ac:	699b      	ldr	r3, [r3, #24]
 80021ae:	43da      	mvns	r2, r3
 80021b0:	68bb      	ldr	r3, [r7, #8]
 80021b2:	4013      	ands	r3, r2
 80021b4:	b29b      	uxth	r3, r3
 80021b6:	2b00      	cmp	r3, #0
 80021b8:	bf0c      	ite	eq
 80021ba:	2301      	moveq	r3, #1
 80021bc:	2300      	movne	r3, #0
 80021be:	b2db      	uxtb	r3, r3
 80021c0:	461a      	mov	r2, r3
 80021c2:	79fb      	ldrb	r3, [r7, #7]
 80021c4:	429a      	cmp	r2, r3
 80021c6:	d0bc      	beq.n	8002142 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  
  return HAL_OK;
 80021c8:	2300      	movs	r3, #0
}
 80021ca:	4618      	mov	r0, r3
 80021cc:	3710      	adds	r7, #16
 80021ce:	46bd      	mov	sp, r7
 80021d0:	bd80      	pop	{r7, pc}

080021d2 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80021d2:	b580      	push	{r7, lr}
 80021d4:	b084      	sub	sp, #16
 80021d6:	af00      	add	r7, sp, #0
 80021d8:	60f8      	str	r0, [r7, #12]
 80021da:	60b9      	str	r1, [r7, #8]
 80021dc:	607a      	str	r2, [r7, #4]
 80021de:	603b      	str	r3, [r7, #0]
  while(__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80021e0:	e040      	b.n	8002264 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x92>
  {
    if(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80021e2:	68fb      	ldr	r3, [r7, #12]
 80021e4:	681b      	ldr	r3, [r3, #0]
 80021e6:	695b      	ldr	r3, [r3, #20]
 80021e8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80021ec:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80021f0:	d11c      	bne.n	800222c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x5a>
    {
      /* Generate Stop */
      hi2c->Instance->CR1 |= I2C_CR1_STOP;
 80021f2:	68fb      	ldr	r3, [r7, #12]
 80021f4:	681b      	ldr	r3, [r3, #0]
 80021f6:	68fa      	ldr	r2, [r7, #12]
 80021f8:	6812      	ldr	r2, [r2, #0]
 80021fa:	6812      	ldr	r2, [r2, #0]
 80021fc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002200:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002202:	68fb      	ldr	r3, [r7, #12]
 8002204:	681b      	ldr	r3, [r3, #0]
 8002206:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800220a:	615a      	str	r2, [r3, #20]

      hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 800220c:	68fb      	ldr	r3, [r7, #12]
 800220e:	2204      	movs	r2, #4
 8002210:	641a      	str	r2, [r3, #64]	; 0x40
      hi2c->PreviousState = I2C_STATE_NONE;
 8002212:	68fb      	ldr	r3, [r7, #12]
 8002214:	2200      	movs	r2, #0
 8002216:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State= HAL_I2C_STATE_READY;
 8002218:	68fb      	ldr	r3, [r7, #12]
 800221a:	2220      	movs	r2, #32
 800221c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002220:	68fb      	ldr	r3, [r7, #12]
 8002222:	2200      	movs	r2, #0
 8002224:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8002228:	2301      	movs	r3, #1
 800222a:	e03c      	b.n	80022a6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd4>
    }

    /* Check for the Timeout */
    if(Timeout != HAL_MAX_DELAY)
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002232:	d017      	beq.n	8002264 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x92>
    {
      if((Timeout == 0U)||((HAL_GetTick() - Tickstart ) > Timeout))
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	2b00      	cmp	r3, #0
 8002238:	d007      	beq.n	800224a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x78>
 800223a:	f7fe ff17 	bl	800106c <HAL_GetTick>
 800223e:	4602      	mov	r2, r0
 8002240:	683b      	ldr	r3, [r7, #0]
 8002242:	1ad2      	subs	r2, r2, r3
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	429a      	cmp	r2, r3
 8002248:	d90c      	bls.n	8002264 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x92>
      {
        hi2c->PreviousState = I2C_STATE_NONE;
 800224a:	68fb      	ldr	r3, [r7, #12]
 800224c:	2200      	movs	r2, #0
 800224e:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State= HAL_I2C_STATE_READY;
 8002250:	68fb      	ldr	r3, [r7, #12]
 8002252:	2220      	movs	r2, #32
 8002254:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002258:	68fb      	ldr	r3, [r7, #12]
 800225a:	2200      	movs	r2, #0
 800225c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8002260:	2303      	movs	r3, #3
 8002262:	e020      	b.n	80022a6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd4>
  while(__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002264:	68bb      	ldr	r3, [r7, #8]
 8002266:	0c1b      	lsrs	r3, r3, #16
 8002268:	b2db      	uxtb	r3, r3
 800226a:	2b01      	cmp	r3, #1
 800226c:	d10c      	bne.n	8002288 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb6>
 800226e:	68fb      	ldr	r3, [r7, #12]
 8002270:	681b      	ldr	r3, [r3, #0]
 8002272:	695b      	ldr	r3, [r3, #20]
 8002274:	43da      	mvns	r2, r3
 8002276:	68bb      	ldr	r3, [r7, #8]
 8002278:	4013      	ands	r3, r2
 800227a:	b29b      	uxth	r3, r3
 800227c:	2b00      	cmp	r3, #0
 800227e:	bf14      	ite	ne
 8002280:	2301      	movne	r3, #1
 8002282:	2300      	moveq	r3, #0
 8002284:	b2db      	uxtb	r3, r3
 8002286:	e00b      	b.n	80022a0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xce>
 8002288:	68fb      	ldr	r3, [r7, #12]
 800228a:	681b      	ldr	r3, [r3, #0]
 800228c:	699b      	ldr	r3, [r3, #24]
 800228e:	43da      	mvns	r2, r3
 8002290:	68bb      	ldr	r3, [r7, #8]
 8002292:	4013      	ands	r3, r2
 8002294:	b29b      	uxth	r3, r3
 8002296:	2b00      	cmp	r3, #0
 8002298:	bf14      	ite	ne
 800229a:	2301      	movne	r3, #1
 800229c:	2300      	moveq	r3, #0
 800229e:	b2db      	uxtb	r3, r3
 80022a0:	2b00      	cmp	r3, #0
 80022a2:	d19e      	bne.n	80021e2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 80022a4:	2300      	movs	r3, #0
}
 80022a6:	4618      	mov	r0, r3
 80022a8:	3710      	adds	r7, #16
 80022aa:	46bd      	mov	sp, r7
 80022ac:	bd80      	pop	{r7, pc}

080022ae <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{    
 80022ae:	b580      	push	{r7, lr}
 80022b0:	b084      	sub	sp, #16
 80022b2:	af00      	add	r7, sp, #0
 80022b4:	60f8      	str	r0, [r7, #12]
 80022b6:	60b9      	str	r1, [r7, #8]
 80022b8:	607a      	str	r2, [r7, #4]
  while(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80022ba:	e029      	b.n	8002310 <I2C_WaitOnTXEFlagUntilTimeout+0x62>
  {
    /* Check if a NACK is detected */
    if(I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80022bc:	68f8      	ldr	r0, [r7, #12]
 80022be:	f000 f8ba 	bl	8002436 <I2C_IsAcknowledgeFailed>
 80022c2:	4603      	mov	r3, r0
 80022c4:	2b00      	cmp	r3, #0
 80022c6:	d001      	beq.n	80022cc <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80022c8:	2301      	movs	r3, #1
 80022ca:	e029      	b.n	8002320 <I2C_WaitOnTXEFlagUntilTimeout+0x72>
    }
		
    /* Check for the Timeout */
    if(Timeout != HAL_MAX_DELAY)
 80022cc:	68bb      	ldr	r3, [r7, #8]
 80022ce:	f1b3 3fff 	cmp.w	r3, #4294967295
 80022d2:	d01d      	beq.n	8002310 <I2C_WaitOnTXEFlagUntilTimeout+0x62>
    {
      if((Timeout == 0U) || ((HAL_GetTick()-Tickstart) > Timeout))
 80022d4:	68bb      	ldr	r3, [r7, #8]
 80022d6:	2b00      	cmp	r3, #0
 80022d8:	d007      	beq.n	80022ea <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80022da:	f7fe fec7 	bl	800106c <HAL_GetTick>
 80022de:	4602      	mov	r2, r0
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	1ad2      	subs	r2, r2, r3
 80022e4:	68bb      	ldr	r3, [r7, #8]
 80022e6:	429a      	cmp	r2, r3
 80022e8:	d912      	bls.n	8002310 <I2C_WaitOnTXEFlagUntilTimeout+0x62>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80022ea:	68fb      	ldr	r3, [r7, #12]
 80022ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022ee:	f043 0220 	orr.w	r2, r3, #32
 80022f2:	68fb      	ldr	r3, [r7, #12]
 80022f4:	641a      	str	r2, [r3, #64]	; 0x40
        hi2c->PreviousState = I2C_STATE_NONE;
 80022f6:	68fb      	ldr	r3, [r7, #12]
 80022f8:	2200      	movs	r2, #0
 80022fa:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State= HAL_I2C_STATE_READY;
 80022fc:	68fb      	ldr	r3, [r7, #12]
 80022fe:	2220      	movs	r2, #32
 8002300:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002304:	68fb      	ldr	r3, [r7, #12]
 8002306:	2200      	movs	r2, #0
 8002308:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 800230c:	2303      	movs	r3, #3
 800230e:	e007      	b.n	8002320 <I2C_WaitOnTXEFlagUntilTimeout+0x72>
  while(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002310:	68fb      	ldr	r3, [r7, #12]
 8002312:	681b      	ldr	r3, [r3, #0]
 8002314:	695b      	ldr	r3, [r3, #20]
 8002316:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800231a:	2b80      	cmp	r3, #128	; 0x80
 800231c:	d1ce      	bne.n	80022bc <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;      
 800231e:	2300      	movs	r3, #0
}
 8002320:	4618      	mov	r0, r3
 8002322:	3710      	adds	r7, #16
 8002324:	46bd      	mov	sp, r7
 8002326:	bd80      	pop	{r7, pc}

08002328 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{  
 8002328:	b580      	push	{r7, lr}
 800232a:	b084      	sub	sp, #16
 800232c:	af00      	add	r7, sp, #0
 800232e:	60f8      	str	r0, [r7, #12]
 8002330:	60b9      	str	r1, [r7, #8]
 8002332:	607a      	str	r2, [r7, #4]
  while(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002334:	e029      	b.n	800238a <I2C_WaitOnBTFFlagUntilTimeout+0x62>
  {
    /* Check if a NACK is detected */
    if(I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002336:	68f8      	ldr	r0, [r7, #12]
 8002338:	f000 f87d 	bl	8002436 <I2C_IsAcknowledgeFailed>
 800233c:	4603      	mov	r3, r0
 800233e:	2b00      	cmp	r3, #0
 8002340:	d001      	beq.n	8002346 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002342:	2301      	movs	r3, #1
 8002344:	e029      	b.n	800239a <I2C_WaitOnBTFFlagUntilTimeout+0x72>
    }

    /* Check for the Timeout */
    if(Timeout != HAL_MAX_DELAY)
 8002346:	68bb      	ldr	r3, [r7, #8]
 8002348:	f1b3 3fff 	cmp.w	r3, #4294967295
 800234c:	d01d      	beq.n	800238a <I2C_WaitOnBTFFlagUntilTimeout+0x62>
    {
      if((Timeout == 0U) || ((HAL_GetTick()-Tickstart) > Timeout))
 800234e:	68bb      	ldr	r3, [r7, #8]
 8002350:	2b00      	cmp	r3, #0
 8002352:	d007      	beq.n	8002364 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8002354:	f7fe fe8a 	bl	800106c <HAL_GetTick>
 8002358:	4602      	mov	r2, r0
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	1ad2      	subs	r2, r2, r3
 800235e:	68bb      	ldr	r3, [r7, #8]
 8002360:	429a      	cmp	r2, r3
 8002362:	d912      	bls.n	800238a <I2C_WaitOnBTFFlagUntilTimeout+0x62>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002364:	68fb      	ldr	r3, [r7, #12]
 8002366:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002368:	f043 0220 	orr.w	r2, r3, #32
 800236c:	68fb      	ldr	r3, [r7, #12]
 800236e:	641a      	str	r2, [r3, #64]	; 0x40
        hi2c->PreviousState = I2C_STATE_NONE;
 8002370:	68fb      	ldr	r3, [r7, #12]
 8002372:	2200      	movs	r2, #0
 8002374:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State= HAL_I2C_STATE_READY;
 8002376:	68fb      	ldr	r3, [r7, #12]
 8002378:	2220      	movs	r2, #32
 800237a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800237e:	68fb      	ldr	r3, [r7, #12]
 8002380:	2200      	movs	r2, #0
 8002382:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8002386:	2303      	movs	r3, #3
 8002388:	e007      	b.n	800239a <I2C_WaitOnBTFFlagUntilTimeout+0x72>
  while(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800238a:	68fb      	ldr	r3, [r7, #12]
 800238c:	681b      	ldr	r3, [r3, #0]
 800238e:	695b      	ldr	r3, [r3, #20]
 8002390:	f003 0304 	and.w	r3, r3, #4
 8002394:	2b04      	cmp	r3, #4
 8002396:	d1ce      	bne.n	8002336 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002398:	2300      	movs	r3, #0
}
 800239a:	4618      	mov	r0, r3
 800239c:	3710      	adds	r7, #16
 800239e:	46bd      	mov	sp, r7
 80023a0:	bd80      	pop	{r7, pc}

080023a2 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{  
 80023a2:	b580      	push	{r7, lr}
 80023a4:	b084      	sub	sp, #16
 80023a6:	af00      	add	r7, sp, #0
 80023a8:	60f8      	str	r0, [r7, #12]
 80023aa:	60b9      	str	r1, [r7, #8]
 80023ac:	607a      	str	r2, [r7, #4]

  while(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80023ae:	e036      	b.n	800241e <I2C_WaitOnRXNEFlagUntilTimeout+0x7c>
  {
    /* Check if a STOPF is detected */
    if(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80023b0:	68fb      	ldr	r3, [r7, #12]
 80023b2:	681b      	ldr	r3, [r3, #0]
 80023b4:	695b      	ldr	r3, [r3, #20]
 80023b6:	f003 0310 	and.w	r3, r3, #16
 80023ba:	2b10      	cmp	r3, #16
 80023bc:	d114      	bne.n	80023e8 <I2C_WaitOnRXNEFlagUntilTimeout+0x46>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80023be:	68fb      	ldr	r3, [r7, #12]
 80023c0:	681b      	ldr	r3, [r3, #0]
 80023c2:	f06f 0210 	mvn.w	r2, #16
 80023c6:	615a      	str	r2, [r3, #20]

      hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80023c8:	68fb      	ldr	r3, [r7, #12]
 80023ca:	2200      	movs	r2, #0
 80023cc:	641a      	str	r2, [r3, #64]	; 0x40
      hi2c->PreviousState = I2C_STATE_NONE;
 80023ce:	68fb      	ldr	r3, [r7, #12]
 80023d0:	2200      	movs	r2, #0
 80023d2:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State= HAL_I2C_STATE_READY;
 80023d4:	68fb      	ldr	r3, [r7, #12]
 80023d6:	2220      	movs	r2, #32
 80023d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80023dc:	68fb      	ldr	r3, [r7, #12]
 80023de:	2200      	movs	r2, #0
 80023e0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80023e4:	2301      	movs	r3, #1
 80023e6:	e022      	b.n	800242e <I2C_WaitOnRXNEFlagUntilTimeout+0x8c>
    }

    /* Check for the Timeout */
    if((Timeout == 0U) || ((HAL_GetTick()-Tickstart) > Timeout))
 80023e8:	68bb      	ldr	r3, [r7, #8]
 80023ea:	2b00      	cmp	r3, #0
 80023ec:	d007      	beq.n	80023fe <I2C_WaitOnRXNEFlagUntilTimeout+0x5c>
 80023ee:	f7fe fe3d 	bl	800106c <HAL_GetTick>
 80023f2:	4602      	mov	r2, r0
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	1ad2      	subs	r2, r2, r3
 80023f8:	68bb      	ldr	r3, [r7, #8]
 80023fa:	429a      	cmp	r2, r3
 80023fc:	d90f      	bls.n	800241e <I2C_WaitOnRXNEFlagUntilTimeout+0x7c>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80023fe:	68fb      	ldr	r3, [r7, #12]
 8002400:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002402:	f043 0220 	orr.w	r2, r3, #32
 8002406:	68fb      	ldr	r3, [r7, #12]
 8002408:	641a      	str	r2, [r3, #64]	; 0x40
      hi2c->State= HAL_I2C_STATE_READY;
 800240a:	68fb      	ldr	r3, [r7, #12]
 800240c:	2220      	movs	r2, #32
 800240e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002412:	68fb      	ldr	r3, [r7, #12]
 8002414:	2200      	movs	r2, #0
 8002416:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_TIMEOUT;
 800241a:	2303      	movs	r3, #3
 800241c:	e007      	b.n	800242e <I2C_WaitOnRXNEFlagUntilTimeout+0x8c>
  while(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800241e:	68fb      	ldr	r3, [r7, #12]
 8002420:	681b      	ldr	r3, [r3, #0]
 8002422:	695b      	ldr	r3, [r3, #20]
 8002424:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002428:	2b40      	cmp	r3, #64	; 0x40
 800242a:	d1c1      	bne.n	80023b0 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 800242c:	2300      	movs	r3, #0
}
 800242e:	4618      	mov	r0, r3
 8002430:	3710      	adds	r7, #16
 8002432:	46bd      	mov	sp, r7
 8002434:	bd80      	pop	{r7, pc}

08002436 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8002436:	b480      	push	{r7}
 8002438:	b083      	sub	sp, #12
 800243a:	af00      	add	r7, sp, #0
 800243c:	6078      	str	r0, [r7, #4]
  if(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	681b      	ldr	r3, [r3, #0]
 8002442:	695b      	ldr	r3, [r3, #20]
 8002444:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002448:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800244c:	d114      	bne.n	8002478 <I2C_IsAcknowledgeFailed+0x42>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	681b      	ldr	r3, [r3, #0]
 8002452:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002456:	615a      	str	r2, [r3, #20]

    hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	2204      	movs	r2, #4
 800245c:	641a      	str	r2, [r3, #64]	; 0x40
    hi2c->PreviousState = I2C_STATE_NONE;
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	2200      	movs	r2, #0
 8002462:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State= HAL_I2C_STATE_READY;
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	2220      	movs	r2, #32
 8002468:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	2200      	movs	r2, #0
 8002470:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8002474:	2301      	movs	r3, #1
 8002476:	e000      	b.n	800247a <I2C_IsAcknowledgeFailed+0x44>
  }
  return HAL_OK;
 8002478:	2300      	movs	r3, #0
}
 800247a:	4618      	mov	r0, r3
 800247c:	370c      	adds	r7, #12
 800247e:	46bd      	mov	sp, r7
 8002480:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002484:	4770      	bx	lr
	...

08002488 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002488:	b580      	push	{r7, lr}
 800248a:	b086      	sub	sp, #24
 800248c:	af00      	add	r7, sp, #0
 800248e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	2b00      	cmp	r3, #0
 8002494:	d101      	bne.n	800249a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002496:	2301      	movs	r3, #1
 8002498:	e22d      	b.n	80028f6 <HAL_RCC_OscConfig+0x46e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	681b      	ldr	r3, [r3, #0]
 800249e:	f003 0301 	and.w	r3, r3, #1
 80024a2:	2b00      	cmp	r3, #0
 80024a4:	d075      	beq.n	8002592 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80024a6:	4ba3      	ldr	r3, [pc, #652]	; (8002734 <HAL_RCC_OscConfig+0x2ac>)
 80024a8:	689b      	ldr	r3, [r3, #8]
 80024aa:	f003 030c 	and.w	r3, r3, #12
 80024ae:	2b04      	cmp	r3, #4
 80024b0:	d00c      	beq.n	80024cc <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80024b2:	4ba0      	ldr	r3, [pc, #640]	; (8002734 <HAL_RCC_OscConfig+0x2ac>)
 80024b4:	689b      	ldr	r3, [r3, #8]
 80024b6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80024ba:	2b08      	cmp	r3, #8
 80024bc:	d112      	bne.n	80024e4 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80024be:	4b9d      	ldr	r3, [pc, #628]	; (8002734 <HAL_RCC_OscConfig+0x2ac>)
 80024c0:	685b      	ldr	r3, [r3, #4]
 80024c2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80024c6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80024ca:	d10b      	bne.n	80024e4 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80024cc:	4b99      	ldr	r3, [pc, #612]	; (8002734 <HAL_RCC_OscConfig+0x2ac>)
 80024ce:	681b      	ldr	r3, [r3, #0]
 80024d0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80024d4:	2b00      	cmp	r3, #0
 80024d6:	d05b      	beq.n	8002590 <HAL_RCC_OscConfig+0x108>
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	685b      	ldr	r3, [r3, #4]
 80024dc:	2b00      	cmp	r3, #0
 80024de:	d157      	bne.n	8002590 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80024e0:	2301      	movs	r3, #1
 80024e2:	e208      	b.n	80028f6 <HAL_RCC_OscConfig+0x46e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	685b      	ldr	r3, [r3, #4]
 80024e8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80024ec:	d106      	bne.n	80024fc <HAL_RCC_OscConfig+0x74>
 80024ee:	4a91      	ldr	r2, [pc, #580]	; (8002734 <HAL_RCC_OscConfig+0x2ac>)
 80024f0:	4b90      	ldr	r3, [pc, #576]	; (8002734 <HAL_RCC_OscConfig+0x2ac>)
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80024f8:	6013      	str	r3, [r2, #0]
 80024fa:	e01d      	b.n	8002538 <HAL_RCC_OscConfig+0xb0>
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	685b      	ldr	r3, [r3, #4]
 8002500:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002504:	d10c      	bne.n	8002520 <HAL_RCC_OscConfig+0x98>
 8002506:	4a8b      	ldr	r2, [pc, #556]	; (8002734 <HAL_RCC_OscConfig+0x2ac>)
 8002508:	4b8a      	ldr	r3, [pc, #552]	; (8002734 <HAL_RCC_OscConfig+0x2ac>)
 800250a:	681b      	ldr	r3, [r3, #0]
 800250c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002510:	6013      	str	r3, [r2, #0]
 8002512:	4a88      	ldr	r2, [pc, #544]	; (8002734 <HAL_RCC_OscConfig+0x2ac>)
 8002514:	4b87      	ldr	r3, [pc, #540]	; (8002734 <HAL_RCC_OscConfig+0x2ac>)
 8002516:	681b      	ldr	r3, [r3, #0]
 8002518:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800251c:	6013      	str	r3, [r2, #0]
 800251e:	e00b      	b.n	8002538 <HAL_RCC_OscConfig+0xb0>
 8002520:	4a84      	ldr	r2, [pc, #528]	; (8002734 <HAL_RCC_OscConfig+0x2ac>)
 8002522:	4b84      	ldr	r3, [pc, #528]	; (8002734 <HAL_RCC_OscConfig+0x2ac>)
 8002524:	681b      	ldr	r3, [r3, #0]
 8002526:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800252a:	6013      	str	r3, [r2, #0]
 800252c:	4a81      	ldr	r2, [pc, #516]	; (8002734 <HAL_RCC_OscConfig+0x2ac>)
 800252e:	4b81      	ldr	r3, [pc, #516]	; (8002734 <HAL_RCC_OscConfig+0x2ac>)
 8002530:	681b      	ldr	r3, [r3, #0]
 8002532:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002536:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	685b      	ldr	r3, [r3, #4]
 800253c:	2b00      	cmp	r3, #0
 800253e:	d013      	beq.n	8002568 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002540:	f7fe fd94 	bl	800106c <HAL_GetTick>
 8002544:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002546:	e008      	b.n	800255a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002548:	f7fe fd90 	bl	800106c <HAL_GetTick>
 800254c:	4602      	mov	r2, r0
 800254e:	693b      	ldr	r3, [r7, #16]
 8002550:	1ad3      	subs	r3, r2, r3
 8002552:	2b64      	cmp	r3, #100	; 0x64
 8002554:	d901      	bls.n	800255a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002556:	2303      	movs	r3, #3
 8002558:	e1cd      	b.n	80028f6 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800255a:	4b76      	ldr	r3, [pc, #472]	; (8002734 <HAL_RCC_OscConfig+0x2ac>)
 800255c:	681b      	ldr	r3, [r3, #0]
 800255e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002562:	2b00      	cmp	r3, #0
 8002564:	d0f0      	beq.n	8002548 <HAL_RCC_OscConfig+0xc0>
 8002566:	e014      	b.n	8002592 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002568:	f7fe fd80 	bl	800106c <HAL_GetTick>
 800256c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800256e:	e008      	b.n	8002582 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002570:	f7fe fd7c 	bl	800106c <HAL_GetTick>
 8002574:	4602      	mov	r2, r0
 8002576:	693b      	ldr	r3, [r7, #16]
 8002578:	1ad3      	subs	r3, r2, r3
 800257a:	2b64      	cmp	r3, #100	; 0x64
 800257c:	d901      	bls.n	8002582 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800257e:	2303      	movs	r3, #3
 8002580:	e1b9      	b.n	80028f6 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002582:	4b6c      	ldr	r3, [pc, #432]	; (8002734 <HAL_RCC_OscConfig+0x2ac>)
 8002584:	681b      	ldr	r3, [r3, #0]
 8002586:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800258a:	2b00      	cmp	r3, #0
 800258c:	d1f0      	bne.n	8002570 <HAL_RCC_OscConfig+0xe8>
 800258e:	e000      	b.n	8002592 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002590:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	681b      	ldr	r3, [r3, #0]
 8002596:	f003 0302 	and.w	r3, r3, #2
 800259a:	2b00      	cmp	r3, #0
 800259c:	d063      	beq.n	8002666 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800259e:	4b65      	ldr	r3, [pc, #404]	; (8002734 <HAL_RCC_OscConfig+0x2ac>)
 80025a0:	689b      	ldr	r3, [r3, #8]
 80025a2:	f003 030c 	and.w	r3, r3, #12
 80025a6:	2b00      	cmp	r3, #0
 80025a8:	d00b      	beq.n	80025c2 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80025aa:	4b62      	ldr	r3, [pc, #392]	; (8002734 <HAL_RCC_OscConfig+0x2ac>)
 80025ac:	689b      	ldr	r3, [r3, #8]
 80025ae:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80025b2:	2b08      	cmp	r3, #8
 80025b4:	d11c      	bne.n	80025f0 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80025b6:	4b5f      	ldr	r3, [pc, #380]	; (8002734 <HAL_RCC_OscConfig+0x2ac>)
 80025b8:	685b      	ldr	r3, [r3, #4]
 80025ba:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80025be:	2b00      	cmp	r3, #0
 80025c0:	d116      	bne.n	80025f0 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80025c2:	4b5c      	ldr	r3, [pc, #368]	; (8002734 <HAL_RCC_OscConfig+0x2ac>)
 80025c4:	681b      	ldr	r3, [r3, #0]
 80025c6:	f003 0302 	and.w	r3, r3, #2
 80025ca:	2b00      	cmp	r3, #0
 80025cc:	d005      	beq.n	80025da <HAL_RCC_OscConfig+0x152>
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	68db      	ldr	r3, [r3, #12]
 80025d2:	2b01      	cmp	r3, #1
 80025d4:	d001      	beq.n	80025da <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80025d6:	2301      	movs	r3, #1
 80025d8:	e18d      	b.n	80028f6 <HAL_RCC_OscConfig+0x46e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80025da:	4956      	ldr	r1, [pc, #344]	; (8002734 <HAL_RCC_OscConfig+0x2ac>)
 80025dc:	4b55      	ldr	r3, [pc, #340]	; (8002734 <HAL_RCC_OscConfig+0x2ac>)
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	691b      	ldr	r3, [r3, #16]
 80025e8:	00db      	lsls	r3, r3, #3
 80025ea:	4313      	orrs	r3, r2
 80025ec:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80025ee:	e03a      	b.n	8002666 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	68db      	ldr	r3, [r3, #12]
 80025f4:	2b00      	cmp	r3, #0
 80025f6:	d020      	beq.n	800263a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80025f8:	4b4f      	ldr	r3, [pc, #316]	; (8002738 <HAL_RCC_OscConfig+0x2b0>)
 80025fa:	2201      	movs	r2, #1
 80025fc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80025fe:	f7fe fd35 	bl	800106c <HAL_GetTick>
 8002602:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002604:	e008      	b.n	8002618 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002606:	f7fe fd31 	bl	800106c <HAL_GetTick>
 800260a:	4602      	mov	r2, r0
 800260c:	693b      	ldr	r3, [r7, #16]
 800260e:	1ad3      	subs	r3, r2, r3
 8002610:	2b02      	cmp	r3, #2
 8002612:	d901      	bls.n	8002618 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002614:	2303      	movs	r3, #3
 8002616:	e16e      	b.n	80028f6 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002618:	4b46      	ldr	r3, [pc, #280]	; (8002734 <HAL_RCC_OscConfig+0x2ac>)
 800261a:	681b      	ldr	r3, [r3, #0]
 800261c:	f003 0302 	and.w	r3, r3, #2
 8002620:	2b00      	cmp	r3, #0
 8002622:	d0f0      	beq.n	8002606 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002624:	4943      	ldr	r1, [pc, #268]	; (8002734 <HAL_RCC_OscConfig+0x2ac>)
 8002626:	4b43      	ldr	r3, [pc, #268]	; (8002734 <HAL_RCC_OscConfig+0x2ac>)
 8002628:	681b      	ldr	r3, [r3, #0]
 800262a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	691b      	ldr	r3, [r3, #16]
 8002632:	00db      	lsls	r3, r3, #3
 8002634:	4313      	orrs	r3, r2
 8002636:	600b      	str	r3, [r1, #0]
 8002638:	e015      	b.n	8002666 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800263a:	4b3f      	ldr	r3, [pc, #252]	; (8002738 <HAL_RCC_OscConfig+0x2b0>)
 800263c:	2200      	movs	r2, #0
 800263e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002640:	f7fe fd14 	bl	800106c <HAL_GetTick>
 8002644:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002646:	e008      	b.n	800265a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002648:	f7fe fd10 	bl	800106c <HAL_GetTick>
 800264c:	4602      	mov	r2, r0
 800264e:	693b      	ldr	r3, [r7, #16]
 8002650:	1ad3      	subs	r3, r2, r3
 8002652:	2b02      	cmp	r3, #2
 8002654:	d901      	bls.n	800265a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002656:	2303      	movs	r3, #3
 8002658:	e14d      	b.n	80028f6 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800265a:	4b36      	ldr	r3, [pc, #216]	; (8002734 <HAL_RCC_OscConfig+0x2ac>)
 800265c:	681b      	ldr	r3, [r3, #0]
 800265e:	f003 0302 	and.w	r3, r3, #2
 8002662:	2b00      	cmp	r3, #0
 8002664:	d1f0      	bne.n	8002648 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	681b      	ldr	r3, [r3, #0]
 800266a:	f003 0308 	and.w	r3, r3, #8
 800266e:	2b00      	cmp	r3, #0
 8002670:	d030      	beq.n	80026d4 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	695b      	ldr	r3, [r3, #20]
 8002676:	2b00      	cmp	r3, #0
 8002678:	d016      	beq.n	80026a8 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800267a:	4b30      	ldr	r3, [pc, #192]	; (800273c <HAL_RCC_OscConfig+0x2b4>)
 800267c:	2201      	movs	r2, #1
 800267e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002680:	f7fe fcf4 	bl	800106c <HAL_GetTick>
 8002684:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002686:	e008      	b.n	800269a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002688:	f7fe fcf0 	bl	800106c <HAL_GetTick>
 800268c:	4602      	mov	r2, r0
 800268e:	693b      	ldr	r3, [r7, #16]
 8002690:	1ad3      	subs	r3, r2, r3
 8002692:	2b02      	cmp	r3, #2
 8002694:	d901      	bls.n	800269a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002696:	2303      	movs	r3, #3
 8002698:	e12d      	b.n	80028f6 <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800269a:	4b26      	ldr	r3, [pc, #152]	; (8002734 <HAL_RCC_OscConfig+0x2ac>)
 800269c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800269e:	f003 0302 	and.w	r3, r3, #2
 80026a2:	2b00      	cmp	r3, #0
 80026a4:	d0f0      	beq.n	8002688 <HAL_RCC_OscConfig+0x200>
 80026a6:	e015      	b.n	80026d4 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80026a8:	4b24      	ldr	r3, [pc, #144]	; (800273c <HAL_RCC_OscConfig+0x2b4>)
 80026aa:	2200      	movs	r2, #0
 80026ac:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80026ae:	f7fe fcdd 	bl	800106c <HAL_GetTick>
 80026b2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80026b4:	e008      	b.n	80026c8 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80026b6:	f7fe fcd9 	bl	800106c <HAL_GetTick>
 80026ba:	4602      	mov	r2, r0
 80026bc:	693b      	ldr	r3, [r7, #16]
 80026be:	1ad3      	subs	r3, r2, r3
 80026c0:	2b02      	cmp	r3, #2
 80026c2:	d901      	bls.n	80026c8 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80026c4:	2303      	movs	r3, #3
 80026c6:	e116      	b.n	80028f6 <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80026c8:	4b1a      	ldr	r3, [pc, #104]	; (8002734 <HAL_RCC_OscConfig+0x2ac>)
 80026ca:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80026cc:	f003 0302 	and.w	r3, r3, #2
 80026d0:	2b00      	cmp	r3, #0
 80026d2:	d1f0      	bne.n	80026b6 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	681b      	ldr	r3, [r3, #0]
 80026d8:	f003 0304 	and.w	r3, r3, #4
 80026dc:	2b00      	cmp	r3, #0
 80026de:	f000 80a0 	beq.w	8002822 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 80026e2:	2300      	movs	r3, #0
 80026e4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80026e6:	4b13      	ldr	r3, [pc, #76]	; (8002734 <HAL_RCC_OscConfig+0x2ac>)
 80026e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026ea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80026ee:	2b00      	cmp	r3, #0
 80026f0:	d10f      	bne.n	8002712 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80026f2:	2300      	movs	r3, #0
 80026f4:	60fb      	str	r3, [r7, #12]
 80026f6:	4a0f      	ldr	r2, [pc, #60]	; (8002734 <HAL_RCC_OscConfig+0x2ac>)
 80026f8:	4b0e      	ldr	r3, [pc, #56]	; (8002734 <HAL_RCC_OscConfig+0x2ac>)
 80026fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026fc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002700:	6413      	str	r3, [r2, #64]	; 0x40
 8002702:	4b0c      	ldr	r3, [pc, #48]	; (8002734 <HAL_RCC_OscConfig+0x2ac>)
 8002704:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002706:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800270a:	60fb      	str	r3, [r7, #12]
 800270c:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 800270e:	2301      	movs	r3, #1
 8002710:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002712:	4b0b      	ldr	r3, [pc, #44]	; (8002740 <HAL_RCC_OscConfig+0x2b8>)
 8002714:	681b      	ldr	r3, [r3, #0]
 8002716:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800271a:	2b00      	cmp	r3, #0
 800271c:	d121      	bne.n	8002762 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800271e:	4a08      	ldr	r2, [pc, #32]	; (8002740 <HAL_RCC_OscConfig+0x2b8>)
 8002720:	4b07      	ldr	r3, [pc, #28]	; (8002740 <HAL_RCC_OscConfig+0x2b8>)
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002728:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800272a:	f7fe fc9f 	bl	800106c <HAL_GetTick>
 800272e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002730:	e011      	b.n	8002756 <HAL_RCC_OscConfig+0x2ce>
 8002732:	bf00      	nop
 8002734:	40023800 	.word	0x40023800
 8002738:	42470000 	.word	0x42470000
 800273c:	42470e80 	.word	0x42470e80
 8002740:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002744:	f7fe fc92 	bl	800106c <HAL_GetTick>
 8002748:	4602      	mov	r2, r0
 800274a:	693b      	ldr	r3, [r7, #16]
 800274c:	1ad3      	subs	r3, r2, r3
 800274e:	2b02      	cmp	r3, #2
 8002750:	d901      	bls.n	8002756 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8002752:	2303      	movs	r3, #3
 8002754:	e0cf      	b.n	80028f6 <HAL_RCC_OscConfig+0x46e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002756:	4b6a      	ldr	r3, [pc, #424]	; (8002900 <HAL_RCC_OscConfig+0x478>)
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800275e:	2b00      	cmp	r3, #0
 8002760:	d0f0      	beq.n	8002744 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	689b      	ldr	r3, [r3, #8]
 8002766:	2b01      	cmp	r3, #1
 8002768:	d106      	bne.n	8002778 <HAL_RCC_OscConfig+0x2f0>
 800276a:	4a66      	ldr	r2, [pc, #408]	; (8002904 <HAL_RCC_OscConfig+0x47c>)
 800276c:	4b65      	ldr	r3, [pc, #404]	; (8002904 <HAL_RCC_OscConfig+0x47c>)
 800276e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002770:	f043 0301 	orr.w	r3, r3, #1
 8002774:	6713      	str	r3, [r2, #112]	; 0x70
 8002776:	e01c      	b.n	80027b2 <HAL_RCC_OscConfig+0x32a>
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	689b      	ldr	r3, [r3, #8]
 800277c:	2b05      	cmp	r3, #5
 800277e:	d10c      	bne.n	800279a <HAL_RCC_OscConfig+0x312>
 8002780:	4a60      	ldr	r2, [pc, #384]	; (8002904 <HAL_RCC_OscConfig+0x47c>)
 8002782:	4b60      	ldr	r3, [pc, #384]	; (8002904 <HAL_RCC_OscConfig+0x47c>)
 8002784:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002786:	f043 0304 	orr.w	r3, r3, #4
 800278a:	6713      	str	r3, [r2, #112]	; 0x70
 800278c:	4a5d      	ldr	r2, [pc, #372]	; (8002904 <HAL_RCC_OscConfig+0x47c>)
 800278e:	4b5d      	ldr	r3, [pc, #372]	; (8002904 <HAL_RCC_OscConfig+0x47c>)
 8002790:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002792:	f043 0301 	orr.w	r3, r3, #1
 8002796:	6713      	str	r3, [r2, #112]	; 0x70
 8002798:	e00b      	b.n	80027b2 <HAL_RCC_OscConfig+0x32a>
 800279a:	4a5a      	ldr	r2, [pc, #360]	; (8002904 <HAL_RCC_OscConfig+0x47c>)
 800279c:	4b59      	ldr	r3, [pc, #356]	; (8002904 <HAL_RCC_OscConfig+0x47c>)
 800279e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80027a0:	f023 0301 	bic.w	r3, r3, #1
 80027a4:	6713      	str	r3, [r2, #112]	; 0x70
 80027a6:	4a57      	ldr	r2, [pc, #348]	; (8002904 <HAL_RCC_OscConfig+0x47c>)
 80027a8:	4b56      	ldr	r3, [pc, #344]	; (8002904 <HAL_RCC_OscConfig+0x47c>)
 80027aa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80027ac:	f023 0304 	bic.w	r3, r3, #4
 80027b0:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	689b      	ldr	r3, [r3, #8]
 80027b6:	2b00      	cmp	r3, #0
 80027b8:	d015      	beq.n	80027e6 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80027ba:	f7fe fc57 	bl	800106c <HAL_GetTick>
 80027be:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80027c0:	e00a      	b.n	80027d8 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80027c2:	f7fe fc53 	bl	800106c <HAL_GetTick>
 80027c6:	4602      	mov	r2, r0
 80027c8:	693b      	ldr	r3, [r7, #16]
 80027ca:	1ad3      	subs	r3, r2, r3
 80027cc:	f241 3288 	movw	r2, #5000	; 0x1388
 80027d0:	4293      	cmp	r3, r2
 80027d2:	d901      	bls.n	80027d8 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 80027d4:	2303      	movs	r3, #3
 80027d6:	e08e      	b.n	80028f6 <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80027d8:	4b4a      	ldr	r3, [pc, #296]	; (8002904 <HAL_RCC_OscConfig+0x47c>)
 80027da:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80027dc:	f003 0302 	and.w	r3, r3, #2
 80027e0:	2b00      	cmp	r3, #0
 80027e2:	d0ee      	beq.n	80027c2 <HAL_RCC_OscConfig+0x33a>
 80027e4:	e014      	b.n	8002810 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80027e6:	f7fe fc41 	bl	800106c <HAL_GetTick>
 80027ea:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80027ec:	e00a      	b.n	8002804 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80027ee:	f7fe fc3d 	bl	800106c <HAL_GetTick>
 80027f2:	4602      	mov	r2, r0
 80027f4:	693b      	ldr	r3, [r7, #16]
 80027f6:	1ad3      	subs	r3, r2, r3
 80027f8:	f241 3288 	movw	r2, #5000	; 0x1388
 80027fc:	4293      	cmp	r3, r2
 80027fe:	d901      	bls.n	8002804 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8002800:	2303      	movs	r3, #3
 8002802:	e078      	b.n	80028f6 <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002804:	4b3f      	ldr	r3, [pc, #252]	; (8002904 <HAL_RCC_OscConfig+0x47c>)
 8002806:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002808:	f003 0302 	and.w	r3, r3, #2
 800280c:	2b00      	cmp	r3, #0
 800280e:	d1ee      	bne.n	80027ee <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002810:	7dfb      	ldrb	r3, [r7, #23]
 8002812:	2b01      	cmp	r3, #1
 8002814:	d105      	bne.n	8002822 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002816:	4a3b      	ldr	r2, [pc, #236]	; (8002904 <HAL_RCC_OscConfig+0x47c>)
 8002818:	4b3a      	ldr	r3, [pc, #232]	; (8002904 <HAL_RCC_OscConfig+0x47c>)
 800281a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800281c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002820:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	699b      	ldr	r3, [r3, #24]
 8002826:	2b00      	cmp	r3, #0
 8002828:	d064      	beq.n	80028f4 <HAL_RCC_OscConfig+0x46c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800282a:	4b36      	ldr	r3, [pc, #216]	; (8002904 <HAL_RCC_OscConfig+0x47c>)
 800282c:	689b      	ldr	r3, [r3, #8]
 800282e:	f003 030c 	and.w	r3, r3, #12
 8002832:	2b08      	cmp	r3, #8
 8002834:	d05c      	beq.n	80028f0 <HAL_RCC_OscConfig+0x468>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	699b      	ldr	r3, [r3, #24]
 800283a:	2b02      	cmp	r3, #2
 800283c:	d141      	bne.n	80028c2 <HAL_RCC_OscConfig+0x43a>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800283e:	4b32      	ldr	r3, [pc, #200]	; (8002908 <HAL_RCC_OscConfig+0x480>)
 8002840:	2200      	movs	r2, #0
 8002842:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002844:	f7fe fc12 	bl	800106c <HAL_GetTick>
 8002848:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800284a:	e008      	b.n	800285e <HAL_RCC_OscConfig+0x3d6>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800284c:	f7fe fc0e 	bl	800106c <HAL_GetTick>
 8002850:	4602      	mov	r2, r0
 8002852:	693b      	ldr	r3, [r7, #16]
 8002854:	1ad3      	subs	r3, r2, r3
 8002856:	2b02      	cmp	r3, #2
 8002858:	d901      	bls.n	800285e <HAL_RCC_OscConfig+0x3d6>
          {
            return HAL_TIMEOUT;
 800285a:	2303      	movs	r3, #3
 800285c:	e04b      	b.n	80028f6 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800285e:	4b29      	ldr	r3, [pc, #164]	; (8002904 <HAL_RCC_OscConfig+0x47c>)
 8002860:	681b      	ldr	r3, [r3, #0]
 8002862:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002866:	2b00      	cmp	r3, #0
 8002868:	d1f0      	bne.n	800284c <HAL_RCC_OscConfig+0x3c4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800286a:	4926      	ldr	r1, [pc, #152]	; (8002904 <HAL_RCC_OscConfig+0x47c>)
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	69da      	ldr	r2, [r3, #28]
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	6a1b      	ldr	r3, [r3, #32]
 8002874:	431a      	orrs	r2, r3
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800287a:	019b      	lsls	r3, r3, #6
 800287c:	431a      	orrs	r2, r3
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002882:	085b      	lsrs	r3, r3, #1
 8002884:	3b01      	subs	r3, #1
 8002886:	041b      	lsls	r3, r3, #16
 8002888:	431a      	orrs	r2, r3
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800288e:	061b      	lsls	r3, r3, #24
 8002890:	4313      	orrs	r3, r2
 8002892:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002894:	4b1c      	ldr	r3, [pc, #112]	; (8002908 <HAL_RCC_OscConfig+0x480>)
 8002896:	2201      	movs	r2, #1
 8002898:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800289a:	f7fe fbe7 	bl	800106c <HAL_GetTick>
 800289e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80028a0:	e008      	b.n	80028b4 <HAL_RCC_OscConfig+0x42c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80028a2:	f7fe fbe3 	bl	800106c <HAL_GetTick>
 80028a6:	4602      	mov	r2, r0
 80028a8:	693b      	ldr	r3, [r7, #16]
 80028aa:	1ad3      	subs	r3, r2, r3
 80028ac:	2b02      	cmp	r3, #2
 80028ae:	d901      	bls.n	80028b4 <HAL_RCC_OscConfig+0x42c>
          {
            return HAL_TIMEOUT;
 80028b0:	2303      	movs	r3, #3
 80028b2:	e020      	b.n	80028f6 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80028b4:	4b13      	ldr	r3, [pc, #76]	; (8002904 <HAL_RCC_OscConfig+0x47c>)
 80028b6:	681b      	ldr	r3, [r3, #0]
 80028b8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80028bc:	2b00      	cmp	r3, #0
 80028be:	d0f0      	beq.n	80028a2 <HAL_RCC_OscConfig+0x41a>
 80028c0:	e018      	b.n	80028f4 <HAL_RCC_OscConfig+0x46c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80028c2:	4b11      	ldr	r3, [pc, #68]	; (8002908 <HAL_RCC_OscConfig+0x480>)
 80028c4:	2200      	movs	r2, #0
 80028c6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80028c8:	f7fe fbd0 	bl	800106c <HAL_GetTick>
 80028cc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80028ce:	e008      	b.n	80028e2 <HAL_RCC_OscConfig+0x45a>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80028d0:	f7fe fbcc 	bl	800106c <HAL_GetTick>
 80028d4:	4602      	mov	r2, r0
 80028d6:	693b      	ldr	r3, [r7, #16]
 80028d8:	1ad3      	subs	r3, r2, r3
 80028da:	2b02      	cmp	r3, #2
 80028dc:	d901      	bls.n	80028e2 <HAL_RCC_OscConfig+0x45a>
          {
            return HAL_TIMEOUT;
 80028de:	2303      	movs	r3, #3
 80028e0:	e009      	b.n	80028f6 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80028e2:	4b08      	ldr	r3, [pc, #32]	; (8002904 <HAL_RCC_OscConfig+0x47c>)
 80028e4:	681b      	ldr	r3, [r3, #0]
 80028e6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80028ea:	2b00      	cmp	r3, #0
 80028ec:	d1f0      	bne.n	80028d0 <HAL_RCC_OscConfig+0x448>
 80028ee:	e001      	b.n	80028f4 <HAL_RCC_OscConfig+0x46c>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 80028f0:	2301      	movs	r3, #1
 80028f2:	e000      	b.n	80028f6 <HAL_RCC_OscConfig+0x46e>
    }
  }
  return HAL_OK;
 80028f4:	2300      	movs	r3, #0
}
 80028f6:	4618      	mov	r0, r3
 80028f8:	3718      	adds	r7, #24
 80028fa:	46bd      	mov	sp, r7
 80028fc:	bd80      	pop	{r7, pc}
 80028fe:	bf00      	nop
 8002900:	40007000 	.word	0x40007000
 8002904:	40023800 	.word	0x40023800
 8002908:	42470060 	.word	0x42470060

0800290c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800290c:	b580      	push	{r7, lr}
 800290e:	b084      	sub	sp, #16
 8002910:	af00      	add	r7, sp, #0
 8002912:	6078      	str	r0, [r7, #4]
 8002914:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	2b00      	cmp	r3, #0
 800291a:	d101      	bne.n	8002920 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800291c:	2301      	movs	r3, #1
 800291e:	e0ca      	b.n	8002ab6 <HAL_RCC_ClockConfig+0x1aa>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002920:	4b67      	ldr	r3, [pc, #412]	; (8002ac0 <HAL_RCC_ClockConfig+0x1b4>)
 8002922:	681b      	ldr	r3, [r3, #0]
 8002924:	f003 020f 	and.w	r2, r3, #15
 8002928:	683b      	ldr	r3, [r7, #0]
 800292a:	429a      	cmp	r2, r3
 800292c:	d20c      	bcs.n	8002948 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800292e:	4b64      	ldr	r3, [pc, #400]	; (8002ac0 <HAL_RCC_ClockConfig+0x1b4>)
 8002930:	683a      	ldr	r2, [r7, #0]
 8002932:	b2d2      	uxtb	r2, r2
 8002934:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002936:	4b62      	ldr	r3, [pc, #392]	; (8002ac0 <HAL_RCC_ClockConfig+0x1b4>)
 8002938:	681b      	ldr	r3, [r3, #0]
 800293a:	f003 020f 	and.w	r2, r3, #15
 800293e:	683b      	ldr	r3, [r7, #0]
 8002940:	429a      	cmp	r2, r3
 8002942:	d001      	beq.n	8002948 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002944:	2301      	movs	r3, #1
 8002946:	e0b6      	b.n	8002ab6 <HAL_RCC_ClockConfig+0x1aa>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	f003 0302 	and.w	r3, r3, #2
 8002950:	2b00      	cmp	r3, #0
 8002952:	d020      	beq.n	8002996 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	681b      	ldr	r3, [r3, #0]
 8002958:	f003 0304 	and.w	r3, r3, #4
 800295c:	2b00      	cmp	r3, #0
 800295e:	d005      	beq.n	800296c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002960:	4a58      	ldr	r2, [pc, #352]	; (8002ac4 <HAL_RCC_ClockConfig+0x1b8>)
 8002962:	4b58      	ldr	r3, [pc, #352]	; (8002ac4 <HAL_RCC_ClockConfig+0x1b8>)
 8002964:	689b      	ldr	r3, [r3, #8]
 8002966:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800296a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	f003 0308 	and.w	r3, r3, #8
 8002974:	2b00      	cmp	r3, #0
 8002976:	d005      	beq.n	8002984 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002978:	4a52      	ldr	r2, [pc, #328]	; (8002ac4 <HAL_RCC_ClockConfig+0x1b8>)
 800297a:	4b52      	ldr	r3, [pc, #328]	; (8002ac4 <HAL_RCC_ClockConfig+0x1b8>)
 800297c:	689b      	ldr	r3, [r3, #8]
 800297e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002982:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002984:	494f      	ldr	r1, [pc, #316]	; (8002ac4 <HAL_RCC_ClockConfig+0x1b8>)
 8002986:	4b4f      	ldr	r3, [pc, #316]	; (8002ac4 <HAL_RCC_ClockConfig+0x1b8>)
 8002988:	689b      	ldr	r3, [r3, #8]
 800298a:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	689b      	ldr	r3, [r3, #8]
 8002992:	4313      	orrs	r3, r2
 8002994:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	681b      	ldr	r3, [r3, #0]
 800299a:	f003 0301 	and.w	r3, r3, #1
 800299e:	2b00      	cmp	r3, #0
 80029a0:	d044      	beq.n	8002a2c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	685b      	ldr	r3, [r3, #4]
 80029a6:	2b01      	cmp	r3, #1
 80029a8:	d107      	bne.n	80029ba <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80029aa:	4b46      	ldr	r3, [pc, #280]	; (8002ac4 <HAL_RCC_ClockConfig+0x1b8>)
 80029ac:	681b      	ldr	r3, [r3, #0]
 80029ae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80029b2:	2b00      	cmp	r3, #0
 80029b4:	d119      	bne.n	80029ea <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80029b6:	2301      	movs	r3, #1
 80029b8:	e07d      	b.n	8002ab6 <HAL_RCC_ClockConfig+0x1aa>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	685b      	ldr	r3, [r3, #4]
 80029be:	2b02      	cmp	r3, #2
 80029c0:	d003      	beq.n	80029ca <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80029c6:	2b03      	cmp	r3, #3
 80029c8:	d107      	bne.n	80029da <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80029ca:	4b3e      	ldr	r3, [pc, #248]	; (8002ac4 <HAL_RCC_ClockConfig+0x1b8>)
 80029cc:	681b      	ldr	r3, [r3, #0]
 80029ce:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80029d2:	2b00      	cmp	r3, #0
 80029d4:	d109      	bne.n	80029ea <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80029d6:	2301      	movs	r3, #1
 80029d8:	e06d      	b.n	8002ab6 <HAL_RCC_ClockConfig+0x1aa>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80029da:	4b3a      	ldr	r3, [pc, #232]	; (8002ac4 <HAL_RCC_ClockConfig+0x1b8>)
 80029dc:	681b      	ldr	r3, [r3, #0]
 80029de:	f003 0302 	and.w	r3, r3, #2
 80029e2:	2b00      	cmp	r3, #0
 80029e4:	d101      	bne.n	80029ea <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80029e6:	2301      	movs	r3, #1
 80029e8:	e065      	b.n	8002ab6 <HAL_RCC_ClockConfig+0x1aa>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80029ea:	4936      	ldr	r1, [pc, #216]	; (8002ac4 <HAL_RCC_ClockConfig+0x1b8>)
 80029ec:	4b35      	ldr	r3, [pc, #212]	; (8002ac4 <HAL_RCC_ClockConfig+0x1b8>)
 80029ee:	689b      	ldr	r3, [r3, #8]
 80029f0:	f023 0203 	bic.w	r2, r3, #3
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	685b      	ldr	r3, [r3, #4]
 80029f8:	4313      	orrs	r3, r2
 80029fa:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80029fc:	f7fe fb36 	bl	800106c <HAL_GetTick>
 8002a00:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002a02:	e00a      	b.n	8002a1a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002a04:	f7fe fb32 	bl	800106c <HAL_GetTick>
 8002a08:	4602      	mov	r2, r0
 8002a0a:	68fb      	ldr	r3, [r7, #12]
 8002a0c:	1ad3      	subs	r3, r2, r3
 8002a0e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002a12:	4293      	cmp	r3, r2
 8002a14:	d901      	bls.n	8002a1a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002a16:	2303      	movs	r3, #3
 8002a18:	e04d      	b.n	8002ab6 <HAL_RCC_ClockConfig+0x1aa>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002a1a:	4b2a      	ldr	r3, [pc, #168]	; (8002ac4 <HAL_RCC_ClockConfig+0x1b8>)
 8002a1c:	689b      	ldr	r3, [r3, #8]
 8002a1e:	f003 020c 	and.w	r2, r3, #12
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	685b      	ldr	r3, [r3, #4]
 8002a26:	009b      	lsls	r3, r3, #2
 8002a28:	429a      	cmp	r2, r3
 8002a2a:	d1eb      	bne.n	8002a04 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002a2c:	4b24      	ldr	r3, [pc, #144]	; (8002ac0 <HAL_RCC_ClockConfig+0x1b4>)
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	f003 020f 	and.w	r2, r3, #15
 8002a34:	683b      	ldr	r3, [r7, #0]
 8002a36:	429a      	cmp	r2, r3
 8002a38:	d90c      	bls.n	8002a54 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002a3a:	4b21      	ldr	r3, [pc, #132]	; (8002ac0 <HAL_RCC_ClockConfig+0x1b4>)
 8002a3c:	683a      	ldr	r2, [r7, #0]
 8002a3e:	b2d2      	uxtb	r2, r2
 8002a40:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002a42:	4b1f      	ldr	r3, [pc, #124]	; (8002ac0 <HAL_RCC_ClockConfig+0x1b4>)
 8002a44:	681b      	ldr	r3, [r3, #0]
 8002a46:	f003 020f 	and.w	r2, r3, #15
 8002a4a:	683b      	ldr	r3, [r7, #0]
 8002a4c:	429a      	cmp	r2, r3
 8002a4e:	d001      	beq.n	8002a54 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002a50:	2301      	movs	r3, #1
 8002a52:	e030      	b.n	8002ab6 <HAL_RCC_ClockConfig+0x1aa>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	f003 0304 	and.w	r3, r3, #4
 8002a5c:	2b00      	cmp	r3, #0
 8002a5e:	d008      	beq.n	8002a72 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002a60:	4918      	ldr	r1, [pc, #96]	; (8002ac4 <HAL_RCC_ClockConfig+0x1b8>)
 8002a62:	4b18      	ldr	r3, [pc, #96]	; (8002ac4 <HAL_RCC_ClockConfig+0x1b8>)
 8002a64:	689b      	ldr	r3, [r3, #8]
 8002a66:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	68db      	ldr	r3, [r3, #12]
 8002a6e:	4313      	orrs	r3, r2
 8002a70:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	681b      	ldr	r3, [r3, #0]
 8002a76:	f003 0308 	and.w	r3, r3, #8
 8002a7a:	2b00      	cmp	r3, #0
 8002a7c:	d009      	beq.n	8002a92 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002a7e:	4911      	ldr	r1, [pc, #68]	; (8002ac4 <HAL_RCC_ClockConfig+0x1b8>)
 8002a80:	4b10      	ldr	r3, [pc, #64]	; (8002ac4 <HAL_RCC_ClockConfig+0x1b8>)
 8002a82:	689b      	ldr	r3, [r3, #8]
 8002a84:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	691b      	ldr	r3, [r3, #16]
 8002a8c:	00db      	lsls	r3, r3, #3
 8002a8e:	4313      	orrs	r3, r2
 8002a90:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002a92:	f000 f81d 	bl	8002ad0 <HAL_RCC_GetSysClockFreq>
 8002a96:	4601      	mov	r1, r0
 8002a98:	4b0a      	ldr	r3, [pc, #40]	; (8002ac4 <HAL_RCC_ClockConfig+0x1b8>)
 8002a9a:	689b      	ldr	r3, [r3, #8]
 8002a9c:	091b      	lsrs	r3, r3, #4
 8002a9e:	f003 030f 	and.w	r3, r3, #15
 8002aa2:	4a09      	ldr	r2, [pc, #36]	; (8002ac8 <HAL_RCC_ClockConfig+0x1bc>)
 8002aa4:	5cd3      	ldrb	r3, [r2, r3]
 8002aa6:	fa21 f303 	lsr.w	r3, r1, r3
 8002aaa:	4a08      	ldr	r2, [pc, #32]	; (8002acc <HAL_RCC_ClockConfig+0x1c0>)
 8002aac:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (TICK_INT_PRIORITY);
 8002aae:	2000      	movs	r0, #0
 8002ab0:	f7fe fa98 	bl	8000fe4 <HAL_InitTick>

  return HAL_OK;
 8002ab4:	2300      	movs	r3, #0
}
 8002ab6:	4618      	mov	r0, r3
 8002ab8:	3710      	adds	r7, #16
 8002aba:	46bd      	mov	sp, r7
 8002abc:	bd80      	pop	{r7, pc}
 8002abe:	bf00      	nop
 8002ac0:	40023c00 	.word	0x40023c00
 8002ac4:	40023800 	.word	0x40023800
 8002ac8:	08005104 	.word	0x08005104
 8002acc:	20000000 	.word	0x20000000

08002ad0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002ad0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002ad4:	b08f      	sub	sp, #60	; 0x3c
 8002ad6:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8002ad8:	2300      	movs	r3, #0
 8002ada:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002adc:	2300      	movs	r3, #0
 8002ade:	637b      	str	r3, [r7, #52]	; 0x34
 8002ae0:	2300      	movs	r3, #0
 8002ae2:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t sysclockfreq = 0U;
 8002ae4:	2300      	movs	r3, #0
 8002ae6:	633b      	str	r3, [r7, #48]	; 0x30

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002ae8:	4b62      	ldr	r3, [pc, #392]	; (8002c74 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8002aea:	689b      	ldr	r3, [r3, #8]
 8002aec:	f003 030c 	and.w	r3, r3, #12
 8002af0:	2b04      	cmp	r3, #4
 8002af2:	d007      	beq.n	8002b04 <HAL_RCC_GetSysClockFreq+0x34>
 8002af4:	2b08      	cmp	r3, #8
 8002af6:	d008      	beq.n	8002b0a <HAL_RCC_GetSysClockFreq+0x3a>
 8002af8:	2b00      	cmp	r3, #0
 8002afa:	f040 80b2 	bne.w	8002c62 <HAL_RCC_GetSysClockFreq+0x192>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002afe:	4b5e      	ldr	r3, [pc, #376]	; (8002c78 <HAL_RCC_GetSysClockFreq+0x1a8>)
 8002b00:	633b      	str	r3, [r7, #48]	; 0x30
       break;
 8002b02:	e0b1      	b.n	8002c68 <HAL_RCC_GetSysClockFreq+0x198>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002b04:	4b5d      	ldr	r3, [pc, #372]	; (8002c7c <HAL_RCC_GetSysClockFreq+0x1ac>)
 8002b06:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8002b08:	e0ae      	b.n	8002c68 <HAL_RCC_GetSysClockFreq+0x198>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002b0a:	4b5a      	ldr	r3, [pc, #360]	; (8002c74 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8002b0c:	685b      	ldr	r3, [r3, #4]
 8002b0e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002b12:	62fb      	str	r3, [r7, #44]	; 0x2c
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002b14:	4b57      	ldr	r3, [pc, #348]	; (8002c74 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8002b16:	685b      	ldr	r3, [r3, #4]
 8002b18:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002b1c:	2b00      	cmp	r3, #0
 8002b1e:	d04e      	beq.n	8002bbe <HAL_RCC_GetSysClockFreq+0xee>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002b20:	4b54      	ldr	r3, [pc, #336]	; (8002c74 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8002b22:	685b      	ldr	r3, [r3, #4]
 8002b24:	099b      	lsrs	r3, r3, #6
 8002b26:	f04f 0400 	mov.w	r4, #0
 8002b2a:	f240 11ff 	movw	r1, #511	; 0x1ff
 8002b2e:	f04f 0200 	mov.w	r2, #0
 8002b32:	ea01 0103 	and.w	r1, r1, r3
 8002b36:	ea02 0204 	and.w	r2, r2, r4
 8002b3a:	460b      	mov	r3, r1
 8002b3c:	4614      	mov	r4, r2
 8002b3e:	0160      	lsls	r0, r4, #5
 8002b40:	6278      	str	r0, [r7, #36]	; 0x24
 8002b42:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8002b44:	ea40 60d3 	orr.w	r0, r0, r3, lsr #27
 8002b48:	6278      	str	r0, [r7, #36]	; 0x24
 8002b4a:	015b      	lsls	r3, r3, #5
 8002b4c:	623b      	str	r3, [r7, #32]
 8002b4e:	e9d7 3408 	ldrd	r3, r4, [r7, #32]
 8002b52:	1a5b      	subs	r3, r3, r1
 8002b54:	eb64 0402 	sbc.w	r4, r4, r2
 8002b58:	ea4f 1984 	mov.w	r9, r4, lsl #6
 8002b5c:	ea49 6993 	orr.w	r9, r9, r3, lsr #26
 8002b60:	ea4f 1883 	mov.w	r8, r3, lsl #6
 8002b64:	ebb8 0803 	subs.w	r8, r8, r3
 8002b68:	eb69 0904 	sbc.w	r9, r9, r4
 8002b6c:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002b70:	61fb      	str	r3, [r7, #28]
 8002b72:	69fb      	ldr	r3, [r7, #28]
 8002b74:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002b78:	61fb      	str	r3, [r7, #28]
 8002b7a:	ea4f 03c8 	mov.w	r3, r8, lsl #3
 8002b7e:	61bb      	str	r3, [r7, #24]
 8002b80:	e9d7 8906 	ldrd	r8, r9, [r7, #24]
 8002b84:	eb18 0801 	adds.w	r8, r8, r1
 8002b88:	eb49 0902 	adc.w	r9, r9, r2
 8002b8c:	ea4f 2349 	mov.w	r3, r9, lsl #9
 8002b90:	617b      	str	r3, [r7, #20]
 8002b92:	697b      	ldr	r3, [r7, #20]
 8002b94:	ea43 53d8 	orr.w	r3, r3, r8, lsr #23
 8002b98:	617b      	str	r3, [r7, #20]
 8002b9a:	ea4f 2348 	mov.w	r3, r8, lsl #9
 8002b9e:	613b      	str	r3, [r7, #16]
 8002ba0:	e9d7 8904 	ldrd	r8, r9, [r7, #16]
 8002ba4:	4640      	mov	r0, r8
 8002ba6:	4649      	mov	r1, r9
 8002ba8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002baa:	f04f 0400 	mov.w	r4, #0
 8002bae:	461a      	mov	r2, r3
 8002bb0:	4623      	mov	r3, r4
 8002bb2:	f7fd fb65 	bl	8000280 <__aeabi_uldivmod>
 8002bb6:	4603      	mov	r3, r0
 8002bb8:	460c      	mov	r4, r1
 8002bba:	637b      	str	r3, [r7, #52]	; 0x34
 8002bbc:	e043      	b.n	8002c46 <HAL_RCC_GetSysClockFreq+0x176>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002bbe:	4b2d      	ldr	r3, [pc, #180]	; (8002c74 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8002bc0:	685b      	ldr	r3, [r3, #4]
 8002bc2:	099b      	lsrs	r3, r3, #6
 8002bc4:	f04f 0400 	mov.w	r4, #0
 8002bc8:	f240 11ff 	movw	r1, #511	; 0x1ff
 8002bcc:	f04f 0200 	mov.w	r2, #0
 8002bd0:	ea01 0103 	and.w	r1, r1, r3
 8002bd4:	ea02 0204 	and.w	r2, r2, r4
 8002bd8:	460b      	mov	r3, r1
 8002bda:	4614      	mov	r4, r2
 8002bdc:	0160      	lsls	r0, r4, #5
 8002bde:	60f8      	str	r0, [r7, #12]
 8002be0:	68f8      	ldr	r0, [r7, #12]
 8002be2:	ea40 60d3 	orr.w	r0, r0, r3, lsr #27
 8002be6:	60f8      	str	r0, [r7, #12]
 8002be8:	015b      	lsls	r3, r3, #5
 8002bea:	60bb      	str	r3, [r7, #8]
 8002bec:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 8002bf0:	1a5b      	subs	r3, r3, r1
 8002bf2:	eb64 0402 	sbc.w	r4, r4, r2
 8002bf6:	01a6      	lsls	r6, r4, #6
 8002bf8:	ea46 6693 	orr.w	r6, r6, r3, lsr #26
 8002bfc:	019d      	lsls	r5, r3, #6
 8002bfe:	1aed      	subs	r5, r5, r3
 8002c00:	eb66 0604 	sbc.w	r6, r6, r4
 8002c04:	00f3      	lsls	r3, r6, #3
 8002c06:	607b      	str	r3, [r7, #4]
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	ea43 7355 	orr.w	r3, r3, r5, lsr #29
 8002c0e:	607b      	str	r3, [r7, #4]
 8002c10:	00eb      	lsls	r3, r5, #3
 8002c12:	603b      	str	r3, [r7, #0]
 8002c14:	e897 0060 	ldmia.w	r7, {r5, r6}
 8002c18:	186d      	adds	r5, r5, r1
 8002c1a:	eb46 0602 	adc.w	r6, r6, r2
 8002c1e:	ea4f 2b86 	mov.w	fp, r6, lsl #10
 8002c22:	ea4b 5b95 	orr.w	fp, fp, r5, lsr #22
 8002c26:	ea4f 2a85 	mov.w	sl, r5, lsl #10
 8002c2a:	4655      	mov	r5, sl
 8002c2c:	465e      	mov	r6, fp
 8002c2e:	4628      	mov	r0, r5
 8002c30:	4631      	mov	r1, r6
 8002c32:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002c34:	f04f 0400 	mov.w	r4, #0
 8002c38:	461a      	mov	r2, r3
 8002c3a:	4623      	mov	r3, r4
 8002c3c:	f7fd fb20 	bl	8000280 <__aeabi_uldivmod>
 8002c40:	4603      	mov	r3, r0
 8002c42:	460c      	mov	r4, r1
 8002c44:	637b      	str	r3, [r7, #52]	; 0x34
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002c46:	4b0b      	ldr	r3, [pc, #44]	; (8002c74 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8002c48:	685b      	ldr	r3, [r3, #4]
 8002c4a:	0c1b      	lsrs	r3, r3, #16
 8002c4c:	f003 0303 	and.w	r3, r3, #3
 8002c50:	3301      	adds	r3, #1
 8002c52:	005b      	lsls	r3, r3, #1
 8002c54:	62bb      	str	r3, [r7, #40]	; 0x28

      sysclockfreq = pllvco/pllp;
 8002c56:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002c58:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002c5a:	fbb2 f3f3 	udiv	r3, r2, r3
 8002c5e:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8002c60:	e002      	b.n	8002c68 <HAL_RCC_GetSysClockFreq+0x198>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002c62:	4b05      	ldr	r3, [pc, #20]	; (8002c78 <HAL_RCC_GetSysClockFreq+0x1a8>)
 8002c64:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8002c66:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002c68:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 8002c6a:	4618      	mov	r0, r3
 8002c6c:	373c      	adds	r7, #60	; 0x3c
 8002c6e:	46bd      	mov	sp, r7
 8002c70:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002c74:	40023800 	.word	0x40023800
 8002c78:	00f42400 	.word	0x00f42400
 8002c7c:	007a1200 	.word	0x007a1200

08002c80 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002c80:	b480      	push	{r7}
 8002c82:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002c84:	4b03      	ldr	r3, [pc, #12]	; (8002c94 <HAL_RCC_GetHCLKFreq+0x14>)
 8002c86:	681b      	ldr	r3, [r3, #0]
}
 8002c88:	4618      	mov	r0, r3
 8002c8a:	46bd      	mov	sp, r7
 8002c8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c90:	4770      	bx	lr
 8002c92:	bf00      	nop
 8002c94:	20000000 	.word	0x20000000

08002c98 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002c98:	b580      	push	{r7, lr}
 8002c9a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8002c9c:	f7ff fff0 	bl	8002c80 <HAL_RCC_GetHCLKFreq>
 8002ca0:	4601      	mov	r1, r0
 8002ca2:	4b05      	ldr	r3, [pc, #20]	; (8002cb8 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002ca4:	689b      	ldr	r3, [r3, #8]
 8002ca6:	0a9b      	lsrs	r3, r3, #10
 8002ca8:	f003 0307 	and.w	r3, r3, #7
 8002cac:	4a03      	ldr	r2, [pc, #12]	; (8002cbc <HAL_RCC_GetPCLK1Freq+0x24>)
 8002cae:	5cd3      	ldrb	r3, [r2, r3]
 8002cb0:	fa21 f303 	lsr.w	r3, r1, r3
}
 8002cb4:	4618      	mov	r0, r3
 8002cb6:	bd80      	pop	{r7, pc}
 8002cb8:	40023800 	.word	0x40023800
 8002cbc:	08005114 	.word	0x08005114

08002cc0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002cc0:	b580      	push	{r7, lr}
 8002cc2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8002cc4:	f7ff ffdc 	bl	8002c80 <HAL_RCC_GetHCLKFreq>
 8002cc8:	4601      	mov	r1, r0
 8002cca:	4b05      	ldr	r3, [pc, #20]	; (8002ce0 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002ccc:	689b      	ldr	r3, [r3, #8]
 8002cce:	0b5b      	lsrs	r3, r3, #13
 8002cd0:	f003 0307 	and.w	r3, r3, #7
 8002cd4:	4a03      	ldr	r2, [pc, #12]	; (8002ce4 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002cd6:	5cd3      	ldrb	r3, [r2, r3]
 8002cd8:	fa21 f303 	lsr.w	r3, r1, r3
}
 8002cdc:	4618      	mov	r0, r3
 8002cde:	bd80      	pop	{r7, pc}
 8002ce0:	40023800 	.word	0x40023800
 8002ce4:	08005114 	.word	0x08005114

08002ce8 <HAL_TIM_OC_Init>:
  * @param  htim pointer to a TIM_HandleTypeDef structure that contains
  *                the configuration information for TIM module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef* htim)
{
 8002ce8:	b580      	push	{r7, lr}
 8002cea:	b082      	sub	sp, #8
 8002cec:	af00      	add	r7, sp, #0
 8002cee:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if(htim == NULL)
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	2b00      	cmp	r3, #0
 8002cf4:	d101      	bne.n	8002cfa <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 8002cf6:	2301      	movs	r3, #1
 8002cf8:	e01d      	b.n	8002d36 <HAL_TIM_OC_Init+0x4e>
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
 
  if(htim->State == HAL_TIM_STATE_RESET)
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8002d00:	b2db      	uxtb	r3, r3
 8002d02:	2b00      	cmp	r3, #0
 8002d04:	d106      	bne.n	8002d14 <HAL_TIM_OC_Init+0x2c>
  { 
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	2200      	movs	r2, #0
 8002d0a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OC_MspInit(htim);
 8002d0e:	6878      	ldr	r0, [r7, #4]
 8002d10:	f7fe f822 	bl	8000d58 <HAL_TIM_OC_MspInit>
  }
  
  /* Set the TIM state */
  htim->State= HAL_TIM_STATE_BUSY;
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	2202      	movs	r2, #2
 8002d18:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  
  /* Init the base time for the Output Compare */  
  TIM_Base_SetConfig(htim->Instance,  &htim->Init); 
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	681a      	ldr	r2, [r3, #0]
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	3304      	adds	r3, #4
 8002d24:	4619      	mov	r1, r3
 8002d26:	4610      	mov	r0, r2
 8002d28:	f000 f9a4 	bl	8003074 <TIM_Base_SetConfig>
  
  /* Initialize the TIM state*/
  htim->State= HAL_TIM_STATE_READY;
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	2201      	movs	r2, #1
 8002d30:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  
  return HAL_OK;
 8002d34:	2300      	movs	r3, #0
}
 8002d36:	4618      	mov	r0, r3
 8002d38:	3708      	adds	r7, #8
 8002d3a:	46bd      	mov	sp, r7
 8002d3c:	bd80      	pop	{r7, pc}

08002d3e <HAL_TIM_IRQHandler>:
  * @param  htim pointer to a TIM_HandleTypeDef structure that contains
  *                the configuration information for TIM module.
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002d3e:	b580      	push	{r7, lr}
 8002d40:	b082      	sub	sp, #8
 8002d42:	af00      	add	r7, sp, #0
 8002d44:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	681b      	ldr	r3, [r3, #0]
 8002d4a:	691b      	ldr	r3, [r3, #16]
 8002d4c:	f003 0302 	and.w	r3, r3, #2
 8002d50:	2b02      	cmp	r3, #2
 8002d52:	d122      	bne.n	8002d9a <HAL_TIM_IRQHandler+0x5c>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) !=RESET)
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	681b      	ldr	r3, [r3, #0]
 8002d58:	68db      	ldr	r3, [r3, #12]
 8002d5a:	f003 0302 	and.w	r3, r3, #2
 8002d5e:	2b02      	cmp	r3, #2
 8002d60:	d11b      	bne.n	8002d9a <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	681b      	ldr	r3, [r3, #0]
 8002d66:	f06f 0202 	mvn.w	r2, #2
 8002d6a:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	2201      	movs	r2, #1
 8002d70:	761a      	strb	r2, [r3, #24]
        
        /* Input capture event */
        if((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	681b      	ldr	r3, [r3, #0]
 8002d76:	699b      	ldr	r3, [r3, #24]
 8002d78:	f003 0303 	and.w	r3, r3, #3
 8002d7c:	2b00      	cmp	r3, #0
 8002d7e:	d003      	beq.n	8002d88 <HAL_TIM_IRQHandler+0x4a>
        {
          HAL_TIM_IC_CaptureCallback(htim);
 8002d80:	6878      	ldr	r0, [r7, #4]
 8002d82:	f000 f959 	bl	8003038 <HAL_TIM_IC_CaptureCallback>
 8002d86:	e005      	b.n	8002d94 <HAL_TIM_IRQHandler+0x56>
        }
        /* Output compare event */
        else
        {
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002d88:	6878      	ldr	r0, [r7, #4]
 8002d8a:	f000 f94b 	bl	8003024 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002d8e:	6878      	ldr	r0, [r7, #4]
 8002d90:	f000 f95c 	bl	800304c <HAL_TIM_PWM_PulseFinishedCallback>
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	2200      	movs	r2, #0
 8002d98:	761a      	strb	r2, [r3, #24]
      }
    }
  }
  /* Capture compare 2 event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	681b      	ldr	r3, [r3, #0]
 8002d9e:	691b      	ldr	r3, [r3, #16]
 8002da0:	f003 0304 	and.w	r3, r3, #4
 8002da4:	2b04      	cmp	r3, #4
 8002da6:	d122      	bne.n	8002dee <HAL_TIM_IRQHandler+0xb0>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) !=RESET)
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	68db      	ldr	r3, [r3, #12]
 8002dae:	f003 0304 	and.w	r3, r3, #4
 8002db2:	2b04      	cmp	r3, #4
 8002db4:	d11b      	bne.n	8002dee <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	681b      	ldr	r3, [r3, #0]
 8002dba:	f06f 0204 	mvn.w	r2, #4
 8002dbe:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	2202      	movs	r2, #2
 8002dc4:	761a      	strb	r2, [r3, #24]
      /* Input capture event */
      if((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	681b      	ldr	r3, [r3, #0]
 8002dca:	699b      	ldr	r3, [r3, #24]
 8002dcc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002dd0:	2b00      	cmp	r3, #0
 8002dd2:	d003      	beq.n	8002ddc <HAL_TIM_IRQHandler+0x9e>
      {          
        HAL_TIM_IC_CaptureCallback(htim);
 8002dd4:	6878      	ldr	r0, [r7, #4]
 8002dd6:	f000 f92f 	bl	8003038 <HAL_TIM_IC_CaptureCallback>
 8002dda:	e005      	b.n	8002de8 <HAL_TIM_IRQHandler+0xaa>
      }
      /* Output compare event */
      else
      {
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002ddc:	6878      	ldr	r0, [r7, #4]
 8002dde:	f000 f921 	bl	8003024 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002de2:	6878      	ldr	r0, [r7, #4]
 8002de4:	f000 f932 	bl	800304c <HAL_TIM_PWM_PulseFinishedCallback>
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	2200      	movs	r2, #0
 8002dec:	761a      	strb	r2, [r3, #24]
    }
  }
  /* Capture compare 3 event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	691b      	ldr	r3, [r3, #16]
 8002df4:	f003 0308 	and.w	r3, r3, #8
 8002df8:	2b08      	cmp	r3, #8
 8002dfa:	d122      	bne.n	8002e42 <HAL_TIM_IRQHandler+0x104>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) !=RESET)
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	68db      	ldr	r3, [r3, #12]
 8002e02:	f003 0308 	and.w	r3, r3, #8
 8002e06:	2b08      	cmp	r3, #8
 8002e08:	d11b      	bne.n	8002e42 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	681b      	ldr	r3, [r3, #0]
 8002e0e:	f06f 0208 	mvn.w	r2, #8
 8002e12:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	2204      	movs	r2, #4
 8002e18:	761a      	strb	r2, [r3, #24]
      /* Input capture event */
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	681b      	ldr	r3, [r3, #0]
 8002e1e:	69db      	ldr	r3, [r3, #28]
 8002e20:	f003 0303 	and.w	r3, r3, #3
 8002e24:	2b00      	cmp	r3, #0
 8002e26:	d003      	beq.n	8002e30 <HAL_TIM_IRQHandler+0xf2>
      {          
        HAL_TIM_IC_CaptureCallback(htim);
 8002e28:	6878      	ldr	r0, [r7, #4]
 8002e2a:	f000 f905 	bl	8003038 <HAL_TIM_IC_CaptureCallback>
 8002e2e:	e005      	b.n	8002e3c <HAL_TIM_IRQHandler+0xfe>
      }
      /* Output compare event */
      else
      {
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002e30:	6878      	ldr	r0, [r7, #4]
 8002e32:	f000 f8f7 	bl	8003024 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim); 
 8002e36:	6878      	ldr	r0, [r7, #4]
 8002e38:	f000 f908 	bl	800304c <HAL_TIM_PWM_PulseFinishedCallback>
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	2200      	movs	r2, #0
 8002e40:	761a      	strb	r2, [r3, #24]
    }
  }
  /* Capture compare 4 event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	681b      	ldr	r3, [r3, #0]
 8002e46:	691b      	ldr	r3, [r3, #16]
 8002e48:	f003 0310 	and.w	r3, r3, #16
 8002e4c:	2b10      	cmp	r3, #16
 8002e4e:	d122      	bne.n	8002e96 <HAL_TIM_IRQHandler+0x158>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) !=RESET)
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	68db      	ldr	r3, [r3, #12]
 8002e56:	f003 0310 	and.w	r3, r3, #16
 8002e5a:	2b10      	cmp	r3, #16
 8002e5c:	d11b      	bne.n	8002e96 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	f06f 0210 	mvn.w	r2, #16
 8002e66:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	2208      	movs	r2, #8
 8002e6c:	761a      	strb	r2, [r3, #24]
      /* Input capture event */
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	681b      	ldr	r3, [r3, #0]
 8002e72:	69db      	ldr	r3, [r3, #28]
 8002e74:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002e78:	2b00      	cmp	r3, #0
 8002e7a:	d003      	beq.n	8002e84 <HAL_TIM_IRQHandler+0x146>
      {          
        HAL_TIM_IC_CaptureCallback(htim);
 8002e7c:	6878      	ldr	r0, [r7, #4]
 8002e7e:	f000 f8db 	bl	8003038 <HAL_TIM_IC_CaptureCallback>
 8002e82:	e005      	b.n	8002e90 <HAL_TIM_IRQHandler+0x152>
      }
      /* Output compare event */
      else
      {
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002e84:	6878      	ldr	r0, [r7, #4]
 8002e86:	f000 f8cd 	bl	8003024 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002e8a:	6878      	ldr	r0, [r7, #4]
 8002e8c:	f000 f8de 	bl	800304c <HAL_TIM_PWM_PulseFinishedCallback>
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	2200      	movs	r2, #0
 8002e94:	761a      	strb	r2, [r3, #24]
    }
  }
  /* TIM Update event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	691b      	ldr	r3, [r3, #16]
 8002e9c:	f003 0301 	and.w	r3, r3, #1
 8002ea0:	2b01      	cmp	r3, #1
 8002ea2:	d10e      	bne.n	8002ec2 <HAL_TIM_IRQHandler+0x184>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) !=RESET)
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	68db      	ldr	r3, [r3, #12]
 8002eaa:	f003 0301 	and.w	r3, r3, #1
 8002eae:	2b01      	cmp	r3, #1
 8002eb0:	d107      	bne.n	8002ec2 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	681b      	ldr	r3, [r3, #0]
 8002eb6:	f06f 0201 	mvn.w	r2, #1
 8002eba:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 8002ebc:	6878      	ldr	r0, [r7, #4]
 8002ebe:	f000 f8a7 	bl	8003010 <HAL_TIM_PeriodElapsedCallback>
    }
  }
  /* TIM Break input event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	681b      	ldr	r3, [r3, #0]
 8002ec6:	691b      	ldr	r3, [r3, #16]
 8002ec8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002ecc:	2b80      	cmp	r3, #128	; 0x80
 8002ece:	d10e      	bne.n	8002eee <HAL_TIM_IRQHandler+0x1b0>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) !=RESET)
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	681b      	ldr	r3, [r3, #0]
 8002ed4:	68db      	ldr	r3, [r3, #12]
 8002ed6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002eda:	2b80      	cmp	r3, #128	; 0x80
 8002edc:	d107      	bne.n	8002eee <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	681b      	ldr	r3, [r3, #0]
 8002ee2:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002ee6:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 8002ee8:	6878      	ldr	r0, [r7, #4]
 8002eea:	f000 fb87 	bl	80035fc <HAL_TIMEx_BreakCallback>
    }
  }
  /* TIM Trigger detection event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	691b      	ldr	r3, [r3, #16]
 8002ef4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002ef8:	2b40      	cmp	r3, #64	; 0x40
 8002efa:	d10e      	bne.n	8002f1a <HAL_TIM_IRQHandler+0x1dc>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) !=RESET)
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	68db      	ldr	r3, [r3, #12]
 8002f02:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002f06:	2b40      	cmp	r3, #64	; 0x40
 8002f08:	d107      	bne.n	8002f1a <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	681b      	ldr	r3, [r3, #0]
 8002f0e:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002f12:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 8002f14:	6878      	ldr	r0, [r7, #4]
 8002f16:	f000 f8a3 	bl	8003060 <HAL_TIM_TriggerCallback>
    }
  }
  /* TIM commutation event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	681b      	ldr	r3, [r3, #0]
 8002f1e:	691b      	ldr	r3, [r3, #16]
 8002f20:	f003 0320 	and.w	r3, r3, #32
 8002f24:	2b20      	cmp	r3, #32
 8002f26:	d10e      	bne.n	8002f46 <HAL_TIM_IRQHandler+0x208>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) !=RESET)
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	681b      	ldr	r3, [r3, #0]
 8002f2c:	68db      	ldr	r3, [r3, #12]
 8002f2e:	f003 0320 	and.w	r3, r3, #32
 8002f32:	2b20      	cmp	r3, #32
 8002f34:	d107      	bne.n	8002f46 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	681b      	ldr	r3, [r3, #0]
 8002f3a:	f06f 0220 	mvn.w	r2, #32
 8002f3e:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_CommutationCallback(htim);
 8002f40:	6878      	ldr	r0, [r7, #4]
 8002f42:	f000 fb51 	bl	80035e8 <HAL_TIMEx_CommutationCallback>
    }
  }
}
 8002f46:	bf00      	nop
 8002f48:	3708      	adds	r7, #8
 8002f4a:	46bd      	mov	sp, r7
 8002f4c:	bd80      	pop	{r7, pc}
	...

08002f50 <HAL_TIM_OC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim, TIM_OC_InitTypeDef* sConfig, uint32_t Channel)
{
 8002f50:	b580      	push	{r7, lr}
 8002f52:	b084      	sub	sp, #16
 8002f54:	af00      	add	r7, sp, #0
 8002f56:	60f8      	str	r0, [r7, #12]
 8002f58:	60b9      	str	r1, [r7, #8]
 8002f5a:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_CHANNELS(Channel)); 
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  
  /* Check input state */
  __HAL_LOCK(htim); 
 8002f5c:	68fb      	ldr	r3, [r7, #12]
 8002f5e:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8002f62:	2b01      	cmp	r3, #1
 8002f64:	d101      	bne.n	8002f6a <HAL_TIM_OC_ConfigChannel+0x1a>
 8002f66:	2302      	movs	r3, #2
 8002f68:	e04e      	b.n	8003008 <HAL_TIM_OC_ConfigChannel+0xb8>
 8002f6a:	68fb      	ldr	r3, [r7, #12]
 8002f6c:	2201      	movs	r2, #1
 8002f6e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  
  htim->State = HAL_TIM_STATE_BUSY;
 8002f72:	68fb      	ldr	r3, [r7, #12]
 8002f74:	2202      	movs	r2, #2
 8002f76:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  
  switch (Channel)
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	2b0c      	cmp	r3, #12
 8002f7e:	d839      	bhi.n	8002ff4 <HAL_TIM_OC_ConfigChannel+0xa4>
 8002f80:	a201      	add	r2, pc, #4	; (adr r2, 8002f88 <HAL_TIM_OC_ConfigChannel+0x38>)
 8002f82:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002f86:	bf00      	nop
 8002f88:	08002fbd 	.word	0x08002fbd
 8002f8c:	08002ff5 	.word	0x08002ff5
 8002f90:	08002ff5 	.word	0x08002ff5
 8002f94:	08002ff5 	.word	0x08002ff5
 8002f98:	08002fcb 	.word	0x08002fcb
 8002f9c:	08002ff5 	.word	0x08002ff5
 8002fa0:	08002ff5 	.word	0x08002ff5
 8002fa4:	08002ff5 	.word	0x08002ff5
 8002fa8:	08002fd9 	.word	0x08002fd9
 8002fac:	08002ff5 	.word	0x08002ff5
 8002fb0:	08002ff5 	.word	0x08002ff5
 8002fb4:	08002ff5 	.word	0x08002ff5
 8002fb8:	08002fe7 	.word	0x08002fe7
  {
    case TIM_CHANNEL_1:
    {
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8002fbc:	68fb      	ldr	r3, [r7, #12]
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	68b9      	ldr	r1, [r7, #8]
 8002fc2:	4618      	mov	r0, r3
 8002fc4:	f000 f948 	bl	8003258 <TIM_OC1_SetConfig>
    }
    break;
 8002fc8:	e015      	b.n	8002ff6 <HAL_TIM_OC_ConfigChannel+0xa6>
    
    case TIM_CHANNEL_2:
    {
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8002fca:	68fb      	ldr	r3, [r7, #12]
 8002fcc:	681b      	ldr	r3, [r3, #0]
 8002fce:	68b9      	ldr	r1, [r7, #8]
 8002fd0:	4618      	mov	r0, r3
 8002fd2:	f000 f8d3 	bl	800317c <TIM_OC2_SetConfig>
    }
    break;
 8002fd6:	e00e      	b.n	8002ff6 <HAL_TIM_OC_ConfigChannel+0xa6>
    
    case TIM_CHANNEL_3:
    {
       assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));
      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8002fd8:	68fb      	ldr	r3, [r7, #12]
 8002fda:	681b      	ldr	r3, [r3, #0]
 8002fdc:	68b9      	ldr	r1, [r7, #8]
 8002fde:	4618      	mov	r0, r3
 8002fe0:	f000 f9a2 	bl	8003328 <TIM_OC3_SetConfig>
    }
    break;
 8002fe4:	e007      	b.n	8002ff6 <HAL_TIM_OC_ConfigChannel+0xa6>
    
    case TIM_CHANNEL_4:
    {
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));
      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8002fe6:	68fb      	ldr	r3, [r7, #12]
 8002fe8:	681b      	ldr	r3, [r3, #0]
 8002fea:	68b9      	ldr	r1, [r7, #8]
 8002fec:	4618      	mov	r0, r3
 8002fee:	f000 fa07 	bl	8003400 <TIM_OC4_SetConfig>
    }
    break;
 8002ff2:	e000      	b.n	8002ff6 <HAL_TIM_OC_ConfigChannel+0xa6>
    
    default:
    break;    
 8002ff4:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8002ff6:	68fb      	ldr	r3, [r7, #12]
 8002ff8:	2201      	movs	r2, #1
 8002ffa:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  
  __HAL_UNLOCK(htim); 
 8002ffe:	68fb      	ldr	r3, [r7, #12]
 8003000:	2200      	movs	r2, #0
 8003002:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  
  return HAL_OK;
 8003006:	2300      	movs	r3, #0
}
 8003008:	4618      	mov	r0, r3
 800300a:	3710      	adds	r7, #16
 800300c:	46bd      	mov	sp, r7
 800300e:	bd80      	pop	{r7, pc}

08003010 <HAL_TIM_PeriodElapsedCallback>:
  * @param  htim pointer to a TIM_HandleTypeDef structure that contains
  *                the configuration information for TIM module.
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003010:	b480      	push	{r7}
 8003012:	b083      	sub	sp, #12
 8003014:	af00      	add	r7, sp, #0
 8003016:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(htim);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the __HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8003018:	bf00      	nop
 800301a:	370c      	adds	r7, #12
 800301c:	46bd      	mov	sp, r7
 800301e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003022:	4770      	bx	lr

08003024 <HAL_TIM_OC_DelayElapsedCallback>:
  * @param  htim pointer to a TIM_HandleTypeDef structure that contains
  *                the configuration information for TIM module.
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003024:	b480      	push	{r7}
 8003026:	b083      	sub	sp, #12
 8003028:	af00      	add	r7, sp, #0
 800302a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(htim);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the __HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800302c:	bf00      	nop
 800302e:	370c      	adds	r7, #12
 8003030:	46bd      	mov	sp, r7
 8003032:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003036:	4770      	bx	lr

08003038 <HAL_TIM_IC_CaptureCallback>:
  * @param  htim pointer to a TIM_HandleTypeDef structure that contains
  *                the configuration information for TIM module.
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003038:	b480      	push	{r7}
 800303a:	b083      	sub	sp, #12
 800303c:	af00      	add	r7, sp, #0
 800303e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(htim);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the __HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003040:	bf00      	nop
 8003042:	370c      	adds	r7, #12
 8003044:	46bd      	mov	sp, r7
 8003046:	f85d 7b04 	ldr.w	r7, [sp], #4
 800304a:	4770      	bx	lr

0800304c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @param  htim pointer to a TIM_HandleTypeDef structure that contains
  *                the configuration information for TIM module.
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800304c:	b480      	push	{r7}
 800304e:	b083      	sub	sp, #12
 8003050:	af00      	add	r7, sp, #0
 8003052:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(htim);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the __HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003054:	bf00      	nop
 8003056:	370c      	adds	r7, #12
 8003058:	46bd      	mov	sp, r7
 800305a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800305e:	4770      	bx	lr

08003060 <HAL_TIM_TriggerCallback>:
  * @param  htim pointer to a TIM_HandleTypeDef structure that contains
  *                the configuration information for TIM module.
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003060:	b480      	push	{r7}
 8003062:	b083      	sub	sp, #12
 8003064:	af00      	add	r7, sp, #0
 8003066:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(htim);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003068:	bf00      	nop
 800306a:	370c      	adds	r7, #12
 800306c:	46bd      	mov	sp, r7
 800306e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003072:	4770      	bx	lr

08003074 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure pointer on TIM Time Base required parameters  
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003074:	b480      	push	{r7}
 8003076:	b085      	sub	sp, #20
 8003078:	af00      	add	r7, sp, #0
 800307a:	6078      	str	r0, [r7, #4]
 800307c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1 = 0U;
 800307e:	2300      	movs	r3, #0
 8003080:	60fb      	str	r3, [r7, #12]
  tmpcr1 = TIMx->CR1;
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	681b      	ldr	r3, [r3, #0]
 8003086:	60fb      	str	r3, [r7, #12]
  
  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if(IS_TIM_CC3_INSTANCE(TIMx) != RESET)   
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	4a35      	ldr	r2, [pc, #212]	; (8003160 <TIM_Base_SetConfig+0xec>)
 800308c:	4293      	cmp	r3, r2
 800308e:	d00f      	beq.n	80030b0 <TIM_Base_SetConfig+0x3c>
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003096:	d00b      	beq.n	80030b0 <TIM_Base_SetConfig+0x3c>
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	4a32      	ldr	r2, [pc, #200]	; (8003164 <TIM_Base_SetConfig+0xf0>)
 800309c:	4293      	cmp	r3, r2
 800309e:	d007      	beq.n	80030b0 <TIM_Base_SetConfig+0x3c>
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	4a31      	ldr	r2, [pc, #196]	; (8003168 <TIM_Base_SetConfig+0xf4>)
 80030a4:	4293      	cmp	r3, r2
 80030a6:	d003      	beq.n	80030b0 <TIM_Base_SetConfig+0x3c>
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	4a30      	ldr	r2, [pc, #192]	; (800316c <TIM_Base_SetConfig+0xf8>)
 80030ac:	4293      	cmp	r3, r2
 80030ae:	d101      	bne.n	80030b4 <TIM_Base_SetConfig+0x40>
 80030b0:	2301      	movs	r3, #1
 80030b2:	e000      	b.n	80030b6 <TIM_Base_SetConfig+0x42>
 80030b4:	2300      	movs	r3, #0
 80030b6:	2b00      	cmp	r3, #0
 80030b8:	d008      	beq.n	80030cc <TIM_Base_SetConfig+0x58>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80030ba:	68fb      	ldr	r3, [r7, #12]
 80030bc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80030c0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80030c2:	683b      	ldr	r3, [r7, #0]
 80030c4:	685b      	ldr	r3, [r3, #4]
 80030c6:	68fa      	ldr	r2, [r7, #12]
 80030c8:	4313      	orrs	r3, r2
 80030ca:	60fb      	str	r3, [r7, #12]
  }
 
  if(IS_TIM_CC1_INSTANCE(TIMx) != RESET)  
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	4a24      	ldr	r2, [pc, #144]	; (8003160 <TIM_Base_SetConfig+0xec>)
 80030d0:	4293      	cmp	r3, r2
 80030d2:	d01b      	beq.n	800310c <TIM_Base_SetConfig+0x98>
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80030da:	d017      	beq.n	800310c <TIM_Base_SetConfig+0x98>
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	4a21      	ldr	r2, [pc, #132]	; (8003164 <TIM_Base_SetConfig+0xf0>)
 80030e0:	4293      	cmp	r3, r2
 80030e2:	d013      	beq.n	800310c <TIM_Base_SetConfig+0x98>
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	4a20      	ldr	r2, [pc, #128]	; (8003168 <TIM_Base_SetConfig+0xf4>)
 80030e8:	4293      	cmp	r3, r2
 80030ea:	d00f      	beq.n	800310c <TIM_Base_SetConfig+0x98>
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	4a1f      	ldr	r2, [pc, #124]	; (800316c <TIM_Base_SetConfig+0xf8>)
 80030f0:	4293      	cmp	r3, r2
 80030f2:	d00b      	beq.n	800310c <TIM_Base_SetConfig+0x98>
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	4a1e      	ldr	r2, [pc, #120]	; (8003170 <TIM_Base_SetConfig+0xfc>)
 80030f8:	4293      	cmp	r3, r2
 80030fa:	d007      	beq.n	800310c <TIM_Base_SetConfig+0x98>
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	4a1d      	ldr	r2, [pc, #116]	; (8003174 <TIM_Base_SetConfig+0x100>)
 8003100:	4293      	cmp	r3, r2
 8003102:	d003      	beq.n	800310c <TIM_Base_SetConfig+0x98>
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	4a1c      	ldr	r2, [pc, #112]	; (8003178 <TIM_Base_SetConfig+0x104>)
 8003108:	4293      	cmp	r3, r2
 800310a:	d101      	bne.n	8003110 <TIM_Base_SetConfig+0x9c>
 800310c:	2301      	movs	r3, #1
 800310e:	e000      	b.n	8003112 <TIM_Base_SetConfig+0x9e>
 8003110:	2300      	movs	r3, #0
 8003112:	2b00      	cmp	r3, #0
 8003114:	d008      	beq.n	8003128 <TIM_Base_SetConfig+0xb4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003116:	68fb      	ldr	r3, [r7, #12]
 8003118:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800311c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800311e:	683b      	ldr	r3, [r7, #0]
 8003120:	68db      	ldr	r3, [r3, #12]
 8003122:	68fa      	ldr	r2, [r7, #12]
 8003124:	4313      	orrs	r3, r2
 8003126:	60fb      	str	r3, [r7, #12]
  }

  TIMx->CR1 = tmpcr1;
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	68fa      	ldr	r2, [r7, #12]
 800312c:	601a      	str	r2, [r3, #0]

  /* Set the Auto-reload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800312e:	683b      	ldr	r3, [r7, #0]
 8003130:	689a      	ldr	r2, [r3, #8]
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	62da      	str	r2, [r3, #44]	; 0x2c
 
  /* Set the Prescaler value */
  TIMx->PSC = (uint32_t)Structure->Prescaler;
 8003136:	683b      	ldr	r3, [r7, #0]
 8003138:	681a      	ldr	r2, [r3, #0]
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	629a      	str	r2, [r3, #40]	; 0x28
    
  if(IS_TIM_ADVANCED_INSTANCE(TIMx) != RESET)  
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	4a07      	ldr	r2, [pc, #28]	; (8003160 <TIM_Base_SetConfig+0xec>)
 8003142:	4293      	cmp	r3, r2
 8003144:	d103      	bne.n	800314e <TIM_Base_SetConfig+0xda>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003146:	683b      	ldr	r3, [r7, #0]
 8003148:	691a      	ldr	r2, [r3, #16]
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler 
     and the repetition counter(only for TIM1 and TIM8) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	2201      	movs	r2, #1
 8003152:	615a      	str	r2, [r3, #20]
}
 8003154:	bf00      	nop
 8003156:	3714      	adds	r7, #20
 8003158:	46bd      	mov	sp, r7
 800315a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800315e:	4770      	bx	lr
 8003160:	40010000 	.word	0x40010000
 8003164:	40000400 	.word	0x40000400
 8003168:	40000800 	.word	0x40000800
 800316c:	40000c00 	.word	0x40000c00
 8003170:	40014000 	.word	0x40014000
 8003174:	40014400 	.word	0x40014400
 8003178:	40014800 	.word	0x40014800

0800317c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800317c:	b480      	push	{r7}
 800317e:	b087      	sub	sp, #28
 8003180:	af00      	add	r7, sp, #0
 8003182:	6078      	str	r0, [r7, #4]
 8003184:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx = 0U;
 8003186:	2300      	movs	r3, #0
 8003188:	60fb      	str	r3, [r7, #12]
  uint32_t tmpccer = 0U;
 800318a:	2300      	movs	r3, #0
 800318c:	617b      	str	r3, [r7, #20]
  uint32_t tmpcr2 = 0U;
 800318e:	2300      	movs	r3, #0
 8003190:	613b      	str	r3, [r7, #16]
   
  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	6a1b      	ldr	r3, [r3, #32]
 8003196:	f023 0210 	bic.w	r2, r3, #16
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	621a      	str	r2, [r3, #32]
  
  /* Get the TIMx CCER register value */  
  tmpccer = TIMx->CCER;
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	6a1b      	ldr	r3, [r3, #32]
 80031a2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 = TIMx->CR2;
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	685b      	ldr	r3, [r3, #4]
 80031a8:	613b      	str	r3, [r7, #16]
  
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	699b      	ldr	r3, [r3, #24]
 80031ae:	60fb      	str	r3, [r7, #12]
    
  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80031b0:	68fb      	ldr	r3, [r7, #12]
 80031b2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80031b6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80031b8:	68fb      	ldr	r3, [r7, #12]
 80031ba:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80031be:	60fb      	str	r3, [r7, #12]
  
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80031c0:	683b      	ldr	r3, [r7, #0]
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	021b      	lsls	r3, r3, #8
 80031c6:	68fa      	ldr	r2, [r7, #12]
 80031c8:	4313      	orrs	r3, r2
 80031ca:	60fb      	str	r3, [r7, #12]
  
  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80031cc:	697b      	ldr	r3, [r7, #20]
 80031ce:	f023 0320 	bic.w	r3, r3, #32
 80031d2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80031d4:	683b      	ldr	r3, [r7, #0]
 80031d6:	689b      	ldr	r3, [r3, #8]
 80031d8:	011b      	lsls	r3, r3, #4
 80031da:	697a      	ldr	r2, [r7, #20]
 80031dc:	4313      	orrs	r3, r2
 80031de:	617b      	str	r3, [r7, #20]
    
  if(IS_TIM_ADVANCED_INSTANCE(TIMx) != RESET)
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	4a1c      	ldr	r2, [pc, #112]	; (8003254 <TIM_OC2_SetConfig+0xd8>)
 80031e4:	4293      	cmp	r3, r2
 80031e6:	d121      	bne.n	800322c <TIM_OC2_SetConfig+0xb0>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));
    
    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80031e8:	697b      	ldr	r3, [r7, #20]
 80031ea:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80031ee:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80031f0:	683b      	ldr	r3, [r7, #0]
 80031f2:	68db      	ldr	r3, [r3, #12]
 80031f4:	011b      	lsls	r3, r3, #4
 80031f6:	697a      	ldr	r2, [r7, #20]
 80031f8:	4313      	orrs	r3, r2
 80031fa:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80031fc:	697b      	ldr	r3, [r7, #20]
 80031fe:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003202:	617b      	str	r3, [r7, #20]
    
    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8003204:	693b      	ldr	r3, [r7, #16]
 8003206:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800320a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800320c:	693b      	ldr	r3, [r7, #16]
 800320e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003212:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8003214:	683b      	ldr	r3, [r7, #0]
 8003216:	695b      	ldr	r3, [r3, #20]
 8003218:	009b      	lsls	r3, r3, #2
 800321a:	693a      	ldr	r2, [r7, #16]
 800321c:	4313      	orrs	r3, r2
 800321e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8003220:	683b      	ldr	r3, [r7, #0]
 8003222:	699b      	ldr	r3, [r3, #24]
 8003224:	009b      	lsls	r3, r3, #2
 8003226:	693a      	ldr	r2, [r7, #16]
 8003228:	4313      	orrs	r3, r2
 800322a:	613b      	str	r3, [r7, #16]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	693a      	ldr	r2, [r7, #16]
 8003230:	605a      	str	r2, [r3, #4]
  
  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	68fa      	ldr	r2, [r7, #12]
 8003236:	619a      	str	r2, [r3, #24]
  
  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8003238:	683b      	ldr	r3, [r7, #0]
 800323a:	685a      	ldr	r2, [r3, #4]
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	697a      	ldr	r2, [r7, #20]
 8003244:	621a      	str	r2, [r3, #32]
}
 8003246:	bf00      	nop
 8003248:	371c      	adds	r7, #28
 800324a:	46bd      	mov	sp, r7
 800324c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003250:	4770      	bx	lr
 8003252:	bf00      	nop
 8003254:	40010000 	.word	0x40010000

08003258 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003258:	b480      	push	{r7}
 800325a:	b087      	sub	sp, #28
 800325c:	af00      	add	r7, sp, #0
 800325e:	6078      	str	r0, [r7, #4]
 8003260:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx = 0U;
 8003262:	2300      	movs	r3, #0
 8003264:	60fb      	str	r3, [r7, #12]
  uint32_t tmpccer = 0U;
 8003266:	2300      	movs	r3, #0
 8003268:	617b      	str	r3, [r7, #20]
  uint32_t tmpcr2 = 0U;  
 800326a:	2300      	movs	r3, #0
 800326c:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	6a1b      	ldr	r3, [r3, #32]
 8003272:	f023 0201 	bic.w	r2, r3, #1
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	621a      	str	r2, [r3, #32]
  
  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	6a1b      	ldr	r3, [r3, #32]
 800327e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 = TIMx->CR2;
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	685b      	ldr	r3, [r3, #4]
 8003284:	613b      	str	r3, [r7, #16]
  
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	699b      	ldr	r3, [r3, #24]
 800328a:	60fb      	str	r3, [r7, #12]
    
  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800328c:	68fb      	ldr	r3, [r7, #12]
 800328e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003292:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003294:	68fb      	ldr	r3, [r7, #12]
 8003296:	f023 0303 	bic.w	r3, r3, #3
 800329a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800329c:	683b      	ldr	r3, [r7, #0]
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	68fa      	ldr	r2, [r7, #12]
 80032a2:	4313      	orrs	r3, r2
 80032a4:	60fb      	str	r3, [r7, #12]
  
  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80032a6:	697b      	ldr	r3, [r7, #20]
 80032a8:	f023 0302 	bic.w	r3, r3, #2
 80032ac:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80032ae:	683b      	ldr	r3, [r7, #0]
 80032b0:	689b      	ldr	r3, [r3, #8]
 80032b2:	697a      	ldr	r2, [r7, #20]
 80032b4:	4313      	orrs	r3, r2
 80032b6:	617b      	str	r3, [r7, #20]

    
  if(IS_TIM_ADVANCED_INSTANCE(TIMx) != RESET)
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	4a1a      	ldr	r2, [pc, #104]	; (8003324 <TIM_OC1_SetConfig+0xcc>)
 80032bc:	4293      	cmp	r3, r2
 80032be:	d11e      	bne.n	80032fe <TIM_OC1_SetConfig+0xa6>
  {   
    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80032c0:	697b      	ldr	r3, [r7, #20]
 80032c2:	f023 0308 	bic.w	r3, r3, #8
 80032c6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80032c8:	683b      	ldr	r3, [r7, #0]
 80032ca:	68db      	ldr	r3, [r3, #12]
 80032cc:	697a      	ldr	r2, [r7, #20]
 80032ce:	4313      	orrs	r3, r2
 80032d0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80032d2:	697b      	ldr	r3, [r7, #20]
 80032d4:	f023 0304 	bic.w	r3, r3, #4
 80032d8:	617b      	str	r3, [r7, #20]
    
    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80032da:	693b      	ldr	r3, [r7, #16]
 80032dc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80032e0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80032e2:	693b      	ldr	r3, [r7, #16]
 80032e4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80032e8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80032ea:	683b      	ldr	r3, [r7, #0]
 80032ec:	695b      	ldr	r3, [r3, #20]
 80032ee:	693a      	ldr	r2, [r7, #16]
 80032f0:	4313      	orrs	r3, r2
 80032f2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80032f4:	683b      	ldr	r3, [r7, #0]
 80032f6:	699b      	ldr	r3, [r3, #24]
 80032f8:	693a      	ldr	r2, [r7, #16]
 80032fa:	4313      	orrs	r3, r2
 80032fc:	613b      	str	r3, [r7, #16]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	693a      	ldr	r2, [r7, #16]
 8003302:	605a      	str	r2, [r3, #4]
  
  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	68fa      	ldr	r2, [r7, #12]
 8003308:	619a      	str	r2, [r3, #24]
  
  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800330a:	683b      	ldr	r3, [r7, #0]
 800330c:	685a      	ldr	r2, [r3, #4]
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	635a      	str	r2, [r3, #52]	; 0x34
  
  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;  
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	697a      	ldr	r2, [r7, #20]
 8003316:	621a      	str	r2, [r3, #32]
} 
 8003318:	bf00      	nop
 800331a:	371c      	adds	r7, #28
 800331c:	46bd      	mov	sp, r7
 800331e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003322:	4770      	bx	lr
 8003324:	40010000 	.word	0x40010000

08003328 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003328:	b480      	push	{r7}
 800332a:	b087      	sub	sp, #28
 800332c:	af00      	add	r7, sp, #0
 800332e:	6078      	str	r0, [r7, #4]
 8003330:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx = 0U;
 8003332:	2300      	movs	r3, #0
 8003334:	60fb      	str	r3, [r7, #12]
  uint32_t tmpccer = 0U;
 8003336:	2300      	movs	r3, #0
 8003338:	617b      	str	r3, [r7, #20]
  uint32_t tmpcr2 = 0U;   
 800333a:	2300      	movs	r3, #0
 800333c:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	6a1b      	ldr	r3, [r3, #32]
 8003342:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	621a      	str	r2, [r3, #32]
  
  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	6a1b      	ldr	r3, [r3, #32]
 800334e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 = TIMx->CR2;
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	685b      	ldr	r3, [r3, #4]
 8003354:	613b      	str	r3, [r7, #16]
  
  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	69db      	ldr	r3, [r3, #28]
 800335a:	60fb      	str	r3, [r7, #12]
    
  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800335c:	68fb      	ldr	r3, [r7, #12]
 800335e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003362:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;  
 8003364:	68fb      	ldr	r3, [r7, #12]
 8003366:	f023 0303 	bic.w	r3, r3, #3
 800336a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800336c:	683b      	ldr	r3, [r7, #0]
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	68fa      	ldr	r2, [r7, #12]
 8003372:	4313      	orrs	r3, r2
 8003374:	60fb      	str	r3, [r7, #12]
  
  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8003376:	697b      	ldr	r3, [r7, #20]
 8003378:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800337c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800337e:	683b      	ldr	r3, [r7, #0]
 8003380:	689b      	ldr	r3, [r3, #8]
 8003382:	021b      	lsls	r3, r3, #8
 8003384:	697a      	ldr	r2, [r7, #20]
 8003386:	4313      	orrs	r3, r2
 8003388:	617b      	str	r3, [r7, #20]
    
  if(IS_TIM_ADVANCED_INSTANCE(TIMx) != RESET)
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	4a1b      	ldr	r2, [pc, #108]	; (80033fc <TIM_OC3_SetConfig+0xd4>)
 800338e:	4293      	cmp	r3, r2
 8003390:	d121      	bne.n	80033d6 <TIM_OC3_SetConfig+0xae>
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));
    
    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8003392:	697b      	ldr	r3, [r7, #20]
 8003394:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003398:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800339a:	683b      	ldr	r3, [r7, #0]
 800339c:	68db      	ldr	r3, [r3, #12]
 800339e:	021b      	lsls	r3, r3, #8
 80033a0:	697a      	ldr	r2, [r7, #20]
 80033a2:	4313      	orrs	r3, r2
 80033a4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80033a6:	697b      	ldr	r3, [r7, #20]
 80033a8:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80033ac:	617b      	str	r3, [r7, #20]
    
    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80033ae:	693b      	ldr	r3, [r7, #16]
 80033b0:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80033b4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80033b6:	693b      	ldr	r3, [r7, #16]
 80033b8:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80033bc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80033be:	683b      	ldr	r3, [r7, #0]
 80033c0:	695b      	ldr	r3, [r3, #20]
 80033c2:	011b      	lsls	r3, r3, #4
 80033c4:	693a      	ldr	r2, [r7, #16]
 80033c6:	4313      	orrs	r3, r2
 80033c8:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80033ca:	683b      	ldr	r3, [r7, #0]
 80033cc:	699b      	ldr	r3, [r3, #24]
 80033ce:	011b      	lsls	r3, r3, #4
 80033d0:	693a      	ldr	r2, [r7, #16]
 80033d2:	4313      	orrs	r3, r2
 80033d4:	613b      	str	r3, [r7, #16]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	693a      	ldr	r2, [r7, #16]
 80033da:	605a      	str	r2, [r3, #4]
  
  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	68fa      	ldr	r2, [r7, #12]
 80033e0:	61da      	str	r2, [r3, #28]
  
  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80033e2:	683b      	ldr	r3, [r7, #0]
 80033e4:	685a      	ldr	r2, [r3, #4]
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	63da      	str	r2, [r3, #60]	; 0x3c
  
  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	697a      	ldr	r2, [r7, #20]
 80033ee:	621a      	str	r2, [r3, #32]
}
 80033f0:	bf00      	nop
 80033f2:	371c      	adds	r7, #28
 80033f4:	46bd      	mov	sp, r7
 80033f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033fa:	4770      	bx	lr
 80033fc:	40010000 	.word	0x40010000

08003400 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003400:	b480      	push	{r7}
 8003402:	b087      	sub	sp, #28
 8003404:	af00      	add	r7, sp, #0
 8003406:	6078      	str	r0, [r7, #4]
 8003408:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx = 0U;
 800340a:	2300      	movs	r3, #0
 800340c:	613b      	str	r3, [r7, #16]
  uint32_t tmpccer = 0U;
 800340e:	2300      	movs	r3, #0
 8003410:	60fb      	str	r3, [r7, #12]
  uint32_t tmpcr2 = 0U;
 8003412:	2300      	movs	r3, #0
 8003414:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	6a1b      	ldr	r3, [r3, #32]
 800341a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	621a      	str	r2, [r3, #32]
  
  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	6a1b      	ldr	r3, [r3, #32]
 8003426:	60fb      	str	r3, [r7, #12]
  /* Get the TIMx CR2 register value */
  tmpcr2 = TIMx->CR2;
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	685b      	ldr	r3, [r3, #4]
 800342c:	617b      	str	r3, [r7, #20]
  
  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	69db      	ldr	r3, [r3, #28]
 8003432:	613b      	str	r3, [r7, #16]
    
  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8003434:	693b      	ldr	r3, [r7, #16]
 8003436:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800343a:	613b      	str	r3, [r7, #16]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800343c:	693b      	ldr	r3, [r7, #16]
 800343e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003442:	613b      	str	r3, [r7, #16]
  
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003444:	683b      	ldr	r3, [r7, #0]
 8003446:	681b      	ldr	r3, [r3, #0]
 8003448:	021b      	lsls	r3, r3, #8
 800344a:	693a      	ldr	r2, [r7, #16]
 800344c:	4313      	orrs	r3, r2
 800344e:	613b      	str	r3, [r7, #16]
  
  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8003450:	68fb      	ldr	r3, [r7, #12]
 8003452:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003456:	60fb      	str	r3, [r7, #12]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8003458:	683b      	ldr	r3, [r7, #0]
 800345a:	689b      	ldr	r3, [r3, #8]
 800345c:	031b      	lsls	r3, r3, #12
 800345e:	68fa      	ldr	r2, [r7, #12]
 8003460:	4313      	orrs	r3, r2
 8003462:	60fb      	str	r3, [r7, #12]
   
  /*if((TIMx == TIM1) || (TIMx == TIM8))*/
  if(IS_TIM_ADVANCED_INSTANCE(TIMx) != RESET)
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	4a10      	ldr	r2, [pc, #64]	; (80034a8 <TIM_OC4_SetConfig+0xa8>)
 8003468:	4293      	cmp	r3, r2
 800346a:	d109      	bne.n	8003480 <TIM_OC4_SetConfig+0x80>
  {
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800346c:	697b      	ldr	r3, [r7, #20]
 800346e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003472:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8003474:	683b      	ldr	r3, [r7, #0]
 8003476:	695b      	ldr	r3, [r3, #20]
 8003478:	019b      	lsls	r3, r3, #6
 800347a:	697a      	ldr	r2, [r7, #20]
 800347c:	4313      	orrs	r3, r2
 800347e:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	697a      	ldr	r2, [r7, #20]
 8003484:	605a      	str	r2, [r3, #4]
  
  /* Write to TIMx CCMR2 */  
  TIMx->CCMR2 = tmpccmrx;
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	693a      	ldr	r2, [r7, #16]
 800348a:	61da      	str	r2, [r3, #28]
    
  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800348c:	683b      	ldr	r3, [r7, #0]
 800348e:	685a      	ldr	r2, [r3, #4]
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	641a      	str	r2, [r3, #64]	; 0x40
  
  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	68fa      	ldr	r2, [r7, #12]
 8003498:	621a      	str	r2, [r3, #32]
}
 800349a:	bf00      	nop
 800349c:	371c      	adds	r7, #28
 800349e:	46bd      	mov	sp, r7
 80034a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034a4:	4770      	bx	lr
 80034a6:	bf00      	nop
 80034a8:	40010000 	.word	0x40010000

080034ac <HAL_TIMEx_MasterConfigSynchronization>:
  *         contains the selected trigger output (TRGO) and the Master/Slave 
  *         mode. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim, TIM_MasterConfigTypeDef * sMasterConfig)
{
 80034ac:	b480      	push	{r7}
 80034ae:	b083      	sub	sp, #12
 80034b0:	af00      	add	r7, sp, #0
 80034b2:	6078      	str	r0, [r7, #4]
 80034b4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));
  
  __HAL_LOCK(htim);
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80034bc:	2b01      	cmp	r3, #1
 80034be:	d101      	bne.n	80034c4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80034c0:	2302      	movs	r3, #2
 80034c2:	e032      	b.n	800352a <HAL_TIMEx_MasterConfigSynchronization+0x7e>
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	2201      	movs	r2, #1
 80034c8:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  
  htim->State = HAL_TIM_STATE_BUSY;
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	2202      	movs	r2, #2
 80034d0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Reset the MMS Bits */
  htim->Instance->CR2 &= ~TIM_CR2_MMS;
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	687a      	ldr	r2, [r7, #4]
 80034da:	6812      	ldr	r2, [r2, #0]
 80034dc:	6852      	ldr	r2, [r2, #4]
 80034de:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 80034e2:	605a      	str	r2, [r3, #4]
  /* Select the TRGO source */
  htim->Instance->CR2 |= sMasterConfig->MasterOutputTrigger;
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	687a      	ldr	r2, [r7, #4]
 80034ea:	6812      	ldr	r2, [r2, #0]
 80034ec:	6851      	ldr	r1, [r2, #4]
 80034ee:	683a      	ldr	r2, [r7, #0]
 80034f0:	6812      	ldr	r2, [r2, #0]
 80034f2:	430a      	orrs	r2, r1
 80034f4:	605a      	str	r2, [r3, #4]

  /* Reset the MSM Bit */
  htim->Instance->SMCR &= ~TIM_SMCR_MSM;
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	681b      	ldr	r3, [r3, #0]
 80034fa:	687a      	ldr	r2, [r7, #4]
 80034fc:	6812      	ldr	r2, [r2, #0]
 80034fe:	6892      	ldr	r2, [r2, #8]
 8003500:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003504:	609a      	str	r2, [r3, #8]
  /* Set or Reset the MSM Bit */
  htim->Instance->SMCR |= sMasterConfig->MasterSlaveMode;
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	681b      	ldr	r3, [r3, #0]
 800350a:	687a      	ldr	r2, [r7, #4]
 800350c:	6812      	ldr	r2, [r2, #0]
 800350e:	6891      	ldr	r1, [r2, #8]
 8003510:	683a      	ldr	r2, [r7, #0]
 8003512:	6852      	ldr	r2, [r2, #4]
 8003514:	430a      	orrs	r2, r1
 8003516:	609a      	str	r2, [r3, #8]
  
  htim->State = HAL_TIM_STATE_READY;
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	2201      	movs	r2, #1
 800351c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  
  __HAL_UNLOCK(htim);
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	2200      	movs	r2, #0
 8003524:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  
  return HAL_OK;
 8003528:	2300      	movs	r3, #0
} 
 800352a:	4618      	mov	r0, r3
 800352c:	370c      	adds	r7, #12
 800352e:	46bd      	mov	sp, r7
 8003530:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003534:	4770      	bx	lr

08003536 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         contains the BDTR Register configuration  information for the TIM peripheral. 
  * @retval HAL status
  */    
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef * sBreakDeadTimeConfig)
{
 8003536:	b480      	push	{r7}
 8003538:	b085      	sub	sp, #20
 800353a:	af00      	add	r7, sp, #0
 800353c:	6078      	str	r0, [r7, #4]
 800353e:	6039      	str	r1, [r7, #0]
  uint32_t tmpbdtr = 0U;
 8003540:	2300      	movs	r3, #0
 8003542:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));
  
  /* Check input state */
  __HAL_LOCK(htim);
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800354a:	2b01      	cmp	r3, #1
 800354c:	d101      	bne.n	8003552 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800354e:	2302      	movs	r3, #2
 8003550:	e044      	b.n	80035dc <HAL_TIMEx_ConfigBreakDeadTime+0xa6>
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	2201      	movs	r2, #1
 8003556:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  
  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
  the OSSI State, the dead time value and the Automatic Output Enable Bit */
  
  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800355a:	68fb      	ldr	r3, [r7, #12]
 800355c:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8003560:	683b      	ldr	r3, [r7, #0]
 8003562:	68db      	ldr	r3, [r3, #12]
 8003564:	4313      	orrs	r3, r2
 8003566:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8003568:	68fb      	ldr	r3, [r7, #12]
 800356a:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800356e:	683b      	ldr	r3, [r7, #0]
 8003570:	689b      	ldr	r3, [r3, #8]
 8003572:	4313      	orrs	r3, r2
 8003574:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8003576:	68fb      	ldr	r3, [r7, #12]
 8003578:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800357c:	683b      	ldr	r3, [r7, #0]
 800357e:	685b      	ldr	r3, [r3, #4]
 8003580:	4313      	orrs	r3, r2
 8003582:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8003584:	68fb      	ldr	r3, [r7, #12]
 8003586:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800358a:	683b      	ldr	r3, [r7, #0]
 800358c:	681b      	ldr	r3, [r3, #0]
 800358e:	4313      	orrs	r3, r2
 8003590:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8003592:	68fb      	ldr	r3, [r7, #12]
 8003594:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8003598:	683b      	ldr	r3, [r7, #0]
 800359a:	691b      	ldr	r3, [r3, #16]
 800359c:	4313      	orrs	r3, r2
 800359e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80035a0:	68fb      	ldr	r3, [r7, #12]
 80035a2:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 80035a6:	683b      	ldr	r3, [r7, #0]
 80035a8:	695b      	ldr	r3, [r3, #20]
 80035aa:	4313      	orrs	r3, r2
 80035ac:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80035ae:	68fb      	ldr	r3, [r7, #12]
 80035b0:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 80035b4:	683b      	ldr	r3, [r7, #0]
 80035b6:	699b      	ldr	r3, [r3, #24]
 80035b8:	4313      	orrs	r3, r2
 80035ba:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_MOE, sBreakDeadTimeConfig->AutomaticOutput);
 80035bc:	68fb      	ldr	r3, [r7, #12]
 80035be:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 80035c2:	683b      	ldr	r3, [r7, #0]
 80035c4:	699b      	ldr	r3, [r3, #24]
 80035c6:	4313      	orrs	r3, r2
 80035c8:	60fb      	str	r3, [r7, #12]
  
  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	681b      	ldr	r3, [r3, #0]
 80035ce:	68fa      	ldr	r2, [r7, #12]
 80035d0:	645a      	str	r2, [r3, #68]	; 0x44
  
  __HAL_UNLOCK(htim);
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	2200      	movs	r2, #0
 80035d6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return HAL_OK;
 80035da:	2300      	movs	r3, #0
}
 80035dc:	4618      	mov	r0, r3
 80035de:	3714      	adds	r7, #20
 80035e0:	46bd      	mov	sp, r7
 80035e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035e6:	4770      	bx	lr

080035e8 <HAL_TIMEx_CommutationCallback>:
  * @param  htim pointer to a TIM_HandleTypeDef structure that contains
  *                the configuration information for TIM module.
  * @retval None
  */
__weak void HAL_TIMEx_CommutationCallback(TIM_HandleTypeDef *htim)
{
 80035e8:	b480      	push	{r7}
 80035ea:	b083      	sub	sp, #12
 80035ec:	af00      	add	r7, sp, #0
 80035ee:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(htim);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutationCallback could be implemented in the user file
   */
}
 80035f0:	bf00      	nop
 80035f2:	370c      	adds	r7, #12
 80035f4:	46bd      	mov	sp, r7
 80035f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035fa:	4770      	bx	lr

080035fc <HAL_TIMEx_BreakCallback>:
  * @param  htim pointer to a TIM_HandleTypeDef structure that contains
  *                the configuration information for TIM module.
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80035fc:	b480      	push	{r7}
 80035fe:	b083      	sub	sp, #12
 8003600:	af00      	add	r7, sp, #0
 8003602:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(htim);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003604:	bf00      	nop
 8003606:	370c      	adds	r7, #12
 8003608:	46bd      	mov	sp, r7
 800360a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800360e:	4770      	bx	lr

08003610 <HAL_UART_Init>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003610:	b580      	push	{r7, lr}
 8003612:	b082      	sub	sp, #8
 8003614:	af00      	add	r7, sp, #0
 8003616:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if(huart == NULL)
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	2b00      	cmp	r3, #0
 800361c:	d101      	bne.n	8003622 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800361e:	2301      	movs	r3, #1
 8003620:	e03f      	b.n	80036a2 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
  
  if(huart->gState == HAL_UART_STATE_RESET)
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8003628:	b2db      	uxtb	r3, r3
 800362a:	2b00      	cmp	r3, #0
 800362c:	d106      	bne.n	800363c <HAL_UART_Init+0x2c>
  {  
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	2200      	movs	r2, #0
 8003632:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
    /* Init the low level hardware */
    HAL_UART_MspInit(huart);
 8003636:	6878      	ldr	r0, [r7, #4]
 8003638:	f7fd fbb6 	bl	8000da8 <HAL_UART_MspInit>
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	2224      	movs	r2, #36	; 0x24
 8003640:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	681b      	ldr	r3, [r3, #0]
 8003648:	687a      	ldr	r2, [r7, #4]
 800364a:	6812      	ldr	r2, [r2, #0]
 800364c:	68d2      	ldr	r2, [r2, #12]
 800364e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003652:	60da      	str	r2, [r3, #12]
  
  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003654:	6878      	ldr	r0, [r7, #4]
 8003656:	f000 fb3d 	bl	8003cd4 <UART_SetConfig>
  
  /* In asynchronous mode, the following bits must be kept cleared: 
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	681b      	ldr	r3, [r3, #0]
 800365e:	687a      	ldr	r2, [r7, #4]
 8003660:	6812      	ldr	r2, [r2, #0]
 8003662:	6912      	ldr	r2, [r2, #16]
 8003664:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003668:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	681b      	ldr	r3, [r3, #0]
 800366e:	687a      	ldr	r2, [r7, #4]
 8003670:	6812      	ldr	r2, [r2, #0]
 8003672:	6952      	ldr	r2, [r2, #20]
 8003674:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003678:	615a      	str	r2, [r3, #20]
  
  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	681b      	ldr	r3, [r3, #0]
 800367e:	687a      	ldr	r2, [r7, #4]
 8003680:	6812      	ldr	r2, [r2, #0]
 8003682:	68d2      	ldr	r2, [r2, #12]
 8003684:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003688:	60da      	str	r2, [r3, #12]
  
  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	2200      	movs	r2, #0
 800368e:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState= HAL_UART_STATE_READY;
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	2220      	movs	r2, #32
 8003694:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState= HAL_UART_STATE_READY;
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	2220      	movs	r2, #32
 800369c:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
  
  return HAL_OK;
 80036a0:	2300      	movs	r3, #0
}
 80036a2:	4618      	mov	r0, r3
 80036a4:	3708      	adds	r7, #8
 80036a6:	46bd      	mov	sp, r7
 80036a8:	bd80      	pop	{r7, pc}

080036aa <HAL_UART_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80036aa:	b580      	push	{r7, lr}
 80036ac:	b088      	sub	sp, #32
 80036ae:	af02      	add	r7, sp, #8
 80036b0:	60f8      	str	r0, [r7, #12]
 80036b2:	60b9      	str	r1, [r7, #8]
 80036b4:	603b      	str	r3, [r7, #0]
 80036b6:	4613      	mov	r3, r2
 80036b8:	80fb      	strh	r3, [r7, #6]
  uint16_t* tmp;
  uint32_t tickstart = 0U;
 80036ba:	2300      	movs	r3, #0
 80036bc:	617b      	str	r3, [r7, #20]
  
  /* Check that a Tx process is not already ongoing */
  if(huart->gState == HAL_UART_STATE_READY) 
 80036be:	68fb      	ldr	r3, [r7, #12]
 80036c0:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80036c4:	b2db      	uxtb	r3, r3
 80036c6:	2b20      	cmp	r3, #32
 80036c8:	f040 8082 	bne.w	80037d0 <HAL_UART_Transmit+0x126>
  {
    if((pData == NULL ) || (Size == 0)) 
 80036cc:	68bb      	ldr	r3, [r7, #8]
 80036ce:	2b00      	cmp	r3, #0
 80036d0:	d002      	beq.n	80036d8 <HAL_UART_Transmit+0x2e>
 80036d2:	88fb      	ldrh	r3, [r7, #6]
 80036d4:	2b00      	cmp	r3, #0
 80036d6:	d101      	bne.n	80036dc <HAL_UART_Transmit+0x32>
    {
      return  HAL_ERROR;
 80036d8:	2301      	movs	r3, #1
 80036da:	e07a      	b.n	80037d2 <HAL_UART_Transmit+0x128>
    }
    
    /* Process Locked */
    __HAL_LOCK(huart);
 80036dc:	68fb      	ldr	r3, [r7, #12]
 80036de:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80036e2:	2b01      	cmp	r3, #1
 80036e4:	d101      	bne.n	80036ea <HAL_UART_Transmit+0x40>
 80036e6:	2302      	movs	r3, #2
 80036e8:	e073      	b.n	80037d2 <HAL_UART_Transmit+0x128>
 80036ea:	68fb      	ldr	r3, [r7, #12]
 80036ec:	2201      	movs	r2, #1
 80036ee:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
    
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80036f2:	68fb      	ldr	r3, [r7, #12]
 80036f4:	2200      	movs	r2, #0
 80036f6:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80036f8:	68fb      	ldr	r3, [r7, #12]
 80036fa:	2221      	movs	r2, #33	; 0x21
 80036fc:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
	
    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 8003700:	f7fd fcb4 	bl	800106c <HAL_GetTick>
 8003704:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8003706:	68fb      	ldr	r3, [r7, #12]
 8003708:	88fa      	ldrh	r2, [r7, #6]
 800370a:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800370c:	68fb      	ldr	r3, [r7, #12]
 800370e:	88fa      	ldrh	r2, [r7, #6]
 8003710:	84da      	strh	r2, [r3, #38]	; 0x26
    while(huart->TxXferCount > 0U)
 8003712:	e041      	b.n	8003798 <HAL_UART_Transmit+0xee>
    {
      huart->TxXferCount--;
 8003714:	68fb      	ldr	r3, [r7, #12]
 8003716:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003718:	b29b      	uxth	r3, r3
 800371a:	3b01      	subs	r3, #1
 800371c:	b29a      	uxth	r2, r3
 800371e:	68fb      	ldr	r3, [r7, #12]
 8003720:	84da      	strh	r2, [r3, #38]	; 0x26
      if(huart->Init.WordLength == UART_WORDLENGTH_9B)
 8003722:	68fb      	ldr	r3, [r7, #12]
 8003724:	689b      	ldr	r3, [r3, #8]
 8003726:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800372a:	d121      	bne.n	8003770 <HAL_UART_Transmit+0xc6>
      {
        if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800372c:	683b      	ldr	r3, [r7, #0]
 800372e:	9300      	str	r3, [sp, #0]
 8003730:	697b      	ldr	r3, [r7, #20]
 8003732:	2200      	movs	r2, #0
 8003734:	2180      	movs	r1, #128	; 0x80
 8003736:	68f8      	ldr	r0, [r7, #12]
 8003738:	f000 f96a 	bl	8003a10 <UART_WaitOnFlagUntilTimeout>
 800373c:	4603      	mov	r3, r0
 800373e:	2b00      	cmp	r3, #0
 8003740:	d001      	beq.n	8003746 <HAL_UART_Transmit+0x9c>
        { 
          return HAL_TIMEOUT;
 8003742:	2303      	movs	r3, #3
 8003744:	e045      	b.n	80037d2 <HAL_UART_Transmit+0x128>
        }
        tmp = (uint16_t*) pData;
 8003746:	68bb      	ldr	r3, [r7, #8]
 8003748:	613b      	str	r3, [r7, #16]
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 800374a:	68fb      	ldr	r3, [r7, #12]
 800374c:	681b      	ldr	r3, [r3, #0]
 800374e:	693a      	ldr	r2, [r7, #16]
 8003750:	8812      	ldrh	r2, [r2, #0]
 8003752:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003756:	605a      	str	r2, [r3, #4]
        if(huart->Init.Parity == UART_PARITY_NONE)
 8003758:	68fb      	ldr	r3, [r7, #12]
 800375a:	691b      	ldr	r3, [r3, #16]
 800375c:	2b00      	cmp	r3, #0
 800375e:	d103      	bne.n	8003768 <HAL_UART_Transmit+0xbe>
        {
          pData +=2U;
 8003760:	68bb      	ldr	r3, [r7, #8]
 8003762:	3302      	adds	r3, #2
 8003764:	60bb      	str	r3, [r7, #8]
 8003766:	e017      	b.n	8003798 <HAL_UART_Transmit+0xee>
        }
        else
        { 
          pData +=1U;
 8003768:	68bb      	ldr	r3, [r7, #8]
 800376a:	3301      	adds	r3, #1
 800376c:	60bb      	str	r3, [r7, #8]
 800376e:	e013      	b.n	8003798 <HAL_UART_Transmit+0xee>
        }
      } 
      else
      {
        if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003770:	683b      	ldr	r3, [r7, #0]
 8003772:	9300      	str	r3, [sp, #0]
 8003774:	697b      	ldr	r3, [r7, #20]
 8003776:	2200      	movs	r2, #0
 8003778:	2180      	movs	r1, #128	; 0x80
 800377a:	68f8      	ldr	r0, [r7, #12]
 800377c:	f000 f948 	bl	8003a10 <UART_WaitOnFlagUntilTimeout>
 8003780:	4603      	mov	r3, r0
 8003782:	2b00      	cmp	r3, #0
 8003784:	d001      	beq.n	800378a <HAL_UART_Transmit+0xe0>
        {
          return HAL_TIMEOUT;
 8003786:	2303      	movs	r3, #3
 8003788:	e023      	b.n	80037d2 <HAL_UART_Transmit+0x128>
        }
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 800378a:	68fb      	ldr	r3, [r7, #12]
 800378c:	681a      	ldr	r2, [r3, #0]
 800378e:	68bb      	ldr	r3, [r7, #8]
 8003790:	1c59      	adds	r1, r3, #1
 8003792:	60b9      	str	r1, [r7, #8]
 8003794:	781b      	ldrb	r3, [r3, #0]
 8003796:	6053      	str	r3, [r2, #4]
    while(huart->TxXferCount > 0U)
 8003798:	68fb      	ldr	r3, [r7, #12]
 800379a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800379c:	b29b      	uxth	r3, r3
 800379e:	2b00      	cmp	r3, #0
 80037a0:	d1b8      	bne.n	8003714 <HAL_UART_Transmit+0x6a>
      } 
    }
    
    if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80037a2:	683b      	ldr	r3, [r7, #0]
 80037a4:	9300      	str	r3, [sp, #0]
 80037a6:	697b      	ldr	r3, [r7, #20]
 80037a8:	2200      	movs	r2, #0
 80037aa:	2140      	movs	r1, #64	; 0x40
 80037ac:	68f8      	ldr	r0, [r7, #12]
 80037ae:	f000 f92f 	bl	8003a10 <UART_WaitOnFlagUntilTimeout>
 80037b2:	4603      	mov	r3, r0
 80037b4:	2b00      	cmp	r3, #0
 80037b6:	d001      	beq.n	80037bc <HAL_UART_Transmit+0x112>
    { 
      return HAL_TIMEOUT;
 80037b8:	2303      	movs	r3, #3
 80037ba:	e00a      	b.n	80037d2 <HAL_UART_Transmit+0x128>
    }
    
    /* At end of Tx process, restore huart->gState to Ready */
      huart->gState = HAL_UART_STATE_READY;
 80037bc:	68fb      	ldr	r3, [r7, #12]
 80037be:	2220      	movs	r2, #32
 80037c0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
    
    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80037c4:	68fb      	ldr	r3, [r7, #12]
 80037c6:	2200      	movs	r2, #0
 80037c8:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
    
    return HAL_OK;
 80037cc:	2300      	movs	r3, #0
 80037ce:	e000      	b.n	80037d2 <HAL_UART_Transmit+0x128>
  }
  else
  {
    return HAL_BUSY;
 80037d0:	2302      	movs	r3, #2
  }
}
 80037d2:	4618      	mov	r0, r3
 80037d4:	3718      	adds	r7, #24
 80037d6:	46bd      	mov	sp, r7
 80037d8:	bd80      	pop	{r7, pc}
	...

080037dc <HAL_UART_IRQHandler>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80037dc:	b580      	push	{r7, lr}
 80037de:	b088      	sub	sp, #32
 80037e0:	af00      	add	r7, sp, #0
 80037e2:	6078      	str	r0, [r7, #4]
   uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	681b      	ldr	r3, [r3, #0]
 80037e8:	681b      	ldr	r3, [r3, #0]
 80037ea:	61fb      	str	r3, [r7, #28]
   uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	681b      	ldr	r3, [r3, #0]
 80037f0:	68db      	ldr	r3, [r3, #12]
 80037f2:	61bb      	str	r3, [r7, #24]
   uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	681b      	ldr	r3, [r3, #0]
 80037f8:	695b      	ldr	r3, [r3, #20]
 80037fa:	617b      	str	r3, [r7, #20]
   uint32_t errorflags = 0x00U;
 80037fc:	2300      	movs	r3, #0
 80037fe:	613b      	str	r3, [r7, #16]
   uint32_t dmarequest = 0x00U;
 8003800:	2300      	movs	r3, #0
 8003802:	60fb      	str	r3, [r7, #12]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8003804:	69fb      	ldr	r3, [r7, #28]
 8003806:	f003 030f 	and.w	r3, r3, #15
 800380a:	613b      	str	r3, [r7, #16]
  if(errorflags == RESET)
 800380c:	693b      	ldr	r3, [r7, #16]
 800380e:	2b00      	cmp	r3, #0
 8003810:	d10d      	bne.n	800382e <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if(((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003812:	69fb      	ldr	r3, [r7, #28]
 8003814:	f003 0320 	and.w	r3, r3, #32
 8003818:	2b00      	cmp	r3, #0
 800381a:	d008      	beq.n	800382e <HAL_UART_IRQHandler+0x52>
 800381c:	69bb      	ldr	r3, [r7, #24]
 800381e:	f003 0320 	and.w	r3, r3, #32
 8003822:	2b00      	cmp	r3, #0
 8003824:	d003      	beq.n	800382e <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 8003826:	6878      	ldr	r0, [r7, #4]
 8003828:	f000 f9db 	bl	8003be2 <UART_Receive_IT>
      return;
 800382c:	e0cc      	b.n	80039c8 <HAL_UART_IRQHandler+0x1ec>
    }
  }  

  /* If some errors occur */
  if((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800382e:	693b      	ldr	r3, [r7, #16]
 8003830:	2b00      	cmp	r3, #0
 8003832:	f000 80ab 	beq.w	800398c <HAL_UART_IRQHandler+0x1b0>
 8003836:	697b      	ldr	r3, [r7, #20]
 8003838:	f003 0301 	and.w	r3, r3, #1
 800383c:	2b00      	cmp	r3, #0
 800383e:	d105      	bne.n	800384c <HAL_UART_IRQHandler+0x70>
 8003840:	69bb      	ldr	r3, [r7, #24]
 8003842:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8003846:	2b00      	cmp	r3, #0
 8003848:	f000 80a0 	beq.w	800398c <HAL_UART_IRQHandler+0x1b0>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if(((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800384c:	69fb      	ldr	r3, [r7, #28]
 800384e:	f003 0301 	and.w	r3, r3, #1
 8003852:	2b00      	cmp	r3, #0
 8003854:	d00a      	beq.n	800386c <HAL_UART_IRQHandler+0x90>
 8003856:	69bb      	ldr	r3, [r7, #24]
 8003858:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800385c:	2b00      	cmp	r3, #0
 800385e:	d005      	beq.n	800386c <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003864:	f043 0201 	orr.w	r2, r3, #1
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	63da      	str	r2, [r3, #60]	; 0x3c
    }
    
    /* UART noise error interrupt occurred -----------------------------------*/
    if(((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800386c:	69fb      	ldr	r3, [r7, #28]
 800386e:	f003 0304 	and.w	r3, r3, #4
 8003872:	2b00      	cmp	r3, #0
 8003874:	d00a      	beq.n	800388c <HAL_UART_IRQHandler+0xb0>
 8003876:	697b      	ldr	r3, [r7, #20]
 8003878:	f003 0301 	and.w	r3, r3, #1
 800387c:	2b00      	cmp	r3, #0
 800387e:	d005      	beq.n	800388c <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003884:	f043 0202 	orr.w	r2, r3, #2
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	63da      	str	r2, [r3, #60]	; 0x3c
    }
    
    /* UART frame error interrupt occurred -----------------------------------*/
    if(((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800388c:	69fb      	ldr	r3, [r7, #28]
 800388e:	f003 0302 	and.w	r3, r3, #2
 8003892:	2b00      	cmp	r3, #0
 8003894:	d00a      	beq.n	80038ac <HAL_UART_IRQHandler+0xd0>
 8003896:	697b      	ldr	r3, [r7, #20]
 8003898:	f003 0301 	and.w	r3, r3, #1
 800389c:	2b00      	cmp	r3, #0
 800389e:	d005      	beq.n	80038ac <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80038a4:	f043 0204 	orr.w	r2, r3, #4
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	63da      	str	r2, [r3, #60]	; 0x3c
    }
    
    /* UART Over-Run interrupt occurred --------------------------------------*/
    if(((isrflags & USART_SR_ORE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80038ac:	69fb      	ldr	r3, [r7, #28]
 80038ae:	f003 0308 	and.w	r3, r3, #8
 80038b2:	2b00      	cmp	r3, #0
 80038b4:	d00a      	beq.n	80038cc <HAL_UART_IRQHandler+0xf0>
 80038b6:	697b      	ldr	r3, [r7, #20]
 80038b8:	f003 0301 	and.w	r3, r3, #1
 80038bc:	2b00      	cmp	r3, #0
 80038be:	d005      	beq.n	80038cc <HAL_UART_IRQHandler+0xf0>
    { 
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80038c4:	f043 0208 	orr.w	r2, r3, #8
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* Call UART Error Call back function if need be --------------------------*/    
    if(huart->ErrorCode != HAL_UART_ERROR_NONE)
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80038d0:	2b00      	cmp	r3, #0
 80038d2:	d078      	beq.n	80039c6 <HAL_UART_IRQHandler+0x1ea>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if(((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80038d4:	69fb      	ldr	r3, [r7, #28]
 80038d6:	f003 0320 	and.w	r3, r3, #32
 80038da:	2b00      	cmp	r3, #0
 80038dc:	d007      	beq.n	80038ee <HAL_UART_IRQHandler+0x112>
 80038de:	69bb      	ldr	r3, [r7, #24]
 80038e0:	f003 0320 	and.w	r3, r3, #32
 80038e4:	2b00      	cmp	r3, #0
 80038e6:	d002      	beq.n	80038ee <HAL_UART_IRQHandler+0x112>
      {
        UART_Receive_IT(huart);
 80038e8:	6878      	ldr	r0, [r7, #4]
 80038ea:	f000 f97a 	bl	8003be2 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	681b      	ldr	r3, [r3, #0]
 80038f2:	695b      	ldr	r3, [r3, #20]
 80038f4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80038f8:	2b00      	cmp	r3, #0
 80038fa:	bf14      	ite	ne
 80038fc:	2301      	movne	r3, #1
 80038fe:	2300      	moveq	r3, #0
 8003900:	b2db      	uxtb	r3, r3
 8003902:	60fb      	str	r3, [r7, #12]
      if(((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003908:	f003 0308 	and.w	r3, r3, #8
 800390c:	2b00      	cmp	r3, #0
 800390e:	d102      	bne.n	8003916 <HAL_UART_IRQHandler+0x13a>
 8003910:	68fb      	ldr	r3, [r7, #12]
 8003912:	2b00      	cmp	r3, #0
 8003914:	d031      	beq.n	800397a <HAL_UART_IRQHandler+0x19e>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8003916:	6878      	ldr	r0, [r7, #4]
 8003918:	f000 f8c4 	bl	8003aa4 <UART_EndRxTransfer>
        
        /* Disable the UART DMA Rx request if enabled */
        if(HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	681b      	ldr	r3, [r3, #0]
 8003920:	695b      	ldr	r3, [r3, #20]
 8003922:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003926:	2b00      	cmp	r3, #0
 8003928:	d023      	beq.n	8003972 <HAL_UART_IRQHandler+0x196>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	681b      	ldr	r3, [r3, #0]
 800392e:	687a      	ldr	r2, [r7, #4]
 8003930:	6812      	ldr	r2, [r2, #0]
 8003932:	6952      	ldr	r2, [r2, #20]
 8003934:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003938:	615a      	str	r2, [r3, #20]
          
          /* Abort the UART DMA Rx channel */
          if(huart->hdmarx != NULL)
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800393e:	2b00      	cmp	r3, #0
 8003940:	d013      	beq.n	800396a <HAL_UART_IRQHandler+0x18e>
          {
            /* Set the UART DMA Abort callback : 
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003946:	4a22      	ldr	r2, [pc, #136]	; (80039d0 <HAL_UART_IRQHandler+0x1f4>)
 8003948:	651a      	str	r2, [r3, #80]	; 0x50
            if(HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800394e:	4618      	mov	r0, r3
 8003950:	f7fd fcc5 	bl	80012de <HAL_DMA_Abort_IT>
 8003954:	4603      	mov	r3, r0
 8003956:	2b00      	cmp	r3, #0
 8003958:	d016      	beq.n	8003988 <HAL_UART_IRQHandler+0x1ac>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800395e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003960:	687a      	ldr	r2, [r7, #4]
 8003962:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8003964:	4610      	mov	r0, r2
 8003966:	4798      	blx	r3
        if(HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003968:	e00e      	b.n	8003988 <HAL_UART_IRQHandler+0x1ac>
            }
          }
          else
          {
            /* Call user error callback */
            HAL_UART_ErrorCallback(huart);
 800396a:	6878      	ldr	r0, [r7, #4]
 800396c:	f000 f846 	bl	80039fc <HAL_UART_ErrorCallback>
        if(HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003970:	e00a      	b.n	8003988 <HAL_UART_IRQHandler+0x1ac>
          }
        }
        else
        {
          /* Call user error callback */
          HAL_UART_ErrorCallback(huart);
 8003972:	6878      	ldr	r0, [r7, #4]
 8003974:	f000 f842 	bl	80039fc <HAL_UART_ErrorCallback>
        if(HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003978:	e006      	b.n	8003988 <HAL_UART_IRQHandler+0x1ac>
      }
      else
      {
        /* Non Blocking error : transfer could go on. 
           Error is notified to user through user error callback */
        HAL_UART_ErrorCallback(huart);
 800397a:	6878      	ldr	r0, [r7, #4]
 800397c:	f000 f83e 	bl	80039fc <HAL_UART_ErrorCallback>
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	2200      	movs	r2, #0
 8003984:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
    return;
 8003986:	e01e      	b.n	80039c6 <HAL_UART_IRQHandler+0x1ea>
        if(HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003988:	bf00      	nop
    return;
 800398a:	e01c      	b.n	80039c6 <HAL_UART_IRQHandler+0x1ea>
  } /* End if some error occurs */

  /* UART in mode Transmitter ------------------------------------------------*/
  if(((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800398c:	69fb      	ldr	r3, [r7, #28]
 800398e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003992:	2b00      	cmp	r3, #0
 8003994:	d008      	beq.n	80039a8 <HAL_UART_IRQHandler+0x1cc>
 8003996:	69bb      	ldr	r3, [r7, #24]
 8003998:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800399c:	2b00      	cmp	r3, #0
 800399e:	d003      	beq.n	80039a8 <HAL_UART_IRQHandler+0x1cc>
  {
    UART_Transmit_IT(huart);
 80039a0:	6878      	ldr	r0, [r7, #4]
 80039a2:	f000 f8b1 	bl	8003b08 <UART_Transmit_IT>
    return;
 80039a6:	e00f      	b.n	80039c8 <HAL_UART_IRQHandler+0x1ec>
  }
  
  /* UART in mode Transmitter end --------------------------------------------*/
  if(((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80039a8:	69fb      	ldr	r3, [r7, #28]
 80039aa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80039ae:	2b00      	cmp	r3, #0
 80039b0:	d00a      	beq.n	80039c8 <HAL_UART_IRQHandler+0x1ec>
 80039b2:	69bb      	ldr	r3, [r7, #24]
 80039b4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80039b8:	2b00      	cmp	r3, #0
 80039ba:	d005      	beq.n	80039c8 <HAL_UART_IRQHandler+0x1ec>
  {
    UART_EndTransmit_IT(huart);
 80039bc:	6878      	ldr	r0, [r7, #4]
 80039be:	f000 f8f8 	bl	8003bb2 <UART_EndTransmit_IT>
    return;
 80039c2:	bf00      	nop
 80039c4:	e000      	b.n	80039c8 <HAL_UART_IRQHandler+0x1ec>
    return;
 80039c6:	bf00      	nop
  }
}
 80039c8:	3720      	adds	r7, #32
 80039ca:	46bd      	mov	sp, r7
 80039cc:	bd80      	pop	{r7, pc}
 80039ce:	bf00      	nop
 80039d0:	08003ae1 	.word	0x08003ae1

080039d4 <HAL_UART_TxCpltCallback>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
 __weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80039d4:	b480      	push	{r7}
 80039d6:	b083      	sub	sp, #12
 80039d8:	af00      	add	r7, sp, #0
 80039da:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */ 
}
 80039dc:	bf00      	nop
 80039de:	370c      	adds	r7, #12
 80039e0:	46bd      	mov	sp, r7
 80039e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039e6:	4770      	bx	lr

080039e8 <HAL_UART_RxCpltCallback>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80039e8:	b480      	push	{r7}
 80039ea:	b083      	sub	sp, #12
 80039ec:	af00      	add	r7, sp, #0
 80039ee:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80039f0:	bf00      	nop
 80039f2:	370c      	adds	r7, #12
 80039f4:	46bd      	mov	sp, r7
 80039f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039fa:	4770      	bx	lr

080039fc <HAL_UART_ErrorCallback>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
 __weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80039fc:	b480      	push	{r7}
 80039fe:	b083      	sub	sp, #12
 8003a00:	af00      	add	r7, sp, #0
 8003a02:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart); 
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */ 
}
 8003a04:	bf00      	nop
 8003a06:	370c      	adds	r7, #12
 8003a08:	46bd      	mov	sp, r7
 8003a0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a0e:	4770      	bx	lr

08003a10 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8003a10:	b580      	push	{r7, lr}
 8003a12:	b084      	sub	sp, #16
 8003a14:	af00      	add	r7, sp, #0
 8003a16:	60f8      	str	r0, [r7, #12]
 8003a18:	60b9      	str	r1, [r7, #8]
 8003a1a:	603b      	str	r3, [r7, #0]
 8003a1c:	4613      	mov	r3, r2
 8003a1e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status) 
 8003a20:	e02c      	b.n	8003a7c <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if(Timeout != HAL_MAX_DELAY)
 8003a22:	69bb      	ldr	r3, [r7, #24]
 8003a24:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003a28:	d028      	beq.n	8003a7c <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if((Timeout == 0U)||((HAL_GetTick() - Tickstart ) > Timeout))
 8003a2a:	69bb      	ldr	r3, [r7, #24]
 8003a2c:	2b00      	cmp	r3, #0
 8003a2e:	d007      	beq.n	8003a40 <UART_WaitOnFlagUntilTimeout+0x30>
 8003a30:	f7fd fb1c 	bl	800106c <HAL_GetTick>
 8003a34:	4602      	mov	r2, r0
 8003a36:	683b      	ldr	r3, [r7, #0]
 8003a38:	1ad2      	subs	r2, r2, r3
 8003a3a:	69bb      	ldr	r3, [r7, #24]
 8003a3c:	429a      	cmp	r2, r3
 8003a3e:	d91d      	bls.n	8003a7c <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003a40:	68fb      	ldr	r3, [r7, #12]
 8003a42:	681b      	ldr	r3, [r3, #0]
 8003a44:	68fa      	ldr	r2, [r7, #12]
 8003a46:	6812      	ldr	r2, [r2, #0]
 8003a48:	68d2      	ldr	r2, [r2, #12]
 8003a4a:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8003a4e:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003a50:	68fb      	ldr	r3, [r7, #12]
 8003a52:	681b      	ldr	r3, [r3, #0]
 8003a54:	68fa      	ldr	r2, [r7, #12]
 8003a56:	6812      	ldr	r2, [r2, #0]
 8003a58:	6952      	ldr	r2, [r2, #20]
 8003a5a:	f022 0201 	bic.w	r2, r2, #1
 8003a5e:	615a      	str	r2, [r3, #20]
        
        huart->gState  = HAL_UART_STATE_READY;
 8003a60:	68fb      	ldr	r3, [r7, #12]
 8003a62:	2220      	movs	r2, #32
 8003a64:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 8003a68:	68fb      	ldr	r3, [r7, #12]
 8003a6a:	2220      	movs	r2, #32
 8003a6c:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
        
        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8003a70:	68fb      	ldr	r3, [r7, #12]
 8003a72:	2200      	movs	r2, #0
 8003a74:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
        
        return HAL_TIMEOUT;
 8003a78:	2303      	movs	r3, #3
 8003a7a:	e00f      	b.n	8003a9c <UART_WaitOnFlagUntilTimeout+0x8c>
  while((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status) 
 8003a7c:	68fb      	ldr	r3, [r7, #12]
 8003a7e:	681b      	ldr	r3, [r3, #0]
 8003a80:	681a      	ldr	r2, [r3, #0]
 8003a82:	68bb      	ldr	r3, [r7, #8]
 8003a84:	401a      	ands	r2, r3
 8003a86:	68bb      	ldr	r3, [r7, #8]
 8003a88:	429a      	cmp	r2, r3
 8003a8a:	bf0c      	ite	eq
 8003a8c:	2301      	moveq	r3, #1
 8003a8e:	2300      	movne	r3, #0
 8003a90:	b2db      	uxtb	r3, r3
 8003a92:	461a      	mov	r2, r3
 8003a94:	79fb      	ldrb	r3, [r7, #7]
 8003a96:	429a      	cmp	r2, r3
 8003a98:	d0c3      	beq.n	8003a22 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  
  return HAL_OK;
 8003a9a:	2300      	movs	r3, #0
}
 8003a9c:	4618      	mov	r0, r3
 8003a9e:	3710      	adds	r7, #16
 8003aa0:	46bd      	mov	sp, r7
 8003aa2:	bd80      	pop	{r7, pc}

08003aa4 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003aa4:	b480      	push	{r7}
 8003aa6:	b083      	sub	sp, #12
 8003aa8:	af00      	add	r7, sp, #0
 8003aaa:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	681b      	ldr	r3, [r3, #0]
 8003ab0:	687a      	ldr	r2, [r7, #4]
 8003ab2:	6812      	ldr	r2, [r2, #0]
 8003ab4:	68d2      	ldr	r2, [r2, #12]
 8003ab6:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8003aba:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	681b      	ldr	r3, [r3, #0]
 8003ac0:	687a      	ldr	r2, [r7, #4]
 8003ac2:	6812      	ldr	r2, [r2, #0]
 8003ac4:	6952      	ldr	r2, [r2, #20]
 8003ac6:	f022 0201 	bic.w	r2, r2, #1
 8003aca:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	2220      	movs	r2, #32
 8003ad0:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
}
 8003ad4:	bf00      	nop
 8003ad6:	370c      	adds	r7, #12
 8003ad8:	46bd      	mov	sp, r7
 8003ada:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ade:	4770      	bx	lr

08003ae0 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8003ae0:	b580      	push	{r7, lr}
 8003ae2:	b084      	sub	sp, #16
 8003ae4:	af00      	add	r7, sp, #0
 8003ae6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef* huart = ( UART_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003aec:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8003aee:	68fb      	ldr	r3, [r7, #12]
 8003af0:	2200      	movs	r2, #0
 8003af2:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0U;
 8003af4:	68fb      	ldr	r3, [r7, #12]
 8003af6:	2200      	movs	r2, #0
 8003af8:	84da      	strh	r2, [r3, #38]	; 0x26

  HAL_UART_ErrorCallback(huart);
 8003afa:	68f8      	ldr	r0, [r7, #12]
 8003afc:	f7ff ff7e 	bl	80039fc <HAL_UART_ErrorCallback>
}
 8003b00:	bf00      	nop
 8003b02:	3710      	adds	r7, #16
 8003b04:	46bd      	mov	sp, r7
 8003b06:	bd80      	pop	{r7, pc}

08003b08 <UART_Transmit_IT>:
  * @param  huart Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8003b08:	b480      	push	{r7}
 8003b0a:	b085      	sub	sp, #20
 8003b0c:	af00      	add	r7, sp, #0
 8003b0e:	6078      	str	r0, [r7, #4]
  uint16_t* tmp;
  
  /* Check that a Tx process is ongoing */
  if(huart->gState == HAL_UART_STATE_BUSY_TX)
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8003b16:	b2db      	uxtb	r3, r3
 8003b18:	2b21      	cmp	r3, #33	; 0x21
 8003b1a:	d143      	bne.n	8003ba4 <UART_Transmit_IT+0x9c>
  {
    if(huart->Init.WordLength == UART_WORDLENGTH_9B)
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	689b      	ldr	r3, [r3, #8]
 8003b20:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003b24:	d119      	bne.n	8003b5a <UART_Transmit_IT+0x52>
    {
      tmp = (uint16_t*) huart->pTxBuffPtr;
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	6a1b      	ldr	r3, [r3, #32]
 8003b2a:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	681b      	ldr	r3, [r3, #0]
 8003b30:	68fa      	ldr	r2, [r7, #12]
 8003b32:	8812      	ldrh	r2, [r2, #0]
 8003b34:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003b38:	605a      	str	r2, [r3, #4]
      if(huart->Init.Parity == UART_PARITY_NONE)
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	691b      	ldr	r3, [r3, #16]
 8003b3e:	2b00      	cmp	r3, #0
 8003b40:	d105      	bne.n	8003b4e <UART_Transmit_IT+0x46>
      {
        huart->pTxBuffPtr += 2U;
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	6a1b      	ldr	r3, [r3, #32]
 8003b46:	1c9a      	adds	r2, r3, #2
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	621a      	str	r2, [r3, #32]
 8003b4c:	e00e      	b.n	8003b6c <UART_Transmit_IT+0x64>
      }
      else
      {
        huart->pTxBuffPtr += 1U;
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	6a1b      	ldr	r3, [r3, #32]
 8003b52:	1c5a      	adds	r2, r3, #1
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	621a      	str	r2, [r3, #32]
 8003b58:	e008      	b.n	8003b6c <UART_Transmit_IT+0x64>
      }
    } 
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	681a      	ldr	r2, [r3, #0]
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	6a1b      	ldr	r3, [r3, #32]
 8003b62:	1c58      	adds	r0, r3, #1
 8003b64:	6879      	ldr	r1, [r7, #4]
 8003b66:	6208      	str	r0, [r1, #32]
 8003b68:	781b      	ldrb	r3, [r3, #0]
 8003b6a:	6053      	str	r3, [r2, #4]
    }

    if(--huart->TxXferCount == 0U)
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003b70:	b29b      	uxth	r3, r3
 8003b72:	3b01      	subs	r3, #1
 8003b74:	b29b      	uxth	r3, r3
 8003b76:	687a      	ldr	r2, [r7, #4]
 8003b78:	4619      	mov	r1, r3
 8003b7a:	84d1      	strh	r1, [r2, #38]	; 0x26
 8003b7c:	2b00      	cmp	r3, #0
 8003b7e:	d10f      	bne.n	8003ba0 <UART_Transmit_IT+0x98>
    {
      /* Disable the UART Transmit Complete Interrupt */
      CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	681b      	ldr	r3, [r3, #0]
 8003b84:	687a      	ldr	r2, [r7, #4]
 8003b86:	6812      	ldr	r2, [r2, #0]
 8003b88:	68d2      	ldr	r2, [r2, #12]
 8003b8a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003b8e:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */    
      SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	681b      	ldr	r3, [r3, #0]
 8003b94:	687a      	ldr	r2, [r7, #4]
 8003b96:	6812      	ldr	r2, [r2, #0]
 8003b98:	68d2      	ldr	r2, [r2, #12]
 8003b9a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003b9e:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8003ba0:	2300      	movs	r3, #0
 8003ba2:	e000      	b.n	8003ba6 <UART_Transmit_IT+0x9e>
  }
  else
  {
    return HAL_BUSY;
 8003ba4:	2302      	movs	r3, #2
  }
}
 8003ba6:	4618      	mov	r0, r3
 8003ba8:	3714      	adds	r7, #20
 8003baa:	46bd      	mov	sp, r7
 8003bac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bb0:	4770      	bx	lr

08003bb2 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8003bb2:	b580      	push	{r7, lr}
 8003bb4:	b082      	sub	sp, #8
 8003bb6:	af00      	add	r7, sp, #0
 8003bb8:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */    
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	681b      	ldr	r3, [r3, #0]
 8003bbe:	687a      	ldr	r2, [r7, #4]
 8003bc0:	6812      	ldr	r2, [r2, #0]
 8003bc2:	68d2      	ldr	r2, [r2, #12]
 8003bc4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003bc8:	60da      	str	r2, [r3, #12]
  
  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	2220      	movs	r2, #32
 8003bce:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
    
  HAL_UART_TxCpltCallback(huart);
 8003bd2:	6878      	ldr	r0, [r7, #4]
 8003bd4:	f7ff fefe 	bl	80039d4 <HAL_UART_TxCpltCallback>
  
  return HAL_OK;
 8003bd8:	2300      	movs	r3, #0
}
 8003bda:	4618      	mov	r0, r3
 8003bdc:	3708      	adds	r7, #8
 8003bde:	46bd      	mov	sp, r7
 8003be0:	bd80      	pop	{r7, pc}

08003be2 <UART_Receive_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8003be2:	b580      	push	{r7, lr}
 8003be4:	b084      	sub	sp, #16
 8003be6:	af00      	add	r7, sp, #0
 8003be8:	6078      	str	r0, [r7, #4]
  uint16_t* tmp;
  
  /* Check that a Rx process is ongoing */
  if(huart->RxState == HAL_UART_STATE_BUSY_RX) 
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8003bf0:	b2db      	uxtb	r3, r3
 8003bf2:	2b22      	cmp	r3, #34	; 0x22
 8003bf4:	d169      	bne.n	8003cca <UART_Receive_IT+0xe8>
  {
    if(huart->Init.WordLength == UART_WORDLENGTH_9B)
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	689b      	ldr	r3, [r3, #8]
 8003bfa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003bfe:	d123      	bne.n	8003c48 <UART_Receive_IT+0x66>
    {
      tmp = (uint16_t*) huart->pRxBuffPtr;
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003c04:	60fb      	str	r3, [r7, #12]
      if(huart->Init.Parity == UART_PARITY_NONE)
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	691b      	ldr	r3, [r3, #16]
 8003c0a:	2b00      	cmp	r3, #0
 8003c0c:	d10e      	bne.n	8003c2c <UART_Receive_IT+0x4a>
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	681b      	ldr	r3, [r3, #0]
 8003c12:	685b      	ldr	r3, [r3, #4]
 8003c14:	b29b      	uxth	r3, r3
 8003c16:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003c1a:	b29a      	uxth	r2, r3
 8003c1c:	68fb      	ldr	r3, [r7, #12]
 8003c1e:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 2U;
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003c24:	1c9a      	adds	r2, r3, #2
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	629a      	str	r2, [r3, #40]	; 0x28
 8003c2a:	e029      	b.n	8003c80 <UART_Receive_IT+0x9e>
      }
      else
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	681b      	ldr	r3, [r3, #0]
 8003c30:	685b      	ldr	r3, [r3, #4]
 8003c32:	b29b      	uxth	r3, r3
 8003c34:	b2db      	uxtb	r3, r3
 8003c36:	b29a      	uxth	r2, r3
 8003c38:	68fb      	ldr	r3, [r7, #12]
 8003c3a:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 1U;
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003c40:	1c5a      	adds	r2, r3, #1
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	629a      	str	r2, [r3, #40]	; 0x28
 8003c46:	e01b      	b.n	8003c80 <UART_Receive_IT+0x9e>
      }
    }
    else
    {
      if(huart->Init.Parity == UART_PARITY_NONE)
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	691b      	ldr	r3, [r3, #16]
 8003c4c:	2b00      	cmp	r3, #0
 8003c4e:	d10a      	bne.n	8003c66 <UART_Receive_IT+0x84>
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003c54:	1c59      	adds	r1, r3, #1
 8003c56:	687a      	ldr	r2, [r7, #4]
 8003c58:	6291      	str	r1, [r2, #40]	; 0x28
 8003c5a:	687a      	ldr	r2, [r7, #4]
 8003c5c:	6812      	ldr	r2, [r2, #0]
 8003c5e:	6852      	ldr	r2, [r2, #4]
 8003c60:	b2d2      	uxtb	r2, r2
 8003c62:	701a      	strb	r2, [r3, #0]
 8003c64:	e00c      	b.n	8003c80 <UART_Receive_IT+0x9e>
      }
      else
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003c6a:	1c59      	adds	r1, r3, #1
 8003c6c:	687a      	ldr	r2, [r7, #4]
 8003c6e:	6291      	str	r1, [r2, #40]	; 0x28
 8003c70:	687a      	ldr	r2, [r7, #4]
 8003c72:	6812      	ldr	r2, [r2, #0]
 8003c74:	6852      	ldr	r2, [r2, #4]
 8003c76:	b2d2      	uxtb	r2, r2
 8003c78:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8003c7c:	b2d2      	uxtb	r2, r2
 8003c7e:	701a      	strb	r2, [r3, #0]
      }
    }

    if(--huart->RxXferCount == 0U)
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003c84:	b29b      	uxth	r3, r3
 8003c86:	3b01      	subs	r3, #1
 8003c88:	b29b      	uxth	r3, r3
 8003c8a:	687a      	ldr	r2, [r7, #4]
 8003c8c:	4619      	mov	r1, r3
 8003c8e:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8003c90:	2b00      	cmp	r3, #0
 8003c92:	d118      	bne.n	8003cc6 <UART_Receive_IT+0xe4>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	681b      	ldr	r3, [r3, #0]
 8003c98:	687a      	ldr	r2, [r7, #4]
 8003c9a:	6812      	ldr	r2, [r2, #0]
 8003c9c:	68d2      	ldr	r2, [r2, #12]
 8003c9e:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8003ca2:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	681b      	ldr	r3, [r3, #0]
 8003ca8:	687a      	ldr	r2, [r7, #4]
 8003caa:	6812      	ldr	r2, [r2, #0]
 8003cac:	6952      	ldr	r2, [r2, #20]
 8003cae:	f022 0201 	bic.w	r2, r2, #1
 8003cb2:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	2220      	movs	r2, #32
 8003cb8:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
     
      HAL_UART_RxCpltCallback(huart);
 8003cbc:	6878      	ldr	r0, [r7, #4]
 8003cbe:	f7ff fe93 	bl	80039e8 <HAL_UART_RxCpltCallback>

      return HAL_OK;
 8003cc2:	2300      	movs	r3, #0
 8003cc4:	e002      	b.n	8003ccc <UART_Receive_IT+0xea>
    }
    return HAL_OK;
 8003cc6:	2300      	movs	r3, #0
 8003cc8:	e000      	b.n	8003ccc <UART_Receive_IT+0xea>
  }
  else
  {
    return HAL_BUSY;
 8003cca:	2302      	movs	r3, #2
  }
}
 8003ccc:	4618      	mov	r0, r3
 8003cce:	3710      	adds	r7, #16
 8003cd0:	46bd      	mov	sp, r7
 8003cd2:	bd80      	pop	{r7, pc}

08003cd4 <UART_SetConfig>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003cd4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003cd6:	b085      	sub	sp, #20
 8003cd8:	af00      	add	r7, sp, #0
 8003cda:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0x00U;
 8003cdc:	2300      	movs	r3, #0
 8003cde:	60fb      	str	r3, [r7, #12]
  assert_param(IS_UART_STOPBITS(huart->Init.StopBits));
  assert_param(IS_UART_PARITY(huart->Init.Parity));
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  tmpreg = huart->Instance->CR2;
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	681b      	ldr	r3, [r3, #0]
 8003ce4:	691b      	ldr	r3, [r3, #16]
 8003ce6:	60fb      	str	r3, [r7, #12]

  /* Clear STOP[13:12] bits */
  tmpreg &= (uint32_t)~((uint32_t)USART_CR2_STOP);
 8003ce8:	68fb      	ldr	r3, [r7, #12]
 8003cea:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8003cee:	60fb      	str	r3, [r7, #12]

  /* Configure the UART Stop Bits: Set STOP[13:12] bits according to huart->Init.StopBits value */
  tmpreg |= (uint32_t)huart->Init.StopBits;
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	68db      	ldr	r3, [r3, #12]
 8003cf4:	68fa      	ldr	r2, [r7, #12]
 8003cf6:	4313      	orrs	r3, r2
 8003cf8:	60fb      	str	r3, [r7, #12]
  
  /* Write to USART CR2 */
  WRITE_REG(huart->Instance->CR2, (uint32_t)tmpreg);
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	681b      	ldr	r3, [r3, #0]
 8003cfe:	68fa      	ldr	r2, [r7, #12]
 8003d00:	611a      	str	r2, [r3, #16]

  /*-------------------------- USART CR1 Configuration -----------------------*/
  tmpreg = huart->Instance->CR1;
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	681b      	ldr	r3, [r3, #0]
 8003d06:	68db      	ldr	r3, [r3, #12]
 8003d08:	60fb      	str	r3, [r7, #12]

  /* Clear M, PCE, PS, TE and RE bits */
  tmpreg &= (uint32_t)~((uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | \
 8003d0a:	68fb      	ldr	r3, [r7, #12]
 8003d0c:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 8003d10:	f023 030c 	bic.w	r3, r3, #12
 8003d14:	60fb      	str	r3, [r7, #12]
  /* Configure the UART Word Length, Parity and mode: 
     Set the M bits according to huart->Init.WordLength value 
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	689a      	ldr	r2, [r3, #8]
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	691b      	ldr	r3, [r3, #16]
 8003d1e:	431a      	orrs	r2, r3
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	695b      	ldr	r3, [r3, #20]
 8003d24:	431a      	orrs	r2, r3
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	69db      	ldr	r3, [r3, #28]
 8003d2a:	4313      	orrs	r3, r2
 8003d2c:	68fa      	ldr	r2, [r7, #12]
 8003d2e:	4313      	orrs	r3, r2
 8003d30:	60fb      	str	r3, [r7, #12]
  
  /* Write to USART CR1 */
  WRITE_REG(huart->Instance->CR1, (uint32_t)tmpreg);
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	681b      	ldr	r3, [r3, #0]
 8003d36:	68fa      	ldr	r2, [r7, #12]
 8003d38:	60da      	str	r2, [r3, #12]
  
  /*-------------------------- USART CR3 Configuration -----------------------*/  
  tmpreg = huart->Instance->CR3;
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	681b      	ldr	r3, [r3, #0]
 8003d3e:	695b      	ldr	r3, [r3, #20]
 8003d40:	60fb      	str	r3, [r7, #12]
  
  /* Clear CTSE and RTSE bits */
  tmpreg &= (uint32_t)~((uint32_t)(USART_CR3_RTSE | USART_CR3_CTSE));
 8003d42:	68fb      	ldr	r3, [r7, #12]
 8003d44:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003d48:	60fb      	str	r3, [r7, #12]
  
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  tmpreg |= huart->Init.HwFlowCtl;
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	699b      	ldr	r3, [r3, #24]
 8003d4e:	68fa      	ldr	r2, [r7, #12]
 8003d50:	4313      	orrs	r3, r2
 8003d52:	60fb      	str	r3, [r7, #12]
  
  /* Write to USART CR3 */
  WRITE_REG(huart->Instance->CR3, (uint32_t)tmpreg);
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	681b      	ldr	r3, [r3, #0]
 8003d58:	68fa      	ldr	r2, [r7, #12]
 8003d5a:	615a      	str	r2, [r3, #20]
  
  /* Check the Over Sampling */
  if(huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	69db      	ldr	r3, [r3, #28]
 8003d60:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003d64:	f040 80e4 	bne.w	8003f30 <UART_SetConfig+0x25c>
  {
    /*-------------------------- USART BRR Configuration ---------------------*/
#if defined(USART6) 
    if((huart->Instance == USART1) || (huart->Instance == USART6))
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	681b      	ldr	r3, [r3, #0]
 8003d6c:	4aab      	ldr	r2, [pc, #684]	; (800401c <UART_SetConfig+0x348>)
 8003d6e:	4293      	cmp	r3, r2
 8003d70:	d004      	beq.n	8003d7c <UART_SetConfig+0xa8>
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	681b      	ldr	r3, [r3, #0]
 8003d76:	4aaa      	ldr	r2, [pc, #680]	; (8004020 <UART_SetConfig+0x34c>)
 8003d78:	4293      	cmp	r3, r2
 8003d7a:	d16c      	bne.n	8003e56 <UART_SetConfig+0x182>
    {
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	681c      	ldr	r4, [r3, #0]
 8003d80:	f7fe ff9e 	bl	8002cc0 <HAL_RCC_GetPCLK2Freq>
 8003d84:	4602      	mov	r2, r0
 8003d86:	4613      	mov	r3, r2
 8003d88:	009b      	lsls	r3, r3, #2
 8003d8a:	4413      	add	r3, r2
 8003d8c:	009a      	lsls	r2, r3, #2
 8003d8e:	441a      	add	r2, r3
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	685b      	ldr	r3, [r3, #4]
 8003d94:	005b      	lsls	r3, r3, #1
 8003d96:	fbb2 f3f3 	udiv	r3, r2, r3
 8003d9a:	4aa2      	ldr	r2, [pc, #648]	; (8004024 <UART_SetConfig+0x350>)
 8003d9c:	fba2 2303 	umull	r2, r3, r2, r3
 8003da0:	095b      	lsrs	r3, r3, #5
 8003da2:	011d      	lsls	r5, r3, #4
 8003da4:	f7fe ff8c 	bl	8002cc0 <HAL_RCC_GetPCLK2Freq>
 8003da8:	4602      	mov	r2, r0
 8003daa:	4613      	mov	r3, r2
 8003dac:	009b      	lsls	r3, r3, #2
 8003dae:	4413      	add	r3, r2
 8003db0:	009a      	lsls	r2, r3, #2
 8003db2:	441a      	add	r2, r3
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	685b      	ldr	r3, [r3, #4]
 8003db8:	005b      	lsls	r3, r3, #1
 8003dba:	fbb2 f6f3 	udiv	r6, r2, r3
 8003dbe:	f7fe ff7f 	bl	8002cc0 <HAL_RCC_GetPCLK2Freq>
 8003dc2:	4602      	mov	r2, r0
 8003dc4:	4613      	mov	r3, r2
 8003dc6:	009b      	lsls	r3, r3, #2
 8003dc8:	4413      	add	r3, r2
 8003dca:	009a      	lsls	r2, r3, #2
 8003dcc:	441a      	add	r2, r3
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	685b      	ldr	r3, [r3, #4]
 8003dd2:	005b      	lsls	r3, r3, #1
 8003dd4:	fbb2 f3f3 	udiv	r3, r2, r3
 8003dd8:	4a92      	ldr	r2, [pc, #584]	; (8004024 <UART_SetConfig+0x350>)
 8003dda:	fba2 2303 	umull	r2, r3, r2, r3
 8003dde:	095b      	lsrs	r3, r3, #5
 8003de0:	2264      	movs	r2, #100	; 0x64
 8003de2:	fb02 f303 	mul.w	r3, r2, r3
 8003de6:	1af3      	subs	r3, r6, r3
 8003de8:	00db      	lsls	r3, r3, #3
 8003dea:	3332      	adds	r3, #50	; 0x32
 8003dec:	4a8d      	ldr	r2, [pc, #564]	; (8004024 <UART_SetConfig+0x350>)
 8003dee:	fba2 2303 	umull	r2, r3, r2, r3
 8003df2:	095b      	lsrs	r3, r3, #5
 8003df4:	005b      	lsls	r3, r3, #1
 8003df6:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8003dfa:	441d      	add	r5, r3
 8003dfc:	f7fe ff60 	bl	8002cc0 <HAL_RCC_GetPCLK2Freq>
 8003e00:	4602      	mov	r2, r0
 8003e02:	4613      	mov	r3, r2
 8003e04:	009b      	lsls	r3, r3, #2
 8003e06:	4413      	add	r3, r2
 8003e08:	009a      	lsls	r2, r3, #2
 8003e0a:	441a      	add	r2, r3
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	685b      	ldr	r3, [r3, #4]
 8003e10:	005b      	lsls	r3, r3, #1
 8003e12:	fbb2 f6f3 	udiv	r6, r2, r3
 8003e16:	f7fe ff53 	bl	8002cc0 <HAL_RCC_GetPCLK2Freq>
 8003e1a:	4602      	mov	r2, r0
 8003e1c:	4613      	mov	r3, r2
 8003e1e:	009b      	lsls	r3, r3, #2
 8003e20:	4413      	add	r3, r2
 8003e22:	009a      	lsls	r2, r3, #2
 8003e24:	441a      	add	r2, r3
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	685b      	ldr	r3, [r3, #4]
 8003e2a:	005b      	lsls	r3, r3, #1
 8003e2c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003e30:	4a7c      	ldr	r2, [pc, #496]	; (8004024 <UART_SetConfig+0x350>)
 8003e32:	fba2 2303 	umull	r2, r3, r2, r3
 8003e36:	095b      	lsrs	r3, r3, #5
 8003e38:	2264      	movs	r2, #100	; 0x64
 8003e3a:	fb02 f303 	mul.w	r3, r2, r3
 8003e3e:	1af3      	subs	r3, r6, r3
 8003e40:	00db      	lsls	r3, r3, #3
 8003e42:	3332      	adds	r3, #50	; 0x32
 8003e44:	4a77      	ldr	r2, [pc, #476]	; (8004024 <UART_SetConfig+0x350>)
 8003e46:	fba2 2303 	umull	r2, r3, r2, r3
 8003e4a:	095b      	lsrs	r3, r3, #5
 8003e4c:	f003 0307 	and.w	r3, r3, #7
 8003e50:	442b      	add	r3, r5
 8003e52:	60a3      	str	r3, [r4, #8]
 8003e54:	e154      	b.n	8004100 <UART_SetConfig+0x42c>
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
    }	
#endif /* USART6 */
    else
    {
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	681c      	ldr	r4, [r3, #0]
 8003e5a:	f7fe ff1d 	bl	8002c98 <HAL_RCC_GetPCLK1Freq>
 8003e5e:	4602      	mov	r2, r0
 8003e60:	4613      	mov	r3, r2
 8003e62:	009b      	lsls	r3, r3, #2
 8003e64:	4413      	add	r3, r2
 8003e66:	009a      	lsls	r2, r3, #2
 8003e68:	441a      	add	r2, r3
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	685b      	ldr	r3, [r3, #4]
 8003e6e:	005b      	lsls	r3, r3, #1
 8003e70:	fbb2 f3f3 	udiv	r3, r2, r3
 8003e74:	4a6b      	ldr	r2, [pc, #428]	; (8004024 <UART_SetConfig+0x350>)
 8003e76:	fba2 2303 	umull	r2, r3, r2, r3
 8003e7a:	095b      	lsrs	r3, r3, #5
 8003e7c:	011d      	lsls	r5, r3, #4
 8003e7e:	f7fe ff0b 	bl	8002c98 <HAL_RCC_GetPCLK1Freq>
 8003e82:	4602      	mov	r2, r0
 8003e84:	4613      	mov	r3, r2
 8003e86:	009b      	lsls	r3, r3, #2
 8003e88:	4413      	add	r3, r2
 8003e8a:	009a      	lsls	r2, r3, #2
 8003e8c:	441a      	add	r2, r3
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	685b      	ldr	r3, [r3, #4]
 8003e92:	005b      	lsls	r3, r3, #1
 8003e94:	fbb2 f6f3 	udiv	r6, r2, r3
 8003e98:	f7fe fefe 	bl	8002c98 <HAL_RCC_GetPCLK1Freq>
 8003e9c:	4602      	mov	r2, r0
 8003e9e:	4613      	mov	r3, r2
 8003ea0:	009b      	lsls	r3, r3, #2
 8003ea2:	4413      	add	r3, r2
 8003ea4:	009a      	lsls	r2, r3, #2
 8003ea6:	441a      	add	r2, r3
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	685b      	ldr	r3, [r3, #4]
 8003eac:	005b      	lsls	r3, r3, #1
 8003eae:	fbb2 f3f3 	udiv	r3, r2, r3
 8003eb2:	4a5c      	ldr	r2, [pc, #368]	; (8004024 <UART_SetConfig+0x350>)
 8003eb4:	fba2 2303 	umull	r2, r3, r2, r3
 8003eb8:	095b      	lsrs	r3, r3, #5
 8003eba:	2264      	movs	r2, #100	; 0x64
 8003ebc:	fb02 f303 	mul.w	r3, r2, r3
 8003ec0:	1af3      	subs	r3, r6, r3
 8003ec2:	00db      	lsls	r3, r3, #3
 8003ec4:	3332      	adds	r3, #50	; 0x32
 8003ec6:	4a57      	ldr	r2, [pc, #348]	; (8004024 <UART_SetConfig+0x350>)
 8003ec8:	fba2 2303 	umull	r2, r3, r2, r3
 8003ecc:	095b      	lsrs	r3, r3, #5
 8003ece:	005b      	lsls	r3, r3, #1
 8003ed0:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8003ed4:	441d      	add	r5, r3
 8003ed6:	f7fe fedf 	bl	8002c98 <HAL_RCC_GetPCLK1Freq>
 8003eda:	4602      	mov	r2, r0
 8003edc:	4613      	mov	r3, r2
 8003ede:	009b      	lsls	r3, r3, #2
 8003ee0:	4413      	add	r3, r2
 8003ee2:	009a      	lsls	r2, r3, #2
 8003ee4:	441a      	add	r2, r3
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	685b      	ldr	r3, [r3, #4]
 8003eea:	005b      	lsls	r3, r3, #1
 8003eec:	fbb2 f6f3 	udiv	r6, r2, r3
 8003ef0:	f7fe fed2 	bl	8002c98 <HAL_RCC_GetPCLK1Freq>
 8003ef4:	4602      	mov	r2, r0
 8003ef6:	4613      	mov	r3, r2
 8003ef8:	009b      	lsls	r3, r3, #2
 8003efa:	4413      	add	r3, r2
 8003efc:	009a      	lsls	r2, r3, #2
 8003efe:	441a      	add	r2, r3
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	685b      	ldr	r3, [r3, #4]
 8003f04:	005b      	lsls	r3, r3, #1
 8003f06:	fbb2 f3f3 	udiv	r3, r2, r3
 8003f0a:	4a46      	ldr	r2, [pc, #280]	; (8004024 <UART_SetConfig+0x350>)
 8003f0c:	fba2 2303 	umull	r2, r3, r2, r3
 8003f10:	095b      	lsrs	r3, r3, #5
 8003f12:	2264      	movs	r2, #100	; 0x64
 8003f14:	fb02 f303 	mul.w	r3, r2, r3
 8003f18:	1af3      	subs	r3, r6, r3
 8003f1a:	00db      	lsls	r3, r3, #3
 8003f1c:	3332      	adds	r3, #50	; 0x32
 8003f1e:	4a41      	ldr	r2, [pc, #260]	; (8004024 <UART_SetConfig+0x350>)
 8003f20:	fba2 2303 	umull	r2, r3, r2, r3
 8003f24:	095b      	lsrs	r3, r3, #5
 8003f26:	f003 0307 	and.w	r3, r3, #7
 8003f2a:	442b      	add	r3, r5
 8003f2c:	60a3      	str	r3, [r4, #8]
    else
    {
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
    }
  }
}
 8003f2e:	e0e7      	b.n	8004100 <UART_SetConfig+0x42c>
    if((huart->Instance == USART1) || (huart->Instance == USART6))
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	681b      	ldr	r3, [r3, #0]
 8003f34:	4a39      	ldr	r2, [pc, #228]	; (800401c <UART_SetConfig+0x348>)
 8003f36:	4293      	cmp	r3, r2
 8003f38:	d004      	beq.n	8003f44 <UART_SetConfig+0x270>
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	681b      	ldr	r3, [r3, #0]
 8003f3e:	4a38      	ldr	r2, [pc, #224]	; (8004020 <UART_SetConfig+0x34c>)
 8003f40:	4293      	cmp	r3, r2
 8003f42:	d171      	bne.n	8004028 <UART_SetConfig+0x354>
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	681c      	ldr	r4, [r3, #0]
 8003f48:	f7fe feba 	bl	8002cc0 <HAL_RCC_GetPCLK2Freq>
 8003f4c:	4602      	mov	r2, r0
 8003f4e:	4613      	mov	r3, r2
 8003f50:	009b      	lsls	r3, r3, #2
 8003f52:	4413      	add	r3, r2
 8003f54:	009a      	lsls	r2, r3, #2
 8003f56:	441a      	add	r2, r3
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	685b      	ldr	r3, [r3, #4]
 8003f5c:	009b      	lsls	r3, r3, #2
 8003f5e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003f62:	4a30      	ldr	r2, [pc, #192]	; (8004024 <UART_SetConfig+0x350>)
 8003f64:	fba2 2303 	umull	r2, r3, r2, r3
 8003f68:	095b      	lsrs	r3, r3, #5
 8003f6a:	011d      	lsls	r5, r3, #4
 8003f6c:	f7fe fea8 	bl	8002cc0 <HAL_RCC_GetPCLK2Freq>
 8003f70:	4602      	mov	r2, r0
 8003f72:	4613      	mov	r3, r2
 8003f74:	009b      	lsls	r3, r3, #2
 8003f76:	4413      	add	r3, r2
 8003f78:	009a      	lsls	r2, r3, #2
 8003f7a:	441a      	add	r2, r3
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	685b      	ldr	r3, [r3, #4]
 8003f80:	009b      	lsls	r3, r3, #2
 8003f82:	fbb2 f6f3 	udiv	r6, r2, r3
 8003f86:	f7fe fe9b 	bl	8002cc0 <HAL_RCC_GetPCLK2Freq>
 8003f8a:	4602      	mov	r2, r0
 8003f8c:	4613      	mov	r3, r2
 8003f8e:	009b      	lsls	r3, r3, #2
 8003f90:	4413      	add	r3, r2
 8003f92:	009a      	lsls	r2, r3, #2
 8003f94:	441a      	add	r2, r3
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	685b      	ldr	r3, [r3, #4]
 8003f9a:	009b      	lsls	r3, r3, #2
 8003f9c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003fa0:	4a20      	ldr	r2, [pc, #128]	; (8004024 <UART_SetConfig+0x350>)
 8003fa2:	fba2 2303 	umull	r2, r3, r2, r3
 8003fa6:	095b      	lsrs	r3, r3, #5
 8003fa8:	2264      	movs	r2, #100	; 0x64
 8003faa:	fb02 f303 	mul.w	r3, r2, r3
 8003fae:	1af3      	subs	r3, r6, r3
 8003fb0:	011b      	lsls	r3, r3, #4
 8003fb2:	3332      	adds	r3, #50	; 0x32
 8003fb4:	4a1b      	ldr	r2, [pc, #108]	; (8004024 <UART_SetConfig+0x350>)
 8003fb6:	fba2 2303 	umull	r2, r3, r2, r3
 8003fba:	095b      	lsrs	r3, r3, #5
 8003fbc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003fc0:	441d      	add	r5, r3
 8003fc2:	f7fe fe7d 	bl	8002cc0 <HAL_RCC_GetPCLK2Freq>
 8003fc6:	4602      	mov	r2, r0
 8003fc8:	4613      	mov	r3, r2
 8003fca:	009b      	lsls	r3, r3, #2
 8003fcc:	4413      	add	r3, r2
 8003fce:	009a      	lsls	r2, r3, #2
 8003fd0:	441a      	add	r2, r3
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	685b      	ldr	r3, [r3, #4]
 8003fd6:	009b      	lsls	r3, r3, #2
 8003fd8:	fbb2 f6f3 	udiv	r6, r2, r3
 8003fdc:	f7fe fe70 	bl	8002cc0 <HAL_RCC_GetPCLK2Freq>
 8003fe0:	4602      	mov	r2, r0
 8003fe2:	4613      	mov	r3, r2
 8003fe4:	009b      	lsls	r3, r3, #2
 8003fe6:	4413      	add	r3, r2
 8003fe8:	009a      	lsls	r2, r3, #2
 8003fea:	441a      	add	r2, r3
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	685b      	ldr	r3, [r3, #4]
 8003ff0:	009b      	lsls	r3, r3, #2
 8003ff2:	fbb2 f3f3 	udiv	r3, r2, r3
 8003ff6:	4a0b      	ldr	r2, [pc, #44]	; (8004024 <UART_SetConfig+0x350>)
 8003ff8:	fba2 2303 	umull	r2, r3, r2, r3
 8003ffc:	095b      	lsrs	r3, r3, #5
 8003ffe:	2264      	movs	r2, #100	; 0x64
 8004000:	fb02 f303 	mul.w	r3, r2, r3
 8004004:	1af3      	subs	r3, r6, r3
 8004006:	011b      	lsls	r3, r3, #4
 8004008:	3332      	adds	r3, #50	; 0x32
 800400a:	4a06      	ldr	r2, [pc, #24]	; (8004024 <UART_SetConfig+0x350>)
 800400c:	fba2 2303 	umull	r2, r3, r2, r3
 8004010:	095b      	lsrs	r3, r3, #5
 8004012:	f003 030f 	and.w	r3, r3, #15
 8004016:	442b      	add	r3, r5
 8004018:	60a3      	str	r3, [r4, #8]
 800401a:	e071      	b.n	8004100 <UART_SetConfig+0x42c>
 800401c:	40011000 	.word	0x40011000
 8004020:	40011400 	.word	0x40011400
 8004024:	51eb851f 	.word	0x51eb851f
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	681c      	ldr	r4, [r3, #0]
 800402c:	f7fe fe34 	bl	8002c98 <HAL_RCC_GetPCLK1Freq>
 8004030:	4602      	mov	r2, r0
 8004032:	4613      	mov	r3, r2
 8004034:	009b      	lsls	r3, r3, #2
 8004036:	4413      	add	r3, r2
 8004038:	009a      	lsls	r2, r3, #2
 800403a:	441a      	add	r2, r3
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	685b      	ldr	r3, [r3, #4]
 8004040:	009b      	lsls	r3, r3, #2
 8004042:	fbb2 f3f3 	udiv	r3, r2, r3
 8004046:	4a30      	ldr	r2, [pc, #192]	; (8004108 <UART_SetConfig+0x434>)
 8004048:	fba2 2303 	umull	r2, r3, r2, r3
 800404c:	095b      	lsrs	r3, r3, #5
 800404e:	011d      	lsls	r5, r3, #4
 8004050:	f7fe fe22 	bl	8002c98 <HAL_RCC_GetPCLK1Freq>
 8004054:	4602      	mov	r2, r0
 8004056:	4613      	mov	r3, r2
 8004058:	009b      	lsls	r3, r3, #2
 800405a:	4413      	add	r3, r2
 800405c:	009a      	lsls	r2, r3, #2
 800405e:	441a      	add	r2, r3
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	685b      	ldr	r3, [r3, #4]
 8004064:	009b      	lsls	r3, r3, #2
 8004066:	fbb2 f6f3 	udiv	r6, r2, r3
 800406a:	f7fe fe15 	bl	8002c98 <HAL_RCC_GetPCLK1Freq>
 800406e:	4602      	mov	r2, r0
 8004070:	4613      	mov	r3, r2
 8004072:	009b      	lsls	r3, r3, #2
 8004074:	4413      	add	r3, r2
 8004076:	009a      	lsls	r2, r3, #2
 8004078:	441a      	add	r2, r3
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	685b      	ldr	r3, [r3, #4]
 800407e:	009b      	lsls	r3, r3, #2
 8004080:	fbb2 f3f3 	udiv	r3, r2, r3
 8004084:	4a20      	ldr	r2, [pc, #128]	; (8004108 <UART_SetConfig+0x434>)
 8004086:	fba2 2303 	umull	r2, r3, r2, r3
 800408a:	095b      	lsrs	r3, r3, #5
 800408c:	2264      	movs	r2, #100	; 0x64
 800408e:	fb02 f303 	mul.w	r3, r2, r3
 8004092:	1af3      	subs	r3, r6, r3
 8004094:	011b      	lsls	r3, r3, #4
 8004096:	3332      	adds	r3, #50	; 0x32
 8004098:	4a1b      	ldr	r2, [pc, #108]	; (8004108 <UART_SetConfig+0x434>)
 800409a:	fba2 2303 	umull	r2, r3, r2, r3
 800409e:	095b      	lsrs	r3, r3, #5
 80040a0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80040a4:	441d      	add	r5, r3
 80040a6:	f7fe fdf7 	bl	8002c98 <HAL_RCC_GetPCLK1Freq>
 80040aa:	4602      	mov	r2, r0
 80040ac:	4613      	mov	r3, r2
 80040ae:	009b      	lsls	r3, r3, #2
 80040b0:	4413      	add	r3, r2
 80040b2:	009a      	lsls	r2, r3, #2
 80040b4:	441a      	add	r2, r3
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	685b      	ldr	r3, [r3, #4]
 80040ba:	009b      	lsls	r3, r3, #2
 80040bc:	fbb2 f6f3 	udiv	r6, r2, r3
 80040c0:	f7fe fdea 	bl	8002c98 <HAL_RCC_GetPCLK1Freq>
 80040c4:	4602      	mov	r2, r0
 80040c6:	4613      	mov	r3, r2
 80040c8:	009b      	lsls	r3, r3, #2
 80040ca:	4413      	add	r3, r2
 80040cc:	009a      	lsls	r2, r3, #2
 80040ce:	441a      	add	r2, r3
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	685b      	ldr	r3, [r3, #4]
 80040d4:	009b      	lsls	r3, r3, #2
 80040d6:	fbb2 f3f3 	udiv	r3, r2, r3
 80040da:	4a0b      	ldr	r2, [pc, #44]	; (8004108 <UART_SetConfig+0x434>)
 80040dc:	fba2 2303 	umull	r2, r3, r2, r3
 80040e0:	095b      	lsrs	r3, r3, #5
 80040e2:	2264      	movs	r2, #100	; 0x64
 80040e4:	fb02 f303 	mul.w	r3, r2, r3
 80040e8:	1af3      	subs	r3, r6, r3
 80040ea:	011b      	lsls	r3, r3, #4
 80040ec:	3332      	adds	r3, #50	; 0x32
 80040ee:	4a06      	ldr	r2, [pc, #24]	; (8004108 <UART_SetConfig+0x434>)
 80040f0:	fba2 2303 	umull	r2, r3, r2, r3
 80040f4:	095b      	lsrs	r3, r3, #5
 80040f6:	f003 030f 	and.w	r3, r3, #15
 80040fa:	442b      	add	r3, r5
 80040fc:	60a3      	str	r3, [r4, #8]
}
 80040fe:	e7ff      	b.n	8004100 <UART_SetConfig+0x42c>
 8004100:	bf00      	nop
 8004102:	3714      	adds	r7, #20
 8004104:	46bd      	mov	sp, r7
 8004106:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004108:	51eb851f 	.word	0x51eb851f

0800410c <__errno>:
 800410c:	4b01      	ldr	r3, [pc, #4]	; (8004114 <__errno+0x8>)
 800410e:	6818      	ldr	r0, [r3, #0]
 8004110:	4770      	bx	lr
 8004112:	bf00      	nop
 8004114:	2000000c 	.word	0x2000000c

08004118 <__libc_init_array>:
 8004118:	b570      	push	{r4, r5, r6, lr}
 800411a:	4e0d      	ldr	r6, [pc, #52]	; (8004150 <__libc_init_array+0x38>)
 800411c:	4c0d      	ldr	r4, [pc, #52]	; (8004154 <__libc_init_array+0x3c>)
 800411e:	1ba4      	subs	r4, r4, r6
 8004120:	10a4      	asrs	r4, r4, #2
 8004122:	2500      	movs	r5, #0
 8004124:	42a5      	cmp	r5, r4
 8004126:	d109      	bne.n	800413c <__libc_init_array+0x24>
 8004128:	4e0b      	ldr	r6, [pc, #44]	; (8004158 <__libc_init_array+0x40>)
 800412a:	4c0c      	ldr	r4, [pc, #48]	; (800415c <__libc_init_array+0x44>)
 800412c:	f000 ffc6 	bl	80050bc <_init>
 8004130:	1ba4      	subs	r4, r4, r6
 8004132:	10a4      	asrs	r4, r4, #2
 8004134:	2500      	movs	r5, #0
 8004136:	42a5      	cmp	r5, r4
 8004138:	d105      	bne.n	8004146 <__libc_init_array+0x2e>
 800413a:	bd70      	pop	{r4, r5, r6, pc}
 800413c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8004140:	4798      	blx	r3
 8004142:	3501      	adds	r5, #1
 8004144:	e7ee      	b.n	8004124 <__libc_init_array+0xc>
 8004146:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800414a:	4798      	blx	r3
 800414c:	3501      	adds	r5, #1
 800414e:	e7f2      	b.n	8004136 <__libc_init_array+0x1e>
 8004150:	080051bc 	.word	0x080051bc
 8004154:	080051bc 	.word	0x080051bc
 8004158:	080051bc 	.word	0x080051bc
 800415c:	080051c0 	.word	0x080051c0

08004160 <memset>:
 8004160:	4402      	add	r2, r0
 8004162:	4603      	mov	r3, r0
 8004164:	4293      	cmp	r3, r2
 8004166:	d100      	bne.n	800416a <memset+0xa>
 8004168:	4770      	bx	lr
 800416a:	f803 1b01 	strb.w	r1, [r3], #1
 800416e:	e7f9      	b.n	8004164 <memset+0x4>

08004170 <iprintf>:
 8004170:	b40f      	push	{r0, r1, r2, r3}
 8004172:	4b0a      	ldr	r3, [pc, #40]	; (800419c <iprintf+0x2c>)
 8004174:	b513      	push	{r0, r1, r4, lr}
 8004176:	681c      	ldr	r4, [r3, #0]
 8004178:	b124      	cbz	r4, 8004184 <iprintf+0x14>
 800417a:	69a3      	ldr	r3, [r4, #24]
 800417c:	b913      	cbnz	r3, 8004184 <iprintf+0x14>
 800417e:	4620      	mov	r0, r4
 8004180:	f000 fa38 	bl	80045f4 <__sinit>
 8004184:	ab05      	add	r3, sp, #20
 8004186:	9a04      	ldr	r2, [sp, #16]
 8004188:	68a1      	ldr	r1, [r4, #8]
 800418a:	9301      	str	r3, [sp, #4]
 800418c:	4620      	mov	r0, r4
 800418e:	f000 fbf5 	bl	800497c <_vfiprintf_r>
 8004192:	b002      	add	sp, #8
 8004194:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004198:	b004      	add	sp, #16
 800419a:	4770      	bx	lr
 800419c:	2000000c 	.word	0x2000000c

080041a0 <putchar>:
 80041a0:	b538      	push	{r3, r4, r5, lr}
 80041a2:	4b08      	ldr	r3, [pc, #32]	; (80041c4 <putchar+0x24>)
 80041a4:	681c      	ldr	r4, [r3, #0]
 80041a6:	4605      	mov	r5, r0
 80041a8:	b124      	cbz	r4, 80041b4 <putchar+0x14>
 80041aa:	69a3      	ldr	r3, [r4, #24]
 80041ac:	b913      	cbnz	r3, 80041b4 <putchar+0x14>
 80041ae:	4620      	mov	r0, r4
 80041b0:	f000 fa20 	bl	80045f4 <__sinit>
 80041b4:	68a2      	ldr	r2, [r4, #8]
 80041b6:	4629      	mov	r1, r5
 80041b8:	4620      	mov	r0, r4
 80041ba:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80041be:	f000 be89 	b.w	8004ed4 <_putc_r>
 80041c2:	bf00      	nop
 80041c4:	2000000c 	.word	0x2000000c

080041c8 <_puts_r>:
 80041c8:	b570      	push	{r4, r5, r6, lr}
 80041ca:	460e      	mov	r6, r1
 80041cc:	4605      	mov	r5, r0
 80041ce:	b118      	cbz	r0, 80041d8 <_puts_r+0x10>
 80041d0:	6983      	ldr	r3, [r0, #24]
 80041d2:	b90b      	cbnz	r3, 80041d8 <_puts_r+0x10>
 80041d4:	f000 fa0e 	bl	80045f4 <__sinit>
 80041d8:	69ab      	ldr	r3, [r5, #24]
 80041da:	68ac      	ldr	r4, [r5, #8]
 80041dc:	b913      	cbnz	r3, 80041e4 <_puts_r+0x1c>
 80041de:	4628      	mov	r0, r5
 80041e0:	f000 fa08 	bl	80045f4 <__sinit>
 80041e4:	4b23      	ldr	r3, [pc, #140]	; (8004274 <_puts_r+0xac>)
 80041e6:	429c      	cmp	r4, r3
 80041e8:	d117      	bne.n	800421a <_puts_r+0x52>
 80041ea:	686c      	ldr	r4, [r5, #4]
 80041ec:	89a3      	ldrh	r3, [r4, #12]
 80041ee:	071b      	lsls	r3, r3, #28
 80041f0:	d51d      	bpl.n	800422e <_puts_r+0x66>
 80041f2:	6923      	ldr	r3, [r4, #16]
 80041f4:	b1db      	cbz	r3, 800422e <_puts_r+0x66>
 80041f6:	3e01      	subs	r6, #1
 80041f8:	68a3      	ldr	r3, [r4, #8]
 80041fa:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80041fe:	3b01      	subs	r3, #1
 8004200:	60a3      	str	r3, [r4, #8]
 8004202:	b9e9      	cbnz	r1, 8004240 <_puts_r+0x78>
 8004204:	2b00      	cmp	r3, #0
 8004206:	da2e      	bge.n	8004266 <_puts_r+0x9e>
 8004208:	4622      	mov	r2, r4
 800420a:	210a      	movs	r1, #10
 800420c:	4628      	mov	r0, r5
 800420e:	f000 f83f 	bl	8004290 <__swbuf_r>
 8004212:	3001      	adds	r0, #1
 8004214:	d011      	beq.n	800423a <_puts_r+0x72>
 8004216:	200a      	movs	r0, #10
 8004218:	bd70      	pop	{r4, r5, r6, pc}
 800421a:	4b17      	ldr	r3, [pc, #92]	; (8004278 <_puts_r+0xb0>)
 800421c:	429c      	cmp	r4, r3
 800421e:	d101      	bne.n	8004224 <_puts_r+0x5c>
 8004220:	68ac      	ldr	r4, [r5, #8]
 8004222:	e7e3      	b.n	80041ec <_puts_r+0x24>
 8004224:	4b15      	ldr	r3, [pc, #84]	; (800427c <_puts_r+0xb4>)
 8004226:	429c      	cmp	r4, r3
 8004228:	bf08      	it	eq
 800422a:	68ec      	ldreq	r4, [r5, #12]
 800422c:	e7de      	b.n	80041ec <_puts_r+0x24>
 800422e:	4621      	mov	r1, r4
 8004230:	4628      	mov	r0, r5
 8004232:	f000 f87f 	bl	8004334 <__swsetup_r>
 8004236:	2800      	cmp	r0, #0
 8004238:	d0dd      	beq.n	80041f6 <_puts_r+0x2e>
 800423a:	f04f 30ff 	mov.w	r0, #4294967295
 800423e:	bd70      	pop	{r4, r5, r6, pc}
 8004240:	2b00      	cmp	r3, #0
 8004242:	da04      	bge.n	800424e <_puts_r+0x86>
 8004244:	69a2      	ldr	r2, [r4, #24]
 8004246:	4293      	cmp	r3, r2
 8004248:	db06      	blt.n	8004258 <_puts_r+0x90>
 800424a:	290a      	cmp	r1, #10
 800424c:	d004      	beq.n	8004258 <_puts_r+0x90>
 800424e:	6823      	ldr	r3, [r4, #0]
 8004250:	1c5a      	adds	r2, r3, #1
 8004252:	6022      	str	r2, [r4, #0]
 8004254:	7019      	strb	r1, [r3, #0]
 8004256:	e7cf      	b.n	80041f8 <_puts_r+0x30>
 8004258:	4622      	mov	r2, r4
 800425a:	4628      	mov	r0, r5
 800425c:	f000 f818 	bl	8004290 <__swbuf_r>
 8004260:	3001      	adds	r0, #1
 8004262:	d1c9      	bne.n	80041f8 <_puts_r+0x30>
 8004264:	e7e9      	b.n	800423a <_puts_r+0x72>
 8004266:	6823      	ldr	r3, [r4, #0]
 8004268:	200a      	movs	r0, #10
 800426a:	1c5a      	adds	r2, r3, #1
 800426c:	6022      	str	r2, [r4, #0]
 800426e:	7018      	strb	r0, [r3, #0]
 8004270:	bd70      	pop	{r4, r5, r6, pc}
 8004272:	bf00      	nop
 8004274:	08005140 	.word	0x08005140
 8004278:	08005160 	.word	0x08005160
 800427c:	08005120 	.word	0x08005120

08004280 <puts>:
 8004280:	4b02      	ldr	r3, [pc, #8]	; (800428c <puts+0xc>)
 8004282:	4601      	mov	r1, r0
 8004284:	6818      	ldr	r0, [r3, #0]
 8004286:	f7ff bf9f 	b.w	80041c8 <_puts_r>
 800428a:	bf00      	nop
 800428c:	2000000c 	.word	0x2000000c

08004290 <__swbuf_r>:
 8004290:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004292:	460e      	mov	r6, r1
 8004294:	4614      	mov	r4, r2
 8004296:	4605      	mov	r5, r0
 8004298:	b118      	cbz	r0, 80042a2 <__swbuf_r+0x12>
 800429a:	6983      	ldr	r3, [r0, #24]
 800429c:	b90b      	cbnz	r3, 80042a2 <__swbuf_r+0x12>
 800429e:	f000 f9a9 	bl	80045f4 <__sinit>
 80042a2:	4b21      	ldr	r3, [pc, #132]	; (8004328 <__swbuf_r+0x98>)
 80042a4:	429c      	cmp	r4, r3
 80042a6:	d12a      	bne.n	80042fe <__swbuf_r+0x6e>
 80042a8:	686c      	ldr	r4, [r5, #4]
 80042aa:	69a3      	ldr	r3, [r4, #24]
 80042ac:	60a3      	str	r3, [r4, #8]
 80042ae:	89a3      	ldrh	r3, [r4, #12]
 80042b0:	071a      	lsls	r2, r3, #28
 80042b2:	d52e      	bpl.n	8004312 <__swbuf_r+0x82>
 80042b4:	6923      	ldr	r3, [r4, #16]
 80042b6:	b363      	cbz	r3, 8004312 <__swbuf_r+0x82>
 80042b8:	6923      	ldr	r3, [r4, #16]
 80042ba:	6820      	ldr	r0, [r4, #0]
 80042bc:	1ac0      	subs	r0, r0, r3
 80042be:	6963      	ldr	r3, [r4, #20]
 80042c0:	b2f6      	uxtb	r6, r6
 80042c2:	4298      	cmp	r0, r3
 80042c4:	4637      	mov	r7, r6
 80042c6:	db04      	blt.n	80042d2 <__swbuf_r+0x42>
 80042c8:	4621      	mov	r1, r4
 80042ca:	4628      	mov	r0, r5
 80042cc:	f000 f928 	bl	8004520 <_fflush_r>
 80042d0:	bb28      	cbnz	r0, 800431e <__swbuf_r+0x8e>
 80042d2:	68a3      	ldr	r3, [r4, #8]
 80042d4:	3b01      	subs	r3, #1
 80042d6:	60a3      	str	r3, [r4, #8]
 80042d8:	6823      	ldr	r3, [r4, #0]
 80042da:	1c5a      	adds	r2, r3, #1
 80042dc:	6022      	str	r2, [r4, #0]
 80042de:	701e      	strb	r6, [r3, #0]
 80042e0:	6963      	ldr	r3, [r4, #20]
 80042e2:	3001      	adds	r0, #1
 80042e4:	4298      	cmp	r0, r3
 80042e6:	d004      	beq.n	80042f2 <__swbuf_r+0x62>
 80042e8:	89a3      	ldrh	r3, [r4, #12]
 80042ea:	07db      	lsls	r3, r3, #31
 80042ec:	d519      	bpl.n	8004322 <__swbuf_r+0x92>
 80042ee:	2e0a      	cmp	r6, #10
 80042f0:	d117      	bne.n	8004322 <__swbuf_r+0x92>
 80042f2:	4621      	mov	r1, r4
 80042f4:	4628      	mov	r0, r5
 80042f6:	f000 f913 	bl	8004520 <_fflush_r>
 80042fa:	b190      	cbz	r0, 8004322 <__swbuf_r+0x92>
 80042fc:	e00f      	b.n	800431e <__swbuf_r+0x8e>
 80042fe:	4b0b      	ldr	r3, [pc, #44]	; (800432c <__swbuf_r+0x9c>)
 8004300:	429c      	cmp	r4, r3
 8004302:	d101      	bne.n	8004308 <__swbuf_r+0x78>
 8004304:	68ac      	ldr	r4, [r5, #8]
 8004306:	e7d0      	b.n	80042aa <__swbuf_r+0x1a>
 8004308:	4b09      	ldr	r3, [pc, #36]	; (8004330 <__swbuf_r+0xa0>)
 800430a:	429c      	cmp	r4, r3
 800430c:	bf08      	it	eq
 800430e:	68ec      	ldreq	r4, [r5, #12]
 8004310:	e7cb      	b.n	80042aa <__swbuf_r+0x1a>
 8004312:	4621      	mov	r1, r4
 8004314:	4628      	mov	r0, r5
 8004316:	f000 f80d 	bl	8004334 <__swsetup_r>
 800431a:	2800      	cmp	r0, #0
 800431c:	d0cc      	beq.n	80042b8 <__swbuf_r+0x28>
 800431e:	f04f 37ff 	mov.w	r7, #4294967295
 8004322:	4638      	mov	r0, r7
 8004324:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004326:	bf00      	nop
 8004328:	08005140 	.word	0x08005140
 800432c:	08005160 	.word	0x08005160
 8004330:	08005120 	.word	0x08005120

08004334 <__swsetup_r>:
 8004334:	4b32      	ldr	r3, [pc, #200]	; (8004400 <__swsetup_r+0xcc>)
 8004336:	b570      	push	{r4, r5, r6, lr}
 8004338:	681d      	ldr	r5, [r3, #0]
 800433a:	4606      	mov	r6, r0
 800433c:	460c      	mov	r4, r1
 800433e:	b125      	cbz	r5, 800434a <__swsetup_r+0x16>
 8004340:	69ab      	ldr	r3, [r5, #24]
 8004342:	b913      	cbnz	r3, 800434a <__swsetup_r+0x16>
 8004344:	4628      	mov	r0, r5
 8004346:	f000 f955 	bl	80045f4 <__sinit>
 800434a:	4b2e      	ldr	r3, [pc, #184]	; (8004404 <__swsetup_r+0xd0>)
 800434c:	429c      	cmp	r4, r3
 800434e:	d10f      	bne.n	8004370 <__swsetup_r+0x3c>
 8004350:	686c      	ldr	r4, [r5, #4]
 8004352:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004356:	b29a      	uxth	r2, r3
 8004358:	0715      	lsls	r5, r2, #28
 800435a:	d42c      	bmi.n	80043b6 <__swsetup_r+0x82>
 800435c:	06d0      	lsls	r0, r2, #27
 800435e:	d411      	bmi.n	8004384 <__swsetup_r+0x50>
 8004360:	2209      	movs	r2, #9
 8004362:	6032      	str	r2, [r6, #0]
 8004364:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004368:	81a3      	strh	r3, [r4, #12]
 800436a:	f04f 30ff 	mov.w	r0, #4294967295
 800436e:	bd70      	pop	{r4, r5, r6, pc}
 8004370:	4b25      	ldr	r3, [pc, #148]	; (8004408 <__swsetup_r+0xd4>)
 8004372:	429c      	cmp	r4, r3
 8004374:	d101      	bne.n	800437a <__swsetup_r+0x46>
 8004376:	68ac      	ldr	r4, [r5, #8]
 8004378:	e7eb      	b.n	8004352 <__swsetup_r+0x1e>
 800437a:	4b24      	ldr	r3, [pc, #144]	; (800440c <__swsetup_r+0xd8>)
 800437c:	429c      	cmp	r4, r3
 800437e:	bf08      	it	eq
 8004380:	68ec      	ldreq	r4, [r5, #12]
 8004382:	e7e6      	b.n	8004352 <__swsetup_r+0x1e>
 8004384:	0751      	lsls	r1, r2, #29
 8004386:	d512      	bpl.n	80043ae <__swsetup_r+0x7a>
 8004388:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800438a:	b141      	cbz	r1, 800439e <__swsetup_r+0x6a>
 800438c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8004390:	4299      	cmp	r1, r3
 8004392:	d002      	beq.n	800439a <__swsetup_r+0x66>
 8004394:	4630      	mov	r0, r6
 8004396:	f000 fa1b 	bl	80047d0 <_free_r>
 800439a:	2300      	movs	r3, #0
 800439c:	6363      	str	r3, [r4, #52]	; 0x34
 800439e:	89a3      	ldrh	r3, [r4, #12]
 80043a0:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80043a4:	81a3      	strh	r3, [r4, #12]
 80043a6:	2300      	movs	r3, #0
 80043a8:	6063      	str	r3, [r4, #4]
 80043aa:	6923      	ldr	r3, [r4, #16]
 80043ac:	6023      	str	r3, [r4, #0]
 80043ae:	89a3      	ldrh	r3, [r4, #12]
 80043b0:	f043 0308 	orr.w	r3, r3, #8
 80043b4:	81a3      	strh	r3, [r4, #12]
 80043b6:	6923      	ldr	r3, [r4, #16]
 80043b8:	b94b      	cbnz	r3, 80043ce <__swsetup_r+0x9a>
 80043ba:	89a3      	ldrh	r3, [r4, #12]
 80043bc:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80043c0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80043c4:	d003      	beq.n	80043ce <__swsetup_r+0x9a>
 80043c6:	4621      	mov	r1, r4
 80043c8:	4630      	mov	r0, r6
 80043ca:	f000 f9c1 	bl	8004750 <__smakebuf_r>
 80043ce:	89a2      	ldrh	r2, [r4, #12]
 80043d0:	f012 0301 	ands.w	r3, r2, #1
 80043d4:	d00c      	beq.n	80043f0 <__swsetup_r+0xbc>
 80043d6:	2300      	movs	r3, #0
 80043d8:	60a3      	str	r3, [r4, #8]
 80043da:	6963      	ldr	r3, [r4, #20]
 80043dc:	425b      	negs	r3, r3
 80043de:	61a3      	str	r3, [r4, #24]
 80043e0:	6923      	ldr	r3, [r4, #16]
 80043e2:	b953      	cbnz	r3, 80043fa <__swsetup_r+0xc6>
 80043e4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80043e8:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 80043ec:	d1ba      	bne.n	8004364 <__swsetup_r+0x30>
 80043ee:	bd70      	pop	{r4, r5, r6, pc}
 80043f0:	0792      	lsls	r2, r2, #30
 80043f2:	bf58      	it	pl
 80043f4:	6963      	ldrpl	r3, [r4, #20]
 80043f6:	60a3      	str	r3, [r4, #8]
 80043f8:	e7f2      	b.n	80043e0 <__swsetup_r+0xac>
 80043fa:	2000      	movs	r0, #0
 80043fc:	e7f7      	b.n	80043ee <__swsetup_r+0xba>
 80043fe:	bf00      	nop
 8004400:	2000000c 	.word	0x2000000c
 8004404:	08005140 	.word	0x08005140
 8004408:	08005160 	.word	0x08005160
 800440c:	08005120 	.word	0x08005120

08004410 <__sflush_r>:
 8004410:	898a      	ldrh	r2, [r1, #12]
 8004412:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004416:	4605      	mov	r5, r0
 8004418:	0710      	lsls	r0, r2, #28
 800441a:	460c      	mov	r4, r1
 800441c:	d45a      	bmi.n	80044d4 <__sflush_r+0xc4>
 800441e:	684b      	ldr	r3, [r1, #4]
 8004420:	2b00      	cmp	r3, #0
 8004422:	dc05      	bgt.n	8004430 <__sflush_r+0x20>
 8004424:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8004426:	2b00      	cmp	r3, #0
 8004428:	dc02      	bgt.n	8004430 <__sflush_r+0x20>
 800442a:	2000      	movs	r0, #0
 800442c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004430:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8004432:	2e00      	cmp	r6, #0
 8004434:	d0f9      	beq.n	800442a <__sflush_r+0x1a>
 8004436:	2300      	movs	r3, #0
 8004438:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800443c:	682f      	ldr	r7, [r5, #0]
 800443e:	602b      	str	r3, [r5, #0]
 8004440:	d033      	beq.n	80044aa <__sflush_r+0x9a>
 8004442:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8004444:	89a3      	ldrh	r3, [r4, #12]
 8004446:	075a      	lsls	r2, r3, #29
 8004448:	d505      	bpl.n	8004456 <__sflush_r+0x46>
 800444a:	6863      	ldr	r3, [r4, #4]
 800444c:	1ac0      	subs	r0, r0, r3
 800444e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8004450:	b10b      	cbz	r3, 8004456 <__sflush_r+0x46>
 8004452:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8004454:	1ac0      	subs	r0, r0, r3
 8004456:	2300      	movs	r3, #0
 8004458:	4602      	mov	r2, r0
 800445a:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800445c:	6a21      	ldr	r1, [r4, #32]
 800445e:	4628      	mov	r0, r5
 8004460:	47b0      	blx	r6
 8004462:	1c43      	adds	r3, r0, #1
 8004464:	89a3      	ldrh	r3, [r4, #12]
 8004466:	d106      	bne.n	8004476 <__sflush_r+0x66>
 8004468:	6829      	ldr	r1, [r5, #0]
 800446a:	291d      	cmp	r1, #29
 800446c:	d84b      	bhi.n	8004506 <__sflush_r+0xf6>
 800446e:	4a2b      	ldr	r2, [pc, #172]	; (800451c <__sflush_r+0x10c>)
 8004470:	40ca      	lsrs	r2, r1
 8004472:	07d6      	lsls	r6, r2, #31
 8004474:	d547      	bpl.n	8004506 <__sflush_r+0xf6>
 8004476:	2200      	movs	r2, #0
 8004478:	6062      	str	r2, [r4, #4]
 800447a:	04d9      	lsls	r1, r3, #19
 800447c:	6922      	ldr	r2, [r4, #16]
 800447e:	6022      	str	r2, [r4, #0]
 8004480:	d504      	bpl.n	800448c <__sflush_r+0x7c>
 8004482:	1c42      	adds	r2, r0, #1
 8004484:	d101      	bne.n	800448a <__sflush_r+0x7a>
 8004486:	682b      	ldr	r3, [r5, #0]
 8004488:	b903      	cbnz	r3, 800448c <__sflush_r+0x7c>
 800448a:	6560      	str	r0, [r4, #84]	; 0x54
 800448c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800448e:	602f      	str	r7, [r5, #0]
 8004490:	2900      	cmp	r1, #0
 8004492:	d0ca      	beq.n	800442a <__sflush_r+0x1a>
 8004494:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8004498:	4299      	cmp	r1, r3
 800449a:	d002      	beq.n	80044a2 <__sflush_r+0x92>
 800449c:	4628      	mov	r0, r5
 800449e:	f000 f997 	bl	80047d0 <_free_r>
 80044a2:	2000      	movs	r0, #0
 80044a4:	6360      	str	r0, [r4, #52]	; 0x34
 80044a6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80044aa:	6a21      	ldr	r1, [r4, #32]
 80044ac:	2301      	movs	r3, #1
 80044ae:	4628      	mov	r0, r5
 80044b0:	47b0      	blx	r6
 80044b2:	1c41      	adds	r1, r0, #1
 80044b4:	d1c6      	bne.n	8004444 <__sflush_r+0x34>
 80044b6:	682b      	ldr	r3, [r5, #0]
 80044b8:	2b00      	cmp	r3, #0
 80044ba:	d0c3      	beq.n	8004444 <__sflush_r+0x34>
 80044bc:	2b1d      	cmp	r3, #29
 80044be:	d001      	beq.n	80044c4 <__sflush_r+0xb4>
 80044c0:	2b16      	cmp	r3, #22
 80044c2:	d101      	bne.n	80044c8 <__sflush_r+0xb8>
 80044c4:	602f      	str	r7, [r5, #0]
 80044c6:	e7b0      	b.n	800442a <__sflush_r+0x1a>
 80044c8:	89a3      	ldrh	r3, [r4, #12]
 80044ca:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80044ce:	81a3      	strh	r3, [r4, #12]
 80044d0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80044d4:	690f      	ldr	r7, [r1, #16]
 80044d6:	2f00      	cmp	r7, #0
 80044d8:	d0a7      	beq.n	800442a <__sflush_r+0x1a>
 80044da:	0793      	lsls	r3, r2, #30
 80044dc:	680e      	ldr	r6, [r1, #0]
 80044de:	bf08      	it	eq
 80044e0:	694b      	ldreq	r3, [r1, #20]
 80044e2:	600f      	str	r7, [r1, #0]
 80044e4:	bf18      	it	ne
 80044e6:	2300      	movne	r3, #0
 80044e8:	eba6 0807 	sub.w	r8, r6, r7
 80044ec:	608b      	str	r3, [r1, #8]
 80044ee:	f1b8 0f00 	cmp.w	r8, #0
 80044f2:	dd9a      	ble.n	800442a <__sflush_r+0x1a>
 80044f4:	4643      	mov	r3, r8
 80044f6:	463a      	mov	r2, r7
 80044f8:	6a21      	ldr	r1, [r4, #32]
 80044fa:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80044fc:	4628      	mov	r0, r5
 80044fe:	47b0      	blx	r6
 8004500:	2800      	cmp	r0, #0
 8004502:	dc07      	bgt.n	8004514 <__sflush_r+0x104>
 8004504:	89a3      	ldrh	r3, [r4, #12]
 8004506:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800450a:	81a3      	strh	r3, [r4, #12]
 800450c:	f04f 30ff 	mov.w	r0, #4294967295
 8004510:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004514:	4407      	add	r7, r0
 8004516:	eba8 0800 	sub.w	r8, r8, r0
 800451a:	e7e8      	b.n	80044ee <__sflush_r+0xde>
 800451c:	20400001 	.word	0x20400001

08004520 <_fflush_r>:
 8004520:	b538      	push	{r3, r4, r5, lr}
 8004522:	690b      	ldr	r3, [r1, #16]
 8004524:	4605      	mov	r5, r0
 8004526:	460c      	mov	r4, r1
 8004528:	b1db      	cbz	r3, 8004562 <_fflush_r+0x42>
 800452a:	b118      	cbz	r0, 8004534 <_fflush_r+0x14>
 800452c:	6983      	ldr	r3, [r0, #24]
 800452e:	b90b      	cbnz	r3, 8004534 <_fflush_r+0x14>
 8004530:	f000 f860 	bl	80045f4 <__sinit>
 8004534:	4b0c      	ldr	r3, [pc, #48]	; (8004568 <_fflush_r+0x48>)
 8004536:	429c      	cmp	r4, r3
 8004538:	d109      	bne.n	800454e <_fflush_r+0x2e>
 800453a:	686c      	ldr	r4, [r5, #4]
 800453c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004540:	b17b      	cbz	r3, 8004562 <_fflush_r+0x42>
 8004542:	4621      	mov	r1, r4
 8004544:	4628      	mov	r0, r5
 8004546:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800454a:	f7ff bf61 	b.w	8004410 <__sflush_r>
 800454e:	4b07      	ldr	r3, [pc, #28]	; (800456c <_fflush_r+0x4c>)
 8004550:	429c      	cmp	r4, r3
 8004552:	d101      	bne.n	8004558 <_fflush_r+0x38>
 8004554:	68ac      	ldr	r4, [r5, #8]
 8004556:	e7f1      	b.n	800453c <_fflush_r+0x1c>
 8004558:	4b05      	ldr	r3, [pc, #20]	; (8004570 <_fflush_r+0x50>)
 800455a:	429c      	cmp	r4, r3
 800455c:	bf08      	it	eq
 800455e:	68ec      	ldreq	r4, [r5, #12]
 8004560:	e7ec      	b.n	800453c <_fflush_r+0x1c>
 8004562:	2000      	movs	r0, #0
 8004564:	bd38      	pop	{r3, r4, r5, pc}
 8004566:	bf00      	nop
 8004568:	08005140 	.word	0x08005140
 800456c:	08005160 	.word	0x08005160
 8004570:	08005120 	.word	0x08005120

08004574 <_cleanup_r>:
 8004574:	4901      	ldr	r1, [pc, #4]	; (800457c <_cleanup_r+0x8>)
 8004576:	f000 b8a9 	b.w	80046cc <_fwalk_reent>
 800457a:	bf00      	nop
 800457c:	08004521 	.word	0x08004521

08004580 <std.isra.0>:
 8004580:	2300      	movs	r3, #0
 8004582:	b510      	push	{r4, lr}
 8004584:	4604      	mov	r4, r0
 8004586:	6003      	str	r3, [r0, #0]
 8004588:	6043      	str	r3, [r0, #4]
 800458a:	6083      	str	r3, [r0, #8]
 800458c:	8181      	strh	r1, [r0, #12]
 800458e:	6643      	str	r3, [r0, #100]	; 0x64
 8004590:	81c2      	strh	r2, [r0, #14]
 8004592:	6103      	str	r3, [r0, #16]
 8004594:	6143      	str	r3, [r0, #20]
 8004596:	6183      	str	r3, [r0, #24]
 8004598:	4619      	mov	r1, r3
 800459a:	2208      	movs	r2, #8
 800459c:	305c      	adds	r0, #92	; 0x5c
 800459e:	f7ff fddf 	bl	8004160 <memset>
 80045a2:	4b05      	ldr	r3, [pc, #20]	; (80045b8 <std.isra.0+0x38>)
 80045a4:	6263      	str	r3, [r4, #36]	; 0x24
 80045a6:	4b05      	ldr	r3, [pc, #20]	; (80045bc <std.isra.0+0x3c>)
 80045a8:	62a3      	str	r3, [r4, #40]	; 0x28
 80045aa:	4b05      	ldr	r3, [pc, #20]	; (80045c0 <std.isra.0+0x40>)
 80045ac:	62e3      	str	r3, [r4, #44]	; 0x2c
 80045ae:	4b05      	ldr	r3, [pc, #20]	; (80045c4 <std.isra.0+0x44>)
 80045b0:	6224      	str	r4, [r4, #32]
 80045b2:	6323      	str	r3, [r4, #48]	; 0x30
 80045b4:	bd10      	pop	{r4, pc}
 80045b6:	bf00      	nop
 80045b8:	08004f61 	.word	0x08004f61
 80045bc:	08004f83 	.word	0x08004f83
 80045c0:	08004fbb 	.word	0x08004fbb
 80045c4:	08004fdf 	.word	0x08004fdf

080045c8 <__sfmoreglue>:
 80045c8:	b570      	push	{r4, r5, r6, lr}
 80045ca:	1e4a      	subs	r2, r1, #1
 80045cc:	2568      	movs	r5, #104	; 0x68
 80045ce:	4355      	muls	r5, r2
 80045d0:	460e      	mov	r6, r1
 80045d2:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80045d6:	f000 f949 	bl	800486c <_malloc_r>
 80045da:	4604      	mov	r4, r0
 80045dc:	b140      	cbz	r0, 80045f0 <__sfmoreglue+0x28>
 80045de:	2100      	movs	r1, #0
 80045e0:	e880 0042 	stmia.w	r0, {r1, r6}
 80045e4:	300c      	adds	r0, #12
 80045e6:	60a0      	str	r0, [r4, #8]
 80045e8:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80045ec:	f7ff fdb8 	bl	8004160 <memset>
 80045f0:	4620      	mov	r0, r4
 80045f2:	bd70      	pop	{r4, r5, r6, pc}

080045f4 <__sinit>:
 80045f4:	6983      	ldr	r3, [r0, #24]
 80045f6:	b510      	push	{r4, lr}
 80045f8:	4604      	mov	r4, r0
 80045fa:	bb33      	cbnz	r3, 800464a <__sinit+0x56>
 80045fc:	6483      	str	r3, [r0, #72]	; 0x48
 80045fe:	64c3      	str	r3, [r0, #76]	; 0x4c
 8004600:	6503      	str	r3, [r0, #80]	; 0x50
 8004602:	4b12      	ldr	r3, [pc, #72]	; (800464c <__sinit+0x58>)
 8004604:	4a12      	ldr	r2, [pc, #72]	; (8004650 <__sinit+0x5c>)
 8004606:	681b      	ldr	r3, [r3, #0]
 8004608:	6282      	str	r2, [r0, #40]	; 0x28
 800460a:	4298      	cmp	r0, r3
 800460c:	bf04      	itt	eq
 800460e:	2301      	moveq	r3, #1
 8004610:	6183      	streq	r3, [r0, #24]
 8004612:	f000 f81f 	bl	8004654 <__sfp>
 8004616:	6060      	str	r0, [r4, #4]
 8004618:	4620      	mov	r0, r4
 800461a:	f000 f81b 	bl	8004654 <__sfp>
 800461e:	60a0      	str	r0, [r4, #8]
 8004620:	4620      	mov	r0, r4
 8004622:	f000 f817 	bl	8004654 <__sfp>
 8004626:	2200      	movs	r2, #0
 8004628:	60e0      	str	r0, [r4, #12]
 800462a:	2104      	movs	r1, #4
 800462c:	6860      	ldr	r0, [r4, #4]
 800462e:	f7ff ffa7 	bl	8004580 <std.isra.0>
 8004632:	2201      	movs	r2, #1
 8004634:	2109      	movs	r1, #9
 8004636:	68a0      	ldr	r0, [r4, #8]
 8004638:	f7ff ffa2 	bl	8004580 <std.isra.0>
 800463c:	2202      	movs	r2, #2
 800463e:	2112      	movs	r1, #18
 8004640:	68e0      	ldr	r0, [r4, #12]
 8004642:	f7ff ff9d 	bl	8004580 <std.isra.0>
 8004646:	2301      	movs	r3, #1
 8004648:	61a3      	str	r3, [r4, #24]
 800464a:	bd10      	pop	{r4, pc}
 800464c:	0800511c 	.word	0x0800511c
 8004650:	08004575 	.word	0x08004575

08004654 <__sfp>:
 8004654:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004656:	4b1c      	ldr	r3, [pc, #112]	; (80046c8 <__sfp+0x74>)
 8004658:	681e      	ldr	r6, [r3, #0]
 800465a:	69b3      	ldr	r3, [r6, #24]
 800465c:	4607      	mov	r7, r0
 800465e:	b913      	cbnz	r3, 8004666 <__sfp+0x12>
 8004660:	4630      	mov	r0, r6
 8004662:	f7ff ffc7 	bl	80045f4 <__sinit>
 8004666:	3648      	adds	r6, #72	; 0x48
 8004668:	68b4      	ldr	r4, [r6, #8]
 800466a:	6873      	ldr	r3, [r6, #4]
 800466c:	3b01      	subs	r3, #1
 800466e:	d503      	bpl.n	8004678 <__sfp+0x24>
 8004670:	6833      	ldr	r3, [r6, #0]
 8004672:	b133      	cbz	r3, 8004682 <__sfp+0x2e>
 8004674:	6836      	ldr	r6, [r6, #0]
 8004676:	e7f7      	b.n	8004668 <__sfp+0x14>
 8004678:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800467c:	b16d      	cbz	r5, 800469a <__sfp+0x46>
 800467e:	3468      	adds	r4, #104	; 0x68
 8004680:	e7f4      	b.n	800466c <__sfp+0x18>
 8004682:	2104      	movs	r1, #4
 8004684:	4638      	mov	r0, r7
 8004686:	f7ff ff9f 	bl	80045c8 <__sfmoreglue>
 800468a:	6030      	str	r0, [r6, #0]
 800468c:	2800      	cmp	r0, #0
 800468e:	d1f1      	bne.n	8004674 <__sfp+0x20>
 8004690:	230c      	movs	r3, #12
 8004692:	603b      	str	r3, [r7, #0]
 8004694:	4604      	mov	r4, r0
 8004696:	4620      	mov	r0, r4
 8004698:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800469a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800469e:	81e3      	strh	r3, [r4, #14]
 80046a0:	2301      	movs	r3, #1
 80046a2:	81a3      	strh	r3, [r4, #12]
 80046a4:	6665      	str	r5, [r4, #100]	; 0x64
 80046a6:	6025      	str	r5, [r4, #0]
 80046a8:	60a5      	str	r5, [r4, #8]
 80046aa:	6065      	str	r5, [r4, #4]
 80046ac:	6125      	str	r5, [r4, #16]
 80046ae:	6165      	str	r5, [r4, #20]
 80046b0:	61a5      	str	r5, [r4, #24]
 80046b2:	2208      	movs	r2, #8
 80046b4:	4629      	mov	r1, r5
 80046b6:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80046ba:	f7ff fd51 	bl	8004160 <memset>
 80046be:	6365      	str	r5, [r4, #52]	; 0x34
 80046c0:	63a5      	str	r5, [r4, #56]	; 0x38
 80046c2:	64a5      	str	r5, [r4, #72]	; 0x48
 80046c4:	64e5      	str	r5, [r4, #76]	; 0x4c
 80046c6:	e7e6      	b.n	8004696 <__sfp+0x42>
 80046c8:	0800511c 	.word	0x0800511c

080046cc <_fwalk_reent>:
 80046cc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80046d0:	4680      	mov	r8, r0
 80046d2:	4689      	mov	r9, r1
 80046d4:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80046d8:	2600      	movs	r6, #0
 80046da:	b914      	cbnz	r4, 80046e2 <_fwalk_reent+0x16>
 80046dc:	4630      	mov	r0, r6
 80046de:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80046e2:	68a5      	ldr	r5, [r4, #8]
 80046e4:	6867      	ldr	r7, [r4, #4]
 80046e6:	3f01      	subs	r7, #1
 80046e8:	d501      	bpl.n	80046ee <_fwalk_reent+0x22>
 80046ea:	6824      	ldr	r4, [r4, #0]
 80046ec:	e7f5      	b.n	80046da <_fwalk_reent+0xe>
 80046ee:	89ab      	ldrh	r3, [r5, #12]
 80046f0:	2b01      	cmp	r3, #1
 80046f2:	d907      	bls.n	8004704 <_fwalk_reent+0x38>
 80046f4:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80046f8:	3301      	adds	r3, #1
 80046fa:	d003      	beq.n	8004704 <_fwalk_reent+0x38>
 80046fc:	4629      	mov	r1, r5
 80046fe:	4640      	mov	r0, r8
 8004700:	47c8      	blx	r9
 8004702:	4306      	orrs	r6, r0
 8004704:	3568      	adds	r5, #104	; 0x68
 8004706:	e7ee      	b.n	80046e6 <_fwalk_reent+0x1a>

08004708 <__swhatbuf_r>:
 8004708:	b570      	push	{r4, r5, r6, lr}
 800470a:	460e      	mov	r6, r1
 800470c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004710:	2900      	cmp	r1, #0
 8004712:	b090      	sub	sp, #64	; 0x40
 8004714:	4614      	mov	r4, r2
 8004716:	461d      	mov	r5, r3
 8004718:	da07      	bge.n	800472a <__swhatbuf_r+0x22>
 800471a:	2300      	movs	r3, #0
 800471c:	602b      	str	r3, [r5, #0]
 800471e:	89b3      	ldrh	r3, [r6, #12]
 8004720:	061a      	lsls	r2, r3, #24
 8004722:	d410      	bmi.n	8004746 <__swhatbuf_r+0x3e>
 8004724:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004728:	e00e      	b.n	8004748 <__swhatbuf_r+0x40>
 800472a:	aa01      	add	r2, sp, #4
 800472c:	f000 fc7e 	bl	800502c <_fstat_r>
 8004730:	2800      	cmp	r0, #0
 8004732:	dbf2      	blt.n	800471a <__swhatbuf_r+0x12>
 8004734:	9a02      	ldr	r2, [sp, #8]
 8004736:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800473a:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800473e:	425a      	negs	r2, r3
 8004740:	415a      	adcs	r2, r3
 8004742:	602a      	str	r2, [r5, #0]
 8004744:	e7ee      	b.n	8004724 <__swhatbuf_r+0x1c>
 8004746:	2340      	movs	r3, #64	; 0x40
 8004748:	2000      	movs	r0, #0
 800474a:	6023      	str	r3, [r4, #0]
 800474c:	b010      	add	sp, #64	; 0x40
 800474e:	bd70      	pop	{r4, r5, r6, pc}

08004750 <__smakebuf_r>:
 8004750:	898b      	ldrh	r3, [r1, #12]
 8004752:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8004754:	079d      	lsls	r5, r3, #30
 8004756:	4606      	mov	r6, r0
 8004758:	460c      	mov	r4, r1
 800475a:	d507      	bpl.n	800476c <__smakebuf_r+0x1c>
 800475c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8004760:	6023      	str	r3, [r4, #0]
 8004762:	6123      	str	r3, [r4, #16]
 8004764:	2301      	movs	r3, #1
 8004766:	6163      	str	r3, [r4, #20]
 8004768:	b002      	add	sp, #8
 800476a:	bd70      	pop	{r4, r5, r6, pc}
 800476c:	ab01      	add	r3, sp, #4
 800476e:	466a      	mov	r2, sp
 8004770:	f7ff ffca 	bl	8004708 <__swhatbuf_r>
 8004774:	9900      	ldr	r1, [sp, #0]
 8004776:	4605      	mov	r5, r0
 8004778:	4630      	mov	r0, r6
 800477a:	f000 f877 	bl	800486c <_malloc_r>
 800477e:	b948      	cbnz	r0, 8004794 <__smakebuf_r+0x44>
 8004780:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004784:	059a      	lsls	r2, r3, #22
 8004786:	d4ef      	bmi.n	8004768 <__smakebuf_r+0x18>
 8004788:	f023 0303 	bic.w	r3, r3, #3
 800478c:	f043 0302 	orr.w	r3, r3, #2
 8004790:	81a3      	strh	r3, [r4, #12]
 8004792:	e7e3      	b.n	800475c <__smakebuf_r+0xc>
 8004794:	4b0d      	ldr	r3, [pc, #52]	; (80047cc <__smakebuf_r+0x7c>)
 8004796:	62b3      	str	r3, [r6, #40]	; 0x28
 8004798:	89a3      	ldrh	r3, [r4, #12]
 800479a:	6020      	str	r0, [r4, #0]
 800479c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80047a0:	81a3      	strh	r3, [r4, #12]
 80047a2:	9b00      	ldr	r3, [sp, #0]
 80047a4:	6163      	str	r3, [r4, #20]
 80047a6:	9b01      	ldr	r3, [sp, #4]
 80047a8:	6120      	str	r0, [r4, #16]
 80047aa:	b15b      	cbz	r3, 80047c4 <__smakebuf_r+0x74>
 80047ac:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80047b0:	4630      	mov	r0, r6
 80047b2:	f000 fc4d 	bl	8005050 <_isatty_r>
 80047b6:	b128      	cbz	r0, 80047c4 <__smakebuf_r+0x74>
 80047b8:	89a3      	ldrh	r3, [r4, #12]
 80047ba:	f023 0303 	bic.w	r3, r3, #3
 80047be:	f043 0301 	orr.w	r3, r3, #1
 80047c2:	81a3      	strh	r3, [r4, #12]
 80047c4:	89a3      	ldrh	r3, [r4, #12]
 80047c6:	431d      	orrs	r5, r3
 80047c8:	81a5      	strh	r5, [r4, #12]
 80047ca:	e7cd      	b.n	8004768 <__smakebuf_r+0x18>
 80047cc:	08004575 	.word	0x08004575

080047d0 <_free_r>:
 80047d0:	b538      	push	{r3, r4, r5, lr}
 80047d2:	4605      	mov	r5, r0
 80047d4:	2900      	cmp	r1, #0
 80047d6:	d045      	beq.n	8004864 <_free_r+0x94>
 80047d8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80047dc:	1f0c      	subs	r4, r1, #4
 80047de:	2b00      	cmp	r3, #0
 80047e0:	bfb8      	it	lt
 80047e2:	18e4      	addlt	r4, r4, r3
 80047e4:	f000 fc56 	bl	8005094 <__malloc_lock>
 80047e8:	4a1f      	ldr	r2, [pc, #124]	; (8004868 <_free_r+0x98>)
 80047ea:	6813      	ldr	r3, [r2, #0]
 80047ec:	4610      	mov	r0, r2
 80047ee:	b933      	cbnz	r3, 80047fe <_free_r+0x2e>
 80047f0:	6063      	str	r3, [r4, #4]
 80047f2:	6014      	str	r4, [r2, #0]
 80047f4:	4628      	mov	r0, r5
 80047f6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80047fa:	f000 bc4c 	b.w	8005096 <__malloc_unlock>
 80047fe:	42a3      	cmp	r3, r4
 8004800:	d90c      	bls.n	800481c <_free_r+0x4c>
 8004802:	6821      	ldr	r1, [r4, #0]
 8004804:	1862      	adds	r2, r4, r1
 8004806:	4293      	cmp	r3, r2
 8004808:	bf04      	itt	eq
 800480a:	681a      	ldreq	r2, [r3, #0]
 800480c:	685b      	ldreq	r3, [r3, #4]
 800480e:	6063      	str	r3, [r4, #4]
 8004810:	bf04      	itt	eq
 8004812:	1852      	addeq	r2, r2, r1
 8004814:	6022      	streq	r2, [r4, #0]
 8004816:	6004      	str	r4, [r0, #0]
 8004818:	e7ec      	b.n	80047f4 <_free_r+0x24>
 800481a:	4613      	mov	r3, r2
 800481c:	685a      	ldr	r2, [r3, #4]
 800481e:	b10a      	cbz	r2, 8004824 <_free_r+0x54>
 8004820:	42a2      	cmp	r2, r4
 8004822:	d9fa      	bls.n	800481a <_free_r+0x4a>
 8004824:	6819      	ldr	r1, [r3, #0]
 8004826:	1858      	adds	r0, r3, r1
 8004828:	42a0      	cmp	r0, r4
 800482a:	d10b      	bne.n	8004844 <_free_r+0x74>
 800482c:	6820      	ldr	r0, [r4, #0]
 800482e:	4401      	add	r1, r0
 8004830:	1858      	adds	r0, r3, r1
 8004832:	4282      	cmp	r2, r0
 8004834:	6019      	str	r1, [r3, #0]
 8004836:	d1dd      	bne.n	80047f4 <_free_r+0x24>
 8004838:	6810      	ldr	r0, [r2, #0]
 800483a:	6852      	ldr	r2, [r2, #4]
 800483c:	605a      	str	r2, [r3, #4]
 800483e:	4401      	add	r1, r0
 8004840:	6019      	str	r1, [r3, #0]
 8004842:	e7d7      	b.n	80047f4 <_free_r+0x24>
 8004844:	d902      	bls.n	800484c <_free_r+0x7c>
 8004846:	230c      	movs	r3, #12
 8004848:	602b      	str	r3, [r5, #0]
 800484a:	e7d3      	b.n	80047f4 <_free_r+0x24>
 800484c:	6820      	ldr	r0, [r4, #0]
 800484e:	1821      	adds	r1, r4, r0
 8004850:	428a      	cmp	r2, r1
 8004852:	bf04      	itt	eq
 8004854:	6811      	ldreq	r1, [r2, #0]
 8004856:	6852      	ldreq	r2, [r2, #4]
 8004858:	6062      	str	r2, [r4, #4]
 800485a:	bf04      	itt	eq
 800485c:	1809      	addeq	r1, r1, r0
 800485e:	6021      	streq	r1, [r4, #0]
 8004860:	605c      	str	r4, [r3, #4]
 8004862:	e7c7      	b.n	80047f4 <_free_r+0x24>
 8004864:	bd38      	pop	{r3, r4, r5, pc}
 8004866:	bf00      	nop
 8004868:	20000090 	.word	0x20000090

0800486c <_malloc_r>:
 800486c:	b570      	push	{r4, r5, r6, lr}
 800486e:	1ccd      	adds	r5, r1, #3
 8004870:	f025 0503 	bic.w	r5, r5, #3
 8004874:	3508      	adds	r5, #8
 8004876:	2d0c      	cmp	r5, #12
 8004878:	bf38      	it	cc
 800487a:	250c      	movcc	r5, #12
 800487c:	2d00      	cmp	r5, #0
 800487e:	4606      	mov	r6, r0
 8004880:	db01      	blt.n	8004886 <_malloc_r+0x1a>
 8004882:	42a9      	cmp	r1, r5
 8004884:	d903      	bls.n	800488e <_malloc_r+0x22>
 8004886:	230c      	movs	r3, #12
 8004888:	6033      	str	r3, [r6, #0]
 800488a:	2000      	movs	r0, #0
 800488c:	bd70      	pop	{r4, r5, r6, pc}
 800488e:	f000 fc01 	bl	8005094 <__malloc_lock>
 8004892:	4a23      	ldr	r2, [pc, #140]	; (8004920 <_malloc_r+0xb4>)
 8004894:	6814      	ldr	r4, [r2, #0]
 8004896:	4621      	mov	r1, r4
 8004898:	b991      	cbnz	r1, 80048c0 <_malloc_r+0x54>
 800489a:	4c22      	ldr	r4, [pc, #136]	; (8004924 <_malloc_r+0xb8>)
 800489c:	6823      	ldr	r3, [r4, #0]
 800489e:	b91b      	cbnz	r3, 80048a8 <_malloc_r+0x3c>
 80048a0:	4630      	mov	r0, r6
 80048a2:	f000 fb4d 	bl	8004f40 <_sbrk_r>
 80048a6:	6020      	str	r0, [r4, #0]
 80048a8:	4629      	mov	r1, r5
 80048aa:	4630      	mov	r0, r6
 80048ac:	f000 fb48 	bl	8004f40 <_sbrk_r>
 80048b0:	1c43      	adds	r3, r0, #1
 80048b2:	d126      	bne.n	8004902 <_malloc_r+0x96>
 80048b4:	230c      	movs	r3, #12
 80048b6:	6033      	str	r3, [r6, #0]
 80048b8:	4630      	mov	r0, r6
 80048ba:	f000 fbec 	bl	8005096 <__malloc_unlock>
 80048be:	e7e4      	b.n	800488a <_malloc_r+0x1e>
 80048c0:	680b      	ldr	r3, [r1, #0]
 80048c2:	1b5b      	subs	r3, r3, r5
 80048c4:	d41a      	bmi.n	80048fc <_malloc_r+0x90>
 80048c6:	2b0b      	cmp	r3, #11
 80048c8:	d90f      	bls.n	80048ea <_malloc_r+0x7e>
 80048ca:	600b      	str	r3, [r1, #0]
 80048cc:	50cd      	str	r5, [r1, r3]
 80048ce:	18cc      	adds	r4, r1, r3
 80048d0:	4630      	mov	r0, r6
 80048d2:	f000 fbe0 	bl	8005096 <__malloc_unlock>
 80048d6:	f104 000b 	add.w	r0, r4, #11
 80048da:	1d23      	adds	r3, r4, #4
 80048dc:	f020 0007 	bic.w	r0, r0, #7
 80048e0:	1ac3      	subs	r3, r0, r3
 80048e2:	d01b      	beq.n	800491c <_malloc_r+0xb0>
 80048e4:	425a      	negs	r2, r3
 80048e6:	50e2      	str	r2, [r4, r3]
 80048e8:	bd70      	pop	{r4, r5, r6, pc}
 80048ea:	428c      	cmp	r4, r1
 80048ec:	bf0d      	iteet	eq
 80048ee:	6863      	ldreq	r3, [r4, #4]
 80048f0:	684b      	ldrne	r3, [r1, #4]
 80048f2:	6063      	strne	r3, [r4, #4]
 80048f4:	6013      	streq	r3, [r2, #0]
 80048f6:	bf18      	it	ne
 80048f8:	460c      	movne	r4, r1
 80048fa:	e7e9      	b.n	80048d0 <_malloc_r+0x64>
 80048fc:	460c      	mov	r4, r1
 80048fe:	6849      	ldr	r1, [r1, #4]
 8004900:	e7ca      	b.n	8004898 <_malloc_r+0x2c>
 8004902:	1cc4      	adds	r4, r0, #3
 8004904:	f024 0403 	bic.w	r4, r4, #3
 8004908:	42a0      	cmp	r0, r4
 800490a:	d005      	beq.n	8004918 <_malloc_r+0xac>
 800490c:	1a21      	subs	r1, r4, r0
 800490e:	4630      	mov	r0, r6
 8004910:	f000 fb16 	bl	8004f40 <_sbrk_r>
 8004914:	3001      	adds	r0, #1
 8004916:	d0cd      	beq.n	80048b4 <_malloc_r+0x48>
 8004918:	6025      	str	r5, [r4, #0]
 800491a:	e7d9      	b.n	80048d0 <_malloc_r+0x64>
 800491c:	bd70      	pop	{r4, r5, r6, pc}
 800491e:	bf00      	nop
 8004920:	20000090 	.word	0x20000090
 8004924:	20000094 	.word	0x20000094

08004928 <__sfputc_r>:
 8004928:	6893      	ldr	r3, [r2, #8]
 800492a:	3b01      	subs	r3, #1
 800492c:	2b00      	cmp	r3, #0
 800492e:	b410      	push	{r4}
 8004930:	6093      	str	r3, [r2, #8]
 8004932:	da09      	bge.n	8004948 <__sfputc_r+0x20>
 8004934:	6994      	ldr	r4, [r2, #24]
 8004936:	42a3      	cmp	r3, r4
 8004938:	db02      	blt.n	8004940 <__sfputc_r+0x18>
 800493a:	b2cb      	uxtb	r3, r1
 800493c:	2b0a      	cmp	r3, #10
 800493e:	d103      	bne.n	8004948 <__sfputc_r+0x20>
 8004940:	f85d 4b04 	ldr.w	r4, [sp], #4
 8004944:	f7ff bca4 	b.w	8004290 <__swbuf_r>
 8004948:	6813      	ldr	r3, [r2, #0]
 800494a:	1c58      	adds	r0, r3, #1
 800494c:	6010      	str	r0, [r2, #0]
 800494e:	7019      	strb	r1, [r3, #0]
 8004950:	b2c8      	uxtb	r0, r1
 8004952:	f85d 4b04 	ldr.w	r4, [sp], #4
 8004956:	4770      	bx	lr

08004958 <__sfputs_r>:
 8004958:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800495a:	4606      	mov	r6, r0
 800495c:	460f      	mov	r7, r1
 800495e:	4614      	mov	r4, r2
 8004960:	18d5      	adds	r5, r2, r3
 8004962:	42ac      	cmp	r4, r5
 8004964:	d101      	bne.n	800496a <__sfputs_r+0x12>
 8004966:	2000      	movs	r0, #0
 8004968:	e007      	b.n	800497a <__sfputs_r+0x22>
 800496a:	463a      	mov	r2, r7
 800496c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004970:	4630      	mov	r0, r6
 8004972:	f7ff ffd9 	bl	8004928 <__sfputc_r>
 8004976:	1c43      	adds	r3, r0, #1
 8004978:	d1f3      	bne.n	8004962 <__sfputs_r+0xa>
 800497a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800497c <_vfiprintf_r>:
 800497c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004980:	b09d      	sub	sp, #116	; 0x74
 8004982:	460c      	mov	r4, r1
 8004984:	4617      	mov	r7, r2
 8004986:	9303      	str	r3, [sp, #12]
 8004988:	4606      	mov	r6, r0
 800498a:	b118      	cbz	r0, 8004994 <_vfiprintf_r+0x18>
 800498c:	6983      	ldr	r3, [r0, #24]
 800498e:	b90b      	cbnz	r3, 8004994 <_vfiprintf_r+0x18>
 8004990:	f7ff fe30 	bl	80045f4 <__sinit>
 8004994:	4b7c      	ldr	r3, [pc, #496]	; (8004b88 <_vfiprintf_r+0x20c>)
 8004996:	429c      	cmp	r4, r3
 8004998:	d157      	bne.n	8004a4a <_vfiprintf_r+0xce>
 800499a:	6874      	ldr	r4, [r6, #4]
 800499c:	89a3      	ldrh	r3, [r4, #12]
 800499e:	0718      	lsls	r0, r3, #28
 80049a0:	d55d      	bpl.n	8004a5e <_vfiprintf_r+0xe2>
 80049a2:	6923      	ldr	r3, [r4, #16]
 80049a4:	2b00      	cmp	r3, #0
 80049a6:	d05a      	beq.n	8004a5e <_vfiprintf_r+0xe2>
 80049a8:	2300      	movs	r3, #0
 80049aa:	9309      	str	r3, [sp, #36]	; 0x24
 80049ac:	2320      	movs	r3, #32
 80049ae:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80049b2:	2330      	movs	r3, #48	; 0x30
 80049b4:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80049b8:	f04f 0b01 	mov.w	fp, #1
 80049bc:	46b8      	mov	r8, r7
 80049be:	4645      	mov	r5, r8
 80049c0:	f815 3b01 	ldrb.w	r3, [r5], #1
 80049c4:	2b00      	cmp	r3, #0
 80049c6:	d155      	bne.n	8004a74 <_vfiprintf_r+0xf8>
 80049c8:	ebb8 0a07 	subs.w	sl, r8, r7
 80049cc:	d00b      	beq.n	80049e6 <_vfiprintf_r+0x6a>
 80049ce:	4653      	mov	r3, sl
 80049d0:	463a      	mov	r2, r7
 80049d2:	4621      	mov	r1, r4
 80049d4:	4630      	mov	r0, r6
 80049d6:	f7ff ffbf 	bl	8004958 <__sfputs_r>
 80049da:	3001      	adds	r0, #1
 80049dc:	f000 80c4 	beq.w	8004b68 <_vfiprintf_r+0x1ec>
 80049e0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80049e2:	4453      	add	r3, sl
 80049e4:	9309      	str	r3, [sp, #36]	; 0x24
 80049e6:	f898 3000 	ldrb.w	r3, [r8]
 80049ea:	2b00      	cmp	r3, #0
 80049ec:	f000 80bc 	beq.w	8004b68 <_vfiprintf_r+0x1ec>
 80049f0:	2300      	movs	r3, #0
 80049f2:	f04f 32ff 	mov.w	r2, #4294967295
 80049f6:	9304      	str	r3, [sp, #16]
 80049f8:	9307      	str	r3, [sp, #28]
 80049fa:	9205      	str	r2, [sp, #20]
 80049fc:	9306      	str	r3, [sp, #24]
 80049fe:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8004a02:	931a      	str	r3, [sp, #104]	; 0x68
 8004a04:	2205      	movs	r2, #5
 8004a06:	7829      	ldrb	r1, [r5, #0]
 8004a08:	4860      	ldr	r0, [pc, #384]	; (8004b8c <_vfiprintf_r+0x210>)
 8004a0a:	f7fb fbe9 	bl	80001e0 <memchr>
 8004a0e:	f105 0801 	add.w	r8, r5, #1
 8004a12:	9b04      	ldr	r3, [sp, #16]
 8004a14:	2800      	cmp	r0, #0
 8004a16:	d131      	bne.n	8004a7c <_vfiprintf_r+0x100>
 8004a18:	06d9      	lsls	r1, r3, #27
 8004a1a:	bf44      	itt	mi
 8004a1c:	2220      	movmi	r2, #32
 8004a1e:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8004a22:	071a      	lsls	r2, r3, #28
 8004a24:	bf44      	itt	mi
 8004a26:	222b      	movmi	r2, #43	; 0x2b
 8004a28:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8004a2c:	782a      	ldrb	r2, [r5, #0]
 8004a2e:	2a2a      	cmp	r2, #42	; 0x2a
 8004a30:	d02c      	beq.n	8004a8c <_vfiprintf_r+0x110>
 8004a32:	9a07      	ldr	r2, [sp, #28]
 8004a34:	2100      	movs	r1, #0
 8004a36:	200a      	movs	r0, #10
 8004a38:	46a8      	mov	r8, r5
 8004a3a:	3501      	adds	r5, #1
 8004a3c:	f898 3000 	ldrb.w	r3, [r8]
 8004a40:	3b30      	subs	r3, #48	; 0x30
 8004a42:	2b09      	cmp	r3, #9
 8004a44:	d96d      	bls.n	8004b22 <_vfiprintf_r+0x1a6>
 8004a46:	b371      	cbz	r1, 8004aa6 <_vfiprintf_r+0x12a>
 8004a48:	e026      	b.n	8004a98 <_vfiprintf_r+0x11c>
 8004a4a:	4b51      	ldr	r3, [pc, #324]	; (8004b90 <_vfiprintf_r+0x214>)
 8004a4c:	429c      	cmp	r4, r3
 8004a4e:	d101      	bne.n	8004a54 <_vfiprintf_r+0xd8>
 8004a50:	68b4      	ldr	r4, [r6, #8]
 8004a52:	e7a3      	b.n	800499c <_vfiprintf_r+0x20>
 8004a54:	4b4f      	ldr	r3, [pc, #316]	; (8004b94 <_vfiprintf_r+0x218>)
 8004a56:	429c      	cmp	r4, r3
 8004a58:	bf08      	it	eq
 8004a5a:	68f4      	ldreq	r4, [r6, #12]
 8004a5c:	e79e      	b.n	800499c <_vfiprintf_r+0x20>
 8004a5e:	4621      	mov	r1, r4
 8004a60:	4630      	mov	r0, r6
 8004a62:	f7ff fc67 	bl	8004334 <__swsetup_r>
 8004a66:	2800      	cmp	r0, #0
 8004a68:	d09e      	beq.n	80049a8 <_vfiprintf_r+0x2c>
 8004a6a:	f04f 30ff 	mov.w	r0, #4294967295
 8004a6e:	b01d      	add	sp, #116	; 0x74
 8004a70:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004a74:	2b25      	cmp	r3, #37	; 0x25
 8004a76:	d0a7      	beq.n	80049c8 <_vfiprintf_r+0x4c>
 8004a78:	46a8      	mov	r8, r5
 8004a7a:	e7a0      	b.n	80049be <_vfiprintf_r+0x42>
 8004a7c:	4a43      	ldr	r2, [pc, #268]	; (8004b8c <_vfiprintf_r+0x210>)
 8004a7e:	1a80      	subs	r0, r0, r2
 8004a80:	fa0b f000 	lsl.w	r0, fp, r0
 8004a84:	4318      	orrs	r0, r3
 8004a86:	9004      	str	r0, [sp, #16]
 8004a88:	4645      	mov	r5, r8
 8004a8a:	e7bb      	b.n	8004a04 <_vfiprintf_r+0x88>
 8004a8c:	9a03      	ldr	r2, [sp, #12]
 8004a8e:	1d11      	adds	r1, r2, #4
 8004a90:	6812      	ldr	r2, [r2, #0]
 8004a92:	9103      	str	r1, [sp, #12]
 8004a94:	2a00      	cmp	r2, #0
 8004a96:	db01      	blt.n	8004a9c <_vfiprintf_r+0x120>
 8004a98:	9207      	str	r2, [sp, #28]
 8004a9a:	e004      	b.n	8004aa6 <_vfiprintf_r+0x12a>
 8004a9c:	4252      	negs	r2, r2
 8004a9e:	f043 0302 	orr.w	r3, r3, #2
 8004aa2:	9207      	str	r2, [sp, #28]
 8004aa4:	9304      	str	r3, [sp, #16]
 8004aa6:	f898 3000 	ldrb.w	r3, [r8]
 8004aaa:	2b2e      	cmp	r3, #46	; 0x2e
 8004aac:	d110      	bne.n	8004ad0 <_vfiprintf_r+0x154>
 8004aae:	f898 3001 	ldrb.w	r3, [r8, #1]
 8004ab2:	2b2a      	cmp	r3, #42	; 0x2a
 8004ab4:	f108 0101 	add.w	r1, r8, #1
 8004ab8:	d137      	bne.n	8004b2a <_vfiprintf_r+0x1ae>
 8004aba:	9b03      	ldr	r3, [sp, #12]
 8004abc:	1d1a      	adds	r2, r3, #4
 8004abe:	681b      	ldr	r3, [r3, #0]
 8004ac0:	9203      	str	r2, [sp, #12]
 8004ac2:	2b00      	cmp	r3, #0
 8004ac4:	bfb8      	it	lt
 8004ac6:	f04f 33ff 	movlt.w	r3, #4294967295
 8004aca:	f108 0802 	add.w	r8, r8, #2
 8004ace:	9305      	str	r3, [sp, #20]
 8004ad0:	4d31      	ldr	r5, [pc, #196]	; (8004b98 <_vfiprintf_r+0x21c>)
 8004ad2:	f898 1000 	ldrb.w	r1, [r8]
 8004ad6:	2203      	movs	r2, #3
 8004ad8:	4628      	mov	r0, r5
 8004ada:	f7fb fb81 	bl	80001e0 <memchr>
 8004ade:	b140      	cbz	r0, 8004af2 <_vfiprintf_r+0x176>
 8004ae0:	2340      	movs	r3, #64	; 0x40
 8004ae2:	1b40      	subs	r0, r0, r5
 8004ae4:	fa03 f000 	lsl.w	r0, r3, r0
 8004ae8:	9b04      	ldr	r3, [sp, #16]
 8004aea:	4303      	orrs	r3, r0
 8004aec:	9304      	str	r3, [sp, #16]
 8004aee:	f108 0801 	add.w	r8, r8, #1
 8004af2:	f898 1000 	ldrb.w	r1, [r8]
 8004af6:	4829      	ldr	r0, [pc, #164]	; (8004b9c <_vfiprintf_r+0x220>)
 8004af8:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8004afc:	2206      	movs	r2, #6
 8004afe:	f108 0701 	add.w	r7, r8, #1
 8004b02:	f7fb fb6d 	bl	80001e0 <memchr>
 8004b06:	2800      	cmp	r0, #0
 8004b08:	d034      	beq.n	8004b74 <_vfiprintf_r+0x1f8>
 8004b0a:	4b25      	ldr	r3, [pc, #148]	; (8004ba0 <_vfiprintf_r+0x224>)
 8004b0c:	bb03      	cbnz	r3, 8004b50 <_vfiprintf_r+0x1d4>
 8004b0e:	9b03      	ldr	r3, [sp, #12]
 8004b10:	3307      	adds	r3, #7
 8004b12:	f023 0307 	bic.w	r3, r3, #7
 8004b16:	3308      	adds	r3, #8
 8004b18:	9303      	str	r3, [sp, #12]
 8004b1a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004b1c:	444b      	add	r3, r9
 8004b1e:	9309      	str	r3, [sp, #36]	; 0x24
 8004b20:	e74c      	b.n	80049bc <_vfiprintf_r+0x40>
 8004b22:	fb00 3202 	mla	r2, r0, r2, r3
 8004b26:	2101      	movs	r1, #1
 8004b28:	e786      	b.n	8004a38 <_vfiprintf_r+0xbc>
 8004b2a:	2300      	movs	r3, #0
 8004b2c:	9305      	str	r3, [sp, #20]
 8004b2e:	4618      	mov	r0, r3
 8004b30:	250a      	movs	r5, #10
 8004b32:	4688      	mov	r8, r1
 8004b34:	3101      	adds	r1, #1
 8004b36:	f898 2000 	ldrb.w	r2, [r8]
 8004b3a:	3a30      	subs	r2, #48	; 0x30
 8004b3c:	2a09      	cmp	r2, #9
 8004b3e:	d903      	bls.n	8004b48 <_vfiprintf_r+0x1cc>
 8004b40:	2b00      	cmp	r3, #0
 8004b42:	d0c5      	beq.n	8004ad0 <_vfiprintf_r+0x154>
 8004b44:	9005      	str	r0, [sp, #20]
 8004b46:	e7c3      	b.n	8004ad0 <_vfiprintf_r+0x154>
 8004b48:	fb05 2000 	mla	r0, r5, r0, r2
 8004b4c:	2301      	movs	r3, #1
 8004b4e:	e7f0      	b.n	8004b32 <_vfiprintf_r+0x1b6>
 8004b50:	ab03      	add	r3, sp, #12
 8004b52:	9300      	str	r3, [sp, #0]
 8004b54:	4622      	mov	r2, r4
 8004b56:	4b13      	ldr	r3, [pc, #76]	; (8004ba4 <_vfiprintf_r+0x228>)
 8004b58:	a904      	add	r1, sp, #16
 8004b5a:	4630      	mov	r0, r6
 8004b5c:	f3af 8000 	nop.w
 8004b60:	f1b0 3fff 	cmp.w	r0, #4294967295
 8004b64:	4681      	mov	r9, r0
 8004b66:	d1d8      	bne.n	8004b1a <_vfiprintf_r+0x19e>
 8004b68:	89a3      	ldrh	r3, [r4, #12]
 8004b6a:	065b      	lsls	r3, r3, #25
 8004b6c:	f53f af7d 	bmi.w	8004a6a <_vfiprintf_r+0xee>
 8004b70:	9809      	ldr	r0, [sp, #36]	; 0x24
 8004b72:	e77c      	b.n	8004a6e <_vfiprintf_r+0xf2>
 8004b74:	ab03      	add	r3, sp, #12
 8004b76:	9300      	str	r3, [sp, #0]
 8004b78:	4622      	mov	r2, r4
 8004b7a:	4b0a      	ldr	r3, [pc, #40]	; (8004ba4 <_vfiprintf_r+0x228>)
 8004b7c:	a904      	add	r1, sp, #16
 8004b7e:	4630      	mov	r0, r6
 8004b80:	f000 f888 	bl	8004c94 <_printf_i>
 8004b84:	e7ec      	b.n	8004b60 <_vfiprintf_r+0x1e4>
 8004b86:	bf00      	nop
 8004b88:	08005140 	.word	0x08005140
 8004b8c:	08005180 	.word	0x08005180
 8004b90:	08005160 	.word	0x08005160
 8004b94:	08005120 	.word	0x08005120
 8004b98:	08005186 	.word	0x08005186
 8004b9c:	0800518a 	.word	0x0800518a
 8004ba0:	00000000 	.word	0x00000000
 8004ba4:	08004959 	.word	0x08004959

08004ba8 <_printf_common>:
 8004ba8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004bac:	4691      	mov	r9, r2
 8004bae:	461f      	mov	r7, r3
 8004bb0:	688a      	ldr	r2, [r1, #8]
 8004bb2:	690b      	ldr	r3, [r1, #16]
 8004bb4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8004bb8:	4293      	cmp	r3, r2
 8004bba:	bfb8      	it	lt
 8004bbc:	4613      	movlt	r3, r2
 8004bbe:	f8c9 3000 	str.w	r3, [r9]
 8004bc2:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8004bc6:	4606      	mov	r6, r0
 8004bc8:	460c      	mov	r4, r1
 8004bca:	b112      	cbz	r2, 8004bd2 <_printf_common+0x2a>
 8004bcc:	3301      	adds	r3, #1
 8004bce:	f8c9 3000 	str.w	r3, [r9]
 8004bd2:	6823      	ldr	r3, [r4, #0]
 8004bd4:	0699      	lsls	r1, r3, #26
 8004bd6:	bf42      	ittt	mi
 8004bd8:	f8d9 3000 	ldrmi.w	r3, [r9]
 8004bdc:	3302      	addmi	r3, #2
 8004bde:	f8c9 3000 	strmi.w	r3, [r9]
 8004be2:	6825      	ldr	r5, [r4, #0]
 8004be4:	f015 0506 	ands.w	r5, r5, #6
 8004be8:	d107      	bne.n	8004bfa <_printf_common+0x52>
 8004bea:	f104 0a19 	add.w	sl, r4, #25
 8004bee:	68e3      	ldr	r3, [r4, #12]
 8004bf0:	f8d9 2000 	ldr.w	r2, [r9]
 8004bf4:	1a9b      	subs	r3, r3, r2
 8004bf6:	429d      	cmp	r5, r3
 8004bf8:	db29      	blt.n	8004c4e <_printf_common+0xa6>
 8004bfa:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8004bfe:	6822      	ldr	r2, [r4, #0]
 8004c00:	3300      	adds	r3, #0
 8004c02:	bf18      	it	ne
 8004c04:	2301      	movne	r3, #1
 8004c06:	0692      	lsls	r2, r2, #26
 8004c08:	d42e      	bmi.n	8004c68 <_printf_common+0xc0>
 8004c0a:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004c0e:	4639      	mov	r1, r7
 8004c10:	4630      	mov	r0, r6
 8004c12:	47c0      	blx	r8
 8004c14:	3001      	adds	r0, #1
 8004c16:	d021      	beq.n	8004c5c <_printf_common+0xb4>
 8004c18:	6823      	ldr	r3, [r4, #0]
 8004c1a:	68e5      	ldr	r5, [r4, #12]
 8004c1c:	f8d9 2000 	ldr.w	r2, [r9]
 8004c20:	f003 0306 	and.w	r3, r3, #6
 8004c24:	2b04      	cmp	r3, #4
 8004c26:	bf08      	it	eq
 8004c28:	1aad      	subeq	r5, r5, r2
 8004c2a:	68a3      	ldr	r3, [r4, #8]
 8004c2c:	6922      	ldr	r2, [r4, #16]
 8004c2e:	bf0c      	ite	eq
 8004c30:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004c34:	2500      	movne	r5, #0
 8004c36:	4293      	cmp	r3, r2
 8004c38:	bfc4      	itt	gt
 8004c3a:	1a9b      	subgt	r3, r3, r2
 8004c3c:	18ed      	addgt	r5, r5, r3
 8004c3e:	f04f 0900 	mov.w	r9, #0
 8004c42:	341a      	adds	r4, #26
 8004c44:	454d      	cmp	r5, r9
 8004c46:	d11b      	bne.n	8004c80 <_printf_common+0xd8>
 8004c48:	2000      	movs	r0, #0
 8004c4a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004c4e:	2301      	movs	r3, #1
 8004c50:	4652      	mov	r2, sl
 8004c52:	4639      	mov	r1, r7
 8004c54:	4630      	mov	r0, r6
 8004c56:	47c0      	blx	r8
 8004c58:	3001      	adds	r0, #1
 8004c5a:	d103      	bne.n	8004c64 <_printf_common+0xbc>
 8004c5c:	f04f 30ff 	mov.w	r0, #4294967295
 8004c60:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004c64:	3501      	adds	r5, #1
 8004c66:	e7c2      	b.n	8004bee <_printf_common+0x46>
 8004c68:	18e1      	adds	r1, r4, r3
 8004c6a:	1c5a      	adds	r2, r3, #1
 8004c6c:	2030      	movs	r0, #48	; 0x30
 8004c6e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8004c72:	4422      	add	r2, r4
 8004c74:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8004c78:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8004c7c:	3302      	adds	r3, #2
 8004c7e:	e7c4      	b.n	8004c0a <_printf_common+0x62>
 8004c80:	2301      	movs	r3, #1
 8004c82:	4622      	mov	r2, r4
 8004c84:	4639      	mov	r1, r7
 8004c86:	4630      	mov	r0, r6
 8004c88:	47c0      	blx	r8
 8004c8a:	3001      	adds	r0, #1
 8004c8c:	d0e6      	beq.n	8004c5c <_printf_common+0xb4>
 8004c8e:	f109 0901 	add.w	r9, r9, #1
 8004c92:	e7d7      	b.n	8004c44 <_printf_common+0x9c>

08004c94 <_printf_i>:
 8004c94:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8004c98:	4617      	mov	r7, r2
 8004c9a:	7e0a      	ldrb	r2, [r1, #24]
 8004c9c:	b085      	sub	sp, #20
 8004c9e:	2a6e      	cmp	r2, #110	; 0x6e
 8004ca0:	4698      	mov	r8, r3
 8004ca2:	4606      	mov	r6, r0
 8004ca4:	460c      	mov	r4, r1
 8004ca6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8004ca8:	f101 0e43 	add.w	lr, r1, #67	; 0x43
 8004cac:	f000 80bc 	beq.w	8004e28 <_printf_i+0x194>
 8004cb0:	d81a      	bhi.n	8004ce8 <_printf_i+0x54>
 8004cb2:	2a63      	cmp	r2, #99	; 0x63
 8004cb4:	d02e      	beq.n	8004d14 <_printf_i+0x80>
 8004cb6:	d80a      	bhi.n	8004cce <_printf_i+0x3a>
 8004cb8:	2a00      	cmp	r2, #0
 8004cba:	f000 80c8 	beq.w	8004e4e <_printf_i+0x1ba>
 8004cbe:	2a58      	cmp	r2, #88	; 0x58
 8004cc0:	f000 808a 	beq.w	8004dd8 <_printf_i+0x144>
 8004cc4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004cc8:	f884 2042 	strb.w	r2, [r4, #66]	; 0x42
 8004ccc:	e02a      	b.n	8004d24 <_printf_i+0x90>
 8004cce:	2a64      	cmp	r2, #100	; 0x64
 8004cd0:	d001      	beq.n	8004cd6 <_printf_i+0x42>
 8004cd2:	2a69      	cmp	r2, #105	; 0x69
 8004cd4:	d1f6      	bne.n	8004cc4 <_printf_i+0x30>
 8004cd6:	6821      	ldr	r1, [r4, #0]
 8004cd8:	681a      	ldr	r2, [r3, #0]
 8004cda:	f011 0f80 	tst.w	r1, #128	; 0x80
 8004cde:	d023      	beq.n	8004d28 <_printf_i+0x94>
 8004ce0:	1d11      	adds	r1, r2, #4
 8004ce2:	6019      	str	r1, [r3, #0]
 8004ce4:	6813      	ldr	r3, [r2, #0]
 8004ce6:	e027      	b.n	8004d38 <_printf_i+0xa4>
 8004ce8:	2a73      	cmp	r2, #115	; 0x73
 8004cea:	f000 80b4 	beq.w	8004e56 <_printf_i+0x1c2>
 8004cee:	d808      	bhi.n	8004d02 <_printf_i+0x6e>
 8004cf0:	2a6f      	cmp	r2, #111	; 0x6f
 8004cf2:	d02a      	beq.n	8004d4a <_printf_i+0xb6>
 8004cf4:	2a70      	cmp	r2, #112	; 0x70
 8004cf6:	d1e5      	bne.n	8004cc4 <_printf_i+0x30>
 8004cf8:	680a      	ldr	r2, [r1, #0]
 8004cfa:	f042 0220 	orr.w	r2, r2, #32
 8004cfe:	600a      	str	r2, [r1, #0]
 8004d00:	e003      	b.n	8004d0a <_printf_i+0x76>
 8004d02:	2a75      	cmp	r2, #117	; 0x75
 8004d04:	d021      	beq.n	8004d4a <_printf_i+0xb6>
 8004d06:	2a78      	cmp	r2, #120	; 0x78
 8004d08:	d1dc      	bne.n	8004cc4 <_printf_i+0x30>
 8004d0a:	2278      	movs	r2, #120	; 0x78
 8004d0c:	f884 2045 	strb.w	r2, [r4, #69]	; 0x45
 8004d10:	496e      	ldr	r1, [pc, #440]	; (8004ecc <_printf_i+0x238>)
 8004d12:	e064      	b.n	8004dde <_printf_i+0x14a>
 8004d14:	681a      	ldr	r2, [r3, #0]
 8004d16:	f101 0542 	add.w	r5, r1, #66	; 0x42
 8004d1a:	1d11      	adds	r1, r2, #4
 8004d1c:	6019      	str	r1, [r3, #0]
 8004d1e:	6813      	ldr	r3, [r2, #0]
 8004d20:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004d24:	2301      	movs	r3, #1
 8004d26:	e0a3      	b.n	8004e70 <_printf_i+0x1dc>
 8004d28:	f011 0f40 	tst.w	r1, #64	; 0x40
 8004d2c:	f102 0104 	add.w	r1, r2, #4
 8004d30:	6019      	str	r1, [r3, #0]
 8004d32:	d0d7      	beq.n	8004ce4 <_printf_i+0x50>
 8004d34:	f9b2 3000 	ldrsh.w	r3, [r2]
 8004d38:	2b00      	cmp	r3, #0
 8004d3a:	da03      	bge.n	8004d44 <_printf_i+0xb0>
 8004d3c:	222d      	movs	r2, #45	; 0x2d
 8004d3e:	425b      	negs	r3, r3
 8004d40:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8004d44:	4962      	ldr	r1, [pc, #392]	; (8004ed0 <_printf_i+0x23c>)
 8004d46:	220a      	movs	r2, #10
 8004d48:	e017      	b.n	8004d7a <_printf_i+0xe6>
 8004d4a:	6820      	ldr	r0, [r4, #0]
 8004d4c:	6819      	ldr	r1, [r3, #0]
 8004d4e:	f010 0f80 	tst.w	r0, #128	; 0x80
 8004d52:	d003      	beq.n	8004d5c <_printf_i+0xc8>
 8004d54:	1d08      	adds	r0, r1, #4
 8004d56:	6018      	str	r0, [r3, #0]
 8004d58:	680b      	ldr	r3, [r1, #0]
 8004d5a:	e006      	b.n	8004d6a <_printf_i+0xd6>
 8004d5c:	f010 0f40 	tst.w	r0, #64	; 0x40
 8004d60:	f101 0004 	add.w	r0, r1, #4
 8004d64:	6018      	str	r0, [r3, #0]
 8004d66:	d0f7      	beq.n	8004d58 <_printf_i+0xc4>
 8004d68:	880b      	ldrh	r3, [r1, #0]
 8004d6a:	4959      	ldr	r1, [pc, #356]	; (8004ed0 <_printf_i+0x23c>)
 8004d6c:	2a6f      	cmp	r2, #111	; 0x6f
 8004d6e:	bf14      	ite	ne
 8004d70:	220a      	movne	r2, #10
 8004d72:	2208      	moveq	r2, #8
 8004d74:	2000      	movs	r0, #0
 8004d76:	f884 0043 	strb.w	r0, [r4, #67]	; 0x43
 8004d7a:	6865      	ldr	r5, [r4, #4]
 8004d7c:	60a5      	str	r5, [r4, #8]
 8004d7e:	2d00      	cmp	r5, #0
 8004d80:	f2c0 809c 	blt.w	8004ebc <_printf_i+0x228>
 8004d84:	6820      	ldr	r0, [r4, #0]
 8004d86:	f020 0004 	bic.w	r0, r0, #4
 8004d8a:	6020      	str	r0, [r4, #0]
 8004d8c:	2b00      	cmp	r3, #0
 8004d8e:	d13f      	bne.n	8004e10 <_printf_i+0x17c>
 8004d90:	2d00      	cmp	r5, #0
 8004d92:	f040 8095 	bne.w	8004ec0 <_printf_i+0x22c>
 8004d96:	4675      	mov	r5, lr
 8004d98:	2a08      	cmp	r2, #8
 8004d9a:	d10b      	bne.n	8004db4 <_printf_i+0x120>
 8004d9c:	6823      	ldr	r3, [r4, #0]
 8004d9e:	07da      	lsls	r2, r3, #31
 8004da0:	d508      	bpl.n	8004db4 <_printf_i+0x120>
 8004da2:	6923      	ldr	r3, [r4, #16]
 8004da4:	6862      	ldr	r2, [r4, #4]
 8004da6:	429a      	cmp	r2, r3
 8004da8:	bfde      	ittt	le
 8004daa:	2330      	movle	r3, #48	; 0x30
 8004dac:	f805 3c01 	strble.w	r3, [r5, #-1]
 8004db0:	f105 35ff 	addle.w	r5, r5, #4294967295
 8004db4:	ebae 0305 	sub.w	r3, lr, r5
 8004db8:	6123      	str	r3, [r4, #16]
 8004dba:	f8cd 8000 	str.w	r8, [sp]
 8004dbe:	463b      	mov	r3, r7
 8004dc0:	aa03      	add	r2, sp, #12
 8004dc2:	4621      	mov	r1, r4
 8004dc4:	4630      	mov	r0, r6
 8004dc6:	f7ff feef 	bl	8004ba8 <_printf_common>
 8004dca:	3001      	adds	r0, #1
 8004dcc:	d155      	bne.n	8004e7a <_printf_i+0x1e6>
 8004dce:	f04f 30ff 	mov.w	r0, #4294967295
 8004dd2:	b005      	add	sp, #20
 8004dd4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8004dd8:	f881 2045 	strb.w	r2, [r1, #69]	; 0x45
 8004ddc:	493c      	ldr	r1, [pc, #240]	; (8004ed0 <_printf_i+0x23c>)
 8004dde:	6822      	ldr	r2, [r4, #0]
 8004de0:	6818      	ldr	r0, [r3, #0]
 8004de2:	f012 0f80 	tst.w	r2, #128	; 0x80
 8004de6:	f100 0504 	add.w	r5, r0, #4
 8004dea:	601d      	str	r5, [r3, #0]
 8004dec:	d001      	beq.n	8004df2 <_printf_i+0x15e>
 8004dee:	6803      	ldr	r3, [r0, #0]
 8004df0:	e002      	b.n	8004df8 <_printf_i+0x164>
 8004df2:	0655      	lsls	r5, r2, #25
 8004df4:	d5fb      	bpl.n	8004dee <_printf_i+0x15a>
 8004df6:	8803      	ldrh	r3, [r0, #0]
 8004df8:	07d0      	lsls	r0, r2, #31
 8004dfa:	bf44      	itt	mi
 8004dfc:	f042 0220 	orrmi.w	r2, r2, #32
 8004e00:	6022      	strmi	r2, [r4, #0]
 8004e02:	b91b      	cbnz	r3, 8004e0c <_printf_i+0x178>
 8004e04:	6822      	ldr	r2, [r4, #0]
 8004e06:	f022 0220 	bic.w	r2, r2, #32
 8004e0a:	6022      	str	r2, [r4, #0]
 8004e0c:	2210      	movs	r2, #16
 8004e0e:	e7b1      	b.n	8004d74 <_printf_i+0xe0>
 8004e10:	4675      	mov	r5, lr
 8004e12:	fbb3 f0f2 	udiv	r0, r3, r2
 8004e16:	fb02 3310 	mls	r3, r2, r0, r3
 8004e1a:	5ccb      	ldrb	r3, [r1, r3]
 8004e1c:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8004e20:	4603      	mov	r3, r0
 8004e22:	2800      	cmp	r0, #0
 8004e24:	d1f5      	bne.n	8004e12 <_printf_i+0x17e>
 8004e26:	e7b7      	b.n	8004d98 <_printf_i+0x104>
 8004e28:	6808      	ldr	r0, [r1, #0]
 8004e2a:	681a      	ldr	r2, [r3, #0]
 8004e2c:	6949      	ldr	r1, [r1, #20]
 8004e2e:	f010 0f80 	tst.w	r0, #128	; 0x80
 8004e32:	d004      	beq.n	8004e3e <_printf_i+0x1aa>
 8004e34:	1d10      	adds	r0, r2, #4
 8004e36:	6018      	str	r0, [r3, #0]
 8004e38:	6813      	ldr	r3, [r2, #0]
 8004e3a:	6019      	str	r1, [r3, #0]
 8004e3c:	e007      	b.n	8004e4e <_printf_i+0x1ba>
 8004e3e:	f010 0f40 	tst.w	r0, #64	; 0x40
 8004e42:	f102 0004 	add.w	r0, r2, #4
 8004e46:	6018      	str	r0, [r3, #0]
 8004e48:	6813      	ldr	r3, [r2, #0]
 8004e4a:	d0f6      	beq.n	8004e3a <_printf_i+0x1a6>
 8004e4c:	8019      	strh	r1, [r3, #0]
 8004e4e:	2300      	movs	r3, #0
 8004e50:	6123      	str	r3, [r4, #16]
 8004e52:	4675      	mov	r5, lr
 8004e54:	e7b1      	b.n	8004dba <_printf_i+0x126>
 8004e56:	681a      	ldr	r2, [r3, #0]
 8004e58:	1d11      	adds	r1, r2, #4
 8004e5a:	6019      	str	r1, [r3, #0]
 8004e5c:	6815      	ldr	r5, [r2, #0]
 8004e5e:	6862      	ldr	r2, [r4, #4]
 8004e60:	2100      	movs	r1, #0
 8004e62:	4628      	mov	r0, r5
 8004e64:	f7fb f9bc 	bl	80001e0 <memchr>
 8004e68:	b108      	cbz	r0, 8004e6e <_printf_i+0x1da>
 8004e6a:	1b40      	subs	r0, r0, r5
 8004e6c:	6060      	str	r0, [r4, #4]
 8004e6e:	6863      	ldr	r3, [r4, #4]
 8004e70:	6123      	str	r3, [r4, #16]
 8004e72:	2300      	movs	r3, #0
 8004e74:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004e78:	e79f      	b.n	8004dba <_printf_i+0x126>
 8004e7a:	6923      	ldr	r3, [r4, #16]
 8004e7c:	462a      	mov	r2, r5
 8004e7e:	4639      	mov	r1, r7
 8004e80:	4630      	mov	r0, r6
 8004e82:	47c0      	blx	r8
 8004e84:	3001      	adds	r0, #1
 8004e86:	d0a2      	beq.n	8004dce <_printf_i+0x13a>
 8004e88:	6823      	ldr	r3, [r4, #0]
 8004e8a:	079b      	lsls	r3, r3, #30
 8004e8c:	d507      	bpl.n	8004e9e <_printf_i+0x20a>
 8004e8e:	2500      	movs	r5, #0
 8004e90:	f104 0919 	add.w	r9, r4, #25
 8004e94:	68e3      	ldr	r3, [r4, #12]
 8004e96:	9a03      	ldr	r2, [sp, #12]
 8004e98:	1a9b      	subs	r3, r3, r2
 8004e9a:	429d      	cmp	r5, r3
 8004e9c:	db05      	blt.n	8004eaa <_printf_i+0x216>
 8004e9e:	68e0      	ldr	r0, [r4, #12]
 8004ea0:	9b03      	ldr	r3, [sp, #12]
 8004ea2:	4298      	cmp	r0, r3
 8004ea4:	bfb8      	it	lt
 8004ea6:	4618      	movlt	r0, r3
 8004ea8:	e793      	b.n	8004dd2 <_printf_i+0x13e>
 8004eaa:	2301      	movs	r3, #1
 8004eac:	464a      	mov	r2, r9
 8004eae:	4639      	mov	r1, r7
 8004eb0:	4630      	mov	r0, r6
 8004eb2:	47c0      	blx	r8
 8004eb4:	3001      	adds	r0, #1
 8004eb6:	d08a      	beq.n	8004dce <_printf_i+0x13a>
 8004eb8:	3501      	adds	r5, #1
 8004eba:	e7eb      	b.n	8004e94 <_printf_i+0x200>
 8004ebc:	2b00      	cmp	r3, #0
 8004ebe:	d1a7      	bne.n	8004e10 <_printf_i+0x17c>
 8004ec0:	780b      	ldrb	r3, [r1, #0]
 8004ec2:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004ec6:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004eca:	e765      	b.n	8004d98 <_printf_i+0x104>
 8004ecc:	080051a2 	.word	0x080051a2
 8004ed0:	08005191 	.word	0x08005191

08004ed4 <_putc_r>:
 8004ed4:	b570      	push	{r4, r5, r6, lr}
 8004ed6:	460d      	mov	r5, r1
 8004ed8:	4614      	mov	r4, r2
 8004eda:	4606      	mov	r6, r0
 8004edc:	b118      	cbz	r0, 8004ee6 <_putc_r+0x12>
 8004ede:	6983      	ldr	r3, [r0, #24]
 8004ee0:	b90b      	cbnz	r3, 8004ee6 <_putc_r+0x12>
 8004ee2:	f7ff fb87 	bl	80045f4 <__sinit>
 8004ee6:	4b13      	ldr	r3, [pc, #76]	; (8004f34 <_putc_r+0x60>)
 8004ee8:	429c      	cmp	r4, r3
 8004eea:	d112      	bne.n	8004f12 <_putc_r+0x3e>
 8004eec:	6874      	ldr	r4, [r6, #4]
 8004eee:	68a3      	ldr	r3, [r4, #8]
 8004ef0:	3b01      	subs	r3, #1
 8004ef2:	2b00      	cmp	r3, #0
 8004ef4:	60a3      	str	r3, [r4, #8]
 8004ef6:	da16      	bge.n	8004f26 <_putc_r+0x52>
 8004ef8:	69a2      	ldr	r2, [r4, #24]
 8004efa:	4293      	cmp	r3, r2
 8004efc:	db02      	blt.n	8004f04 <_putc_r+0x30>
 8004efe:	b2eb      	uxtb	r3, r5
 8004f00:	2b0a      	cmp	r3, #10
 8004f02:	d110      	bne.n	8004f26 <_putc_r+0x52>
 8004f04:	4622      	mov	r2, r4
 8004f06:	4629      	mov	r1, r5
 8004f08:	4630      	mov	r0, r6
 8004f0a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8004f0e:	f7ff b9bf 	b.w	8004290 <__swbuf_r>
 8004f12:	4b09      	ldr	r3, [pc, #36]	; (8004f38 <_putc_r+0x64>)
 8004f14:	429c      	cmp	r4, r3
 8004f16:	d101      	bne.n	8004f1c <_putc_r+0x48>
 8004f18:	68b4      	ldr	r4, [r6, #8]
 8004f1a:	e7e8      	b.n	8004eee <_putc_r+0x1a>
 8004f1c:	4b07      	ldr	r3, [pc, #28]	; (8004f3c <_putc_r+0x68>)
 8004f1e:	429c      	cmp	r4, r3
 8004f20:	bf08      	it	eq
 8004f22:	68f4      	ldreq	r4, [r6, #12]
 8004f24:	e7e3      	b.n	8004eee <_putc_r+0x1a>
 8004f26:	6823      	ldr	r3, [r4, #0]
 8004f28:	1c5a      	adds	r2, r3, #1
 8004f2a:	6022      	str	r2, [r4, #0]
 8004f2c:	701d      	strb	r5, [r3, #0]
 8004f2e:	b2e8      	uxtb	r0, r5
 8004f30:	bd70      	pop	{r4, r5, r6, pc}
 8004f32:	bf00      	nop
 8004f34:	08005140 	.word	0x08005140
 8004f38:	08005160 	.word	0x08005160
 8004f3c:	08005120 	.word	0x08005120

08004f40 <_sbrk_r>:
 8004f40:	b538      	push	{r3, r4, r5, lr}
 8004f42:	4c06      	ldr	r4, [pc, #24]	; (8004f5c <_sbrk_r+0x1c>)
 8004f44:	2300      	movs	r3, #0
 8004f46:	4605      	mov	r5, r0
 8004f48:	4608      	mov	r0, r1
 8004f4a:	6023      	str	r3, [r4, #0]
 8004f4c:	f7fb fb66 	bl	800061c <_sbrk>
 8004f50:	1c43      	adds	r3, r0, #1
 8004f52:	d102      	bne.n	8004f5a <_sbrk_r+0x1a>
 8004f54:	6823      	ldr	r3, [r4, #0]
 8004f56:	b103      	cbz	r3, 8004f5a <_sbrk_r+0x1a>
 8004f58:	602b      	str	r3, [r5, #0]
 8004f5a:	bd38      	pop	{r3, r4, r5, pc}
 8004f5c:	200001b4 	.word	0x200001b4

08004f60 <__sread>:
 8004f60:	b510      	push	{r4, lr}
 8004f62:	460c      	mov	r4, r1
 8004f64:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004f68:	f000 f896 	bl	8005098 <_read_r>
 8004f6c:	2800      	cmp	r0, #0
 8004f6e:	bfab      	itete	ge
 8004f70:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8004f72:	89a3      	ldrhlt	r3, [r4, #12]
 8004f74:	181b      	addge	r3, r3, r0
 8004f76:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8004f7a:	bfac      	ite	ge
 8004f7c:	6563      	strge	r3, [r4, #84]	; 0x54
 8004f7e:	81a3      	strhlt	r3, [r4, #12]
 8004f80:	bd10      	pop	{r4, pc}

08004f82 <__swrite>:
 8004f82:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004f86:	461f      	mov	r7, r3
 8004f88:	898b      	ldrh	r3, [r1, #12]
 8004f8a:	05db      	lsls	r3, r3, #23
 8004f8c:	4605      	mov	r5, r0
 8004f8e:	460c      	mov	r4, r1
 8004f90:	4616      	mov	r6, r2
 8004f92:	d505      	bpl.n	8004fa0 <__swrite+0x1e>
 8004f94:	2302      	movs	r3, #2
 8004f96:	2200      	movs	r2, #0
 8004f98:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004f9c:	f000 f868 	bl	8005070 <_lseek_r>
 8004fa0:	89a3      	ldrh	r3, [r4, #12]
 8004fa2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004fa6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004faa:	81a3      	strh	r3, [r4, #12]
 8004fac:	4632      	mov	r2, r6
 8004fae:	463b      	mov	r3, r7
 8004fb0:	4628      	mov	r0, r5
 8004fb2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004fb6:	f000 b817 	b.w	8004fe8 <_write_r>

08004fba <__sseek>:
 8004fba:	b510      	push	{r4, lr}
 8004fbc:	460c      	mov	r4, r1
 8004fbe:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004fc2:	f000 f855 	bl	8005070 <_lseek_r>
 8004fc6:	1c43      	adds	r3, r0, #1
 8004fc8:	89a3      	ldrh	r3, [r4, #12]
 8004fca:	bf15      	itete	ne
 8004fcc:	6560      	strne	r0, [r4, #84]	; 0x54
 8004fce:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8004fd2:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8004fd6:	81a3      	strheq	r3, [r4, #12]
 8004fd8:	bf18      	it	ne
 8004fda:	81a3      	strhne	r3, [r4, #12]
 8004fdc:	bd10      	pop	{r4, pc}

08004fde <__sclose>:
 8004fde:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004fe2:	f000 b813 	b.w	800500c <_close_r>
	...

08004fe8 <_write_r>:
 8004fe8:	b538      	push	{r3, r4, r5, lr}
 8004fea:	4c07      	ldr	r4, [pc, #28]	; (8005008 <_write_r+0x20>)
 8004fec:	4605      	mov	r5, r0
 8004fee:	4608      	mov	r0, r1
 8004ff0:	4611      	mov	r1, r2
 8004ff2:	2200      	movs	r2, #0
 8004ff4:	6022      	str	r2, [r4, #0]
 8004ff6:	461a      	mov	r2, r3
 8004ff8:	f7fb fdf0 	bl	8000bdc <_write>
 8004ffc:	1c43      	adds	r3, r0, #1
 8004ffe:	d102      	bne.n	8005006 <_write_r+0x1e>
 8005000:	6823      	ldr	r3, [r4, #0]
 8005002:	b103      	cbz	r3, 8005006 <_write_r+0x1e>
 8005004:	602b      	str	r3, [r5, #0]
 8005006:	bd38      	pop	{r3, r4, r5, pc}
 8005008:	200001b4 	.word	0x200001b4

0800500c <_close_r>:
 800500c:	b538      	push	{r3, r4, r5, lr}
 800500e:	4c06      	ldr	r4, [pc, #24]	; (8005028 <_close_r+0x1c>)
 8005010:	2300      	movs	r3, #0
 8005012:	4605      	mov	r5, r0
 8005014:	4608      	mov	r0, r1
 8005016:	6023      	str	r3, [r4, #0]
 8005018:	f7fb fb2c 	bl	8000674 <_close>
 800501c:	1c43      	adds	r3, r0, #1
 800501e:	d102      	bne.n	8005026 <_close_r+0x1a>
 8005020:	6823      	ldr	r3, [r4, #0]
 8005022:	b103      	cbz	r3, 8005026 <_close_r+0x1a>
 8005024:	602b      	str	r3, [r5, #0]
 8005026:	bd38      	pop	{r3, r4, r5, pc}
 8005028:	200001b4 	.word	0x200001b4

0800502c <_fstat_r>:
 800502c:	b538      	push	{r3, r4, r5, lr}
 800502e:	4c07      	ldr	r4, [pc, #28]	; (800504c <_fstat_r+0x20>)
 8005030:	2300      	movs	r3, #0
 8005032:	4605      	mov	r5, r0
 8005034:	4608      	mov	r0, r1
 8005036:	4611      	mov	r1, r2
 8005038:	6023      	str	r3, [r4, #0]
 800503a:	f7fb fb27 	bl	800068c <_fstat>
 800503e:	1c43      	adds	r3, r0, #1
 8005040:	d102      	bne.n	8005048 <_fstat_r+0x1c>
 8005042:	6823      	ldr	r3, [r4, #0]
 8005044:	b103      	cbz	r3, 8005048 <_fstat_r+0x1c>
 8005046:	602b      	str	r3, [r5, #0]
 8005048:	bd38      	pop	{r3, r4, r5, pc}
 800504a:	bf00      	nop
 800504c:	200001b4 	.word	0x200001b4

08005050 <_isatty_r>:
 8005050:	b538      	push	{r3, r4, r5, lr}
 8005052:	4c06      	ldr	r4, [pc, #24]	; (800506c <_isatty_r+0x1c>)
 8005054:	2300      	movs	r3, #0
 8005056:	4605      	mov	r5, r0
 8005058:	4608      	mov	r0, r1
 800505a:	6023      	str	r3, [r4, #0]
 800505c:	f7fb fb26 	bl	80006ac <_isatty>
 8005060:	1c43      	adds	r3, r0, #1
 8005062:	d102      	bne.n	800506a <_isatty_r+0x1a>
 8005064:	6823      	ldr	r3, [r4, #0]
 8005066:	b103      	cbz	r3, 800506a <_isatty_r+0x1a>
 8005068:	602b      	str	r3, [r5, #0]
 800506a:	bd38      	pop	{r3, r4, r5, pc}
 800506c:	200001b4 	.word	0x200001b4

08005070 <_lseek_r>:
 8005070:	b538      	push	{r3, r4, r5, lr}
 8005072:	4c07      	ldr	r4, [pc, #28]	; (8005090 <_lseek_r+0x20>)
 8005074:	4605      	mov	r5, r0
 8005076:	4608      	mov	r0, r1
 8005078:	4611      	mov	r1, r2
 800507a:	2200      	movs	r2, #0
 800507c:	6022      	str	r2, [r4, #0]
 800507e:	461a      	mov	r2, r3
 8005080:	f7fb fb1f 	bl	80006c2 <_lseek>
 8005084:	1c43      	adds	r3, r0, #1
 8005086:	d102      	bne.n	800508e <_lseek_r+0x1e>
 8005088:	6823      	ldr	r3, [r4, #0]
 800508a:	b103      	cbz	r3, 800508e <_lseek_r+0x1e>
 800508c:	602b      	str	r3, [r5, #0]
 800508e:	bd38      	pop	{r3, r4, r5, pc}
 8005090:	200001b4 	.word	0x200001b4

08005094 <__malloc_lock>:
 8005094:	4770      	bx	lr

08005096 <__malloc_unlock>:
 8005096:	4770      	bx	lr

08005098 <_read_r>:
 8005098:	b538      	push	{r3, r4, r5, lr}
 800509a:	4c07      	ldr	r4, [pc, #28]	; (80050b8 <_read_r+0x20>)
 800509c:	4605      	mov	r5, r0
 800509e:	4608      	mov	r0, r1
 80050a0:	4611      	mov	r1, r2
 80050a2:	2200      	movs	r2, #0
 80050a4:	6022      	str	r2, [r4, #0]
 80050a6:	461a      	mov	r2, r3
 80050a8:	f7fb fa9b 	bl	80005e2 <_read>
 80050ac:	1c43      	adds	r3, r0, #1
 80050ae:	d102      	bne.n	80050b6 <_read_r+0x1e>
 80050b0:	6823      	ldr	r3, [r4, #0]
 80050b2:	b103      	cbz	r3, 80050b6 <_read_r+0x1e>
 80050b4:	602b      	str	r3, [r5, #0]
 80050b6:	bd38      	pop	{r3, r4, r5, pc}
 80050b8:	200001b4 	.word	0x200001b4

080050bc <_init>:
 80050bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80050be:	bf00      	nop
 80050c0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80050c2:	bc08      	pop	{r3}
 80050c4:	469e      	mov	lr, r3
 80050c6:	4770      	bx	lr

080050c8 <_fini>:
 80050c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80050ca:	bf00      	nop
 80050cc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80050ce:	bc08      	pop	{r3}
 80050d0:	469e      	mov	lr, r3
 80050d2:	4770      	bx	lr
